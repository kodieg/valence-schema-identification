% The Polish Valence Dictionary (kodie.phd.walenty.Walenty)
% September 09, 2013
%
% The Polish Valence Dictionary (kodie.phd.walenty.Walenty) is an adaptation of
% the Syntactic Dictionary of Polish Verbs by Marek Świdziński
% in its electronic version provided by Łukasz Dębowski and
% Elżbieta Hajnicz and further expanded by Witold Kieraś to
% include the most frequent verbs in the 1 milion sample of
% NKJP (National Corpus of Polish).
%
% The presented resource results from an automatic conversion
% of the aforementioned dictionary, manually reviewed by Filip
% Skwarski to include correct information about a number of new
% features, including sentential subjects, passivisation, and
% control relations.
%
% The format of the new dictionary has been established by Filip
% Skwarski, Elżbieta Hajnicz, Witold Kieraś, Agnieszka Patejuk,
% Adam Przepiórkowski, Marek Świdziński, and Marcin Woliński.
%
% The dictionary has been edited and compiled using a tool
% created by Bartłomiej Nitoń.
%
% The original Syntactic Dictionary of Polish Verbs derives from:
%
% Marek Świdziński
% Institute of Polish
% Warsaw University
% Warsaw, Poland
%
% © Copyright 1998,2012 by Marek Świdziński
%
% This work is distributed under a CC BY-SA license:
% http://creativecommons.org/licenses/by-sa/2.0/
%
% Parameters:
%     Vocabularies:   clarin1, clarin2, clarin3, clarin4, clarin5, clarin_diff, czas_czasu, czas_emotywne, czas_mentalne, czas_misc1, czas_misc2, czas_misc3, czas_mowienia, czas_operacji, czas_percepcji, czas_percepcji2, czas_przemieszczenia, frek1, frek10, frek2, frek3, frek4, frek5, frek6, frek7, frek8, frek9
%     Frame opinions: pewna, wątpliwa, archaiczna, potoczna
%     Lemma statuses: gotowe, sprawdzone
%     Owners:         AnnaG, FilipS, JakubS, JoannaF, MaciejZ, MarcinO, MartaK, PaulinaR, PiotrB, SebasZ
%     Realizations:   None
%     Opinions added: False
%     
absorbować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
absorbować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
absorbować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {xp(perl)}
abstrahować: imperf: subj{np(str)} + {prepncp(od,gen,int)}
abstrahować: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
adaptować: _: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
adaptować się: _: subj{np(str)} + {prepnp(do,gen)} + {xp(mod)}
administrować: imperf: subj{np(str)} + obj{np(inst)}
adoptować: _: subj{np(str)} + obj{np(str)} + {np(dat)}
adorować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
adresować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
adresować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
afiszować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
afiszować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
afiszować się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
agitować: imperf: subj{np(str)} + {cp(że)}
agitować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
agitować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
agitować: imperf: subj{np(str)} + {or}
agitować: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepnp(za,inst); prepncp(przeciw,dat,żeby); prepncp(za,inst,żeby)} + {prepnp(wśród,gen)}
agitować: imperf: subj{np(str)} + {prepnp(u,gen)}
agitować: imperf: subj{np(str)} + {prepnp(wśród,gen)} + {cp(żeby)}
akcentować: imperf: subj{np(str)} + {cp(że)}
akcentować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
akcentować: imperf: subj{np(str)} + {or}
akceptować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
akceptować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
akceptować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
akompaniować: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
akompaniować: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {prepnp(na,loc)}
akompaniować: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {comprepnp(w czasie)}
akompaniować: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {prepnp(podczas,gen)}
akompaniować: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {prepnp(przy,loc)}
akompaniować: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {prepnp(w,loc)}
aktualizować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {xp(mod)} + {xp(perl)}
aktualizować się: imperf: subj{np(str)} + {advp(misc)}
aktualizować się: imperf: subj{np(str)} + {xp(locat)}
aktywizować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
aktywizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {advp(misc)}
aktywizować się: imperf: subj{np(str)} + {cp(żeby)}
aktywizować się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {advp(misc)}
alarmować: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
alarmować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
alarmować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(o,loc); prepncp(o,loc,że)}
alarmować: imperf: subj{np(str)} + {or}
amortyzować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
amortyzować się: imperf: subj{np(str)}
amputować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
amputować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
amputować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
amputować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
amputować: _: subj{np(str)} + {xp(mod)}
analizować: imperf: subj{np(str)} + obj{cp(int)}
analizować: imperf: subj{np(str)} + obj{np(str); ncp(str,int)}
angażować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
angażować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
angażować się: imperf: subj{np(str)} + {comprepnp(na rzecz)}
angażować się: imperf: subj{np(str)} + {prepnp(do,gen)}
angażować się: imperf: subj{np(str)} + {prepnp(w,acc)}
angażować się: imperf: subj{np(str)} + {prepnp(w,loc)}
anonsować: _: subj{np(str)} + {np(dat)} + {cp(że)}
anonsować: _: subj{np(str)} + obj{np(str)} + {np(dat)}
anonsować: _: subj{np(str)} + obj{np(str)} + {np(inst)}
anonsować: _: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
anonsować: _: subj{np(str)} + obj{np(str)} + {xp(locat)}
anonsować się: _: subj{np(str)} + {or}
anonsować się: _: subj{np(str)} + {xp(locat)}
anulować: perf: subj{np(str)} + {ncp(str,że)}
anulować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
apelować: imperf: subj{np(str)} + {or}
apelować: imperf: subj{np(str)} + {preplexnp(od,gen,_,'wyrok',atr)}
apelować: imperf: subj{np(str)} + {prepncp(do,gen,żeby)}
apelować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); cp(żeby); prepncp(o,acc,żeby)}
aplikować: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,acc)}
aplikować: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
aplikować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
aplikować: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
aplikować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
aplikować: imperf: subj{prepnp(po,str)} + {np(dat)} + {prepnp(na,acc)}
aprobować: imperf: subj{np(str)} + {cp(że)}
aprobować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
aranżować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
aranżować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
aranżować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
aranżować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
aranżować: imperf: subj{np(str)} + {xp(mod)}
aresztować: _: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
argumentować: imperf: subj{np(str)} + {cp(że)}
argumentować: imperf: subj{np(str)} + {cp(żeby)}
argumentować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
argumentować: imperf: subj{np(str)} + {or}
argumentować: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,że); prepncp(przeciw,dat,żeby)}
argumentować: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,że); prepncp(za,inst,żeby)}
asekurować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
asekurować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
asekurować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,gdy)}
asekurować się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,gdy)}
asymilować: _: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
asymilować: _: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
asymilować: _: subj{np(str)} + obj{np(str)} + {xp(locat)}
asymilować się: _: subj{np(str)} + {prepnp(do,gen)}
asymilować się: _: subj{np(str)} + {prepnp(z,inst)}
asymilować się: _: subj{np(str)} + {xp(locat)}
asymilować się: _: subj{np(str)} + {xp(mod)}
asystować: imperf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc); prepncp(przy,loc,jak)}
asystować: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
asystować: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
asystować: imperf: subj{np(str)} + {np(dat)} + {xp(temp)}
atakować: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
atakować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
atakować: imperf: subj{np(str)} + obj{np(str)} + {or}
awansować: _: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
awansować: _: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
awanturować się: imperf: subj{np(str)} + {comprepnp(z powodu)}
awanturować się: imperf: subj{np(str)} + {cp(int)}
awanturować się: imperf: subj{np(str)} + {cp(że)}
awanturować się: imperf: subj{np(str)} + {or}
awanturować się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {prepnp(z,inst)}
babrać: imperf: subj{np(str)} + {np(inst)} + {refl}
babrać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
babrać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
babrać się: imperf: subj{np(str)} + {prepnp(przy,loc)}
babrać się: imperf: subj{np(str)} + {prepnp(z,inst)}
bać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
bać się: imperf: subj{np(str)} + {cp(int)}
bać się: imperf: subj{np(str)} + {np(gen); cp(że); ncp(gen,int); ncp(gen,że); ncp(gen,żeby)}
bać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {cp(żeby)}
bać się: imperf: subj{np(str)} + {prepnp(o,acc); cp(żeby); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
badać: imperf: subj{np(str)} + {np(inst)} + {cp(jak)}
badać: imperf: subj{np(str)} + obj{cp(int)} + {np(inst)}
badać: imperf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(inst)}
badać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
badać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
badać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
badać: imperf: subj{np(str)} + {or}
badać się: imperf: subj{np(str)} + {prepnp(na,acc)}
badać się: imperf: subj{np(str)} + {prepnp(u,gen)}
badać się: imperf: subj{np(str)} + {xp(locat)}
bagatelizować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
balansować: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
balansować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
balansować: imperf: subj{np(str)} + {prepnp(między,inst)}
balansować: imperf: subj{np(str)} + {prepnp(na,loc)}
balansować: imperf: subj{np(str)} + {prepnp(po,loc)}
balansować: imperf: subj{np(str)} + {prepnp(pomiędzy,inst)}
bandażować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
bankrutować: imperf: subj{np(str)} + {prepnp(na,loc)}
bawić: imperf: subj{cp(gdy)} + {np(str)}
bawić: imperf: subj{cp(int)} + {np(str)}
bawić: imperf: subj{cp(jak)} + {np(str)}
bawić: imperf: subj{cp(jeśli)} + {np(str)}
bawić: imperf: subj{cp(kiedy)} + {np(str)}
bawić: imperf: subj{np(str); cp(że); ncp(str,że)} + {np(str)}
bawić: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)}
bawić: imperf: subj{np(str)} + {prepnp(u,gen)}
bawić: imperf: subj{np(str)} + {xp(locat)}
bawić się: imperf: subj{np(str)} + {cp(że)}
bawić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
bawić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
bawić się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
bazować: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
bąknąć: perf: subj{np(str)} + {cp(int)}
bąknąć: perf: subj{np(str)} + {cp(że)}
bąknąć: perf: subj{np(str)} + {cp(żeby)}
bąknąć: perf: subj{np(str)} + {np(str)}
bąknąć: perf: subj{np(str)} + {or}
bąknąć: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {nonch}
beczeć: imperf: subj{np(str)} + {cp(że)}
beczeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst); prepncp(nad,inst,że)}
bełkotać: imperf: subj{np(str)} + {cp(że)} + {preplexnp(pod,inst,_,'nos',natr)}
bełkotać: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(do,gen,sg,'ucho',ratr)}
bełkotać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',ratr)} + {or}
bełkotać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',ratr)}
bełkotać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,_,'nos',natr)}
bełkotać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
bełkotać: imperf: subj{np(str)} + {prepadjp(po,postp)}
bełkotać: imperf: subj{np(str)} + {preplexnp(pod,inst,_,'nos',natr)} + {or}
bełkotać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
bełkotać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
bełkotać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
bełkotać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)} + {nonch}
bębnić: imperf: {cp(że)} + {xp(locat)}
bębnić: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(w,acc,sg,'ucho',ratr)}
bębnić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
bębnić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
bębnić: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {preplexnp(do,gen,sg,'takt',ratr)}
bębnić: imperf: subj{np(str)} + {prepnp(o,acc)}
bębnić: imperf: subj{np(str)} + {prepnp(w,acc)}
biadać: imperf: subj{np(str)} + {cp(int); cp(że)}
biadać: imperf: subj{np(str)} + {or}
biadać: imperf: subj{np(str)} + {prepnp(na,acc)}
biadać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
biadolić: imperf: subj{np(str)} + {cp(int)}
biadolić: imperf: subj{np(str)} + {cp(że)}
biadolić: imperf: subj{np(str)} + {cp(żeby)}
biadolić: imperf: subj{np(str)} + {or}
biadolić: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
biadolić: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
bić: imperf: subj{np(str)} + {np(dat)} + {lexnp(str,_,'brawo',atr)}
bić: imperf: subj{np(str)} + {np(dat)} + {lexnp(str,pl,'pokłon',atr)}
bić: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
bić: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
bić: imperf: subj{np(str)} + {np(str)}
bić: imperf: subj{np(str)} + obj{np(str)} + {fixed('na kwaśne jabłko')}
bić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {preplexnp(na,acc,sg,'miazga',atr)}
bić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc); prepnp(w,acc)}
bić: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'alarm',natr)}
bić: imperf: subj{np(str)} + {prepnp(po,loc)} + {refl}
bić: imperf: subj{np(str)} + {prepnp(przed,inst)} + {lexnp(inst,_,'czoło',natr)}
bić: imperf: subj{np(str)} + {prepnp(przed,inst)} + {lexnp(str,pl,'pokłon',atr)}
bić: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
bić: imperf: subj{np(str)} + {prepnp(z,gen)}
bić: imperf: subj{np(str)} + {xp(abl)}
bić się: imperf: subj{np(str)} + {cp(int)} + {preplexnp(z,inst,pl,'myśl',natr)}
bić się: imperf: subj{np(str)} + {preplexnp(w,acc,_,'pierś',natr)}
bić się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
bić się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
biec: imperf: subj,controller{np(str)} + controllee{infp(_)}
biec: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
biec: imperf: subj{np(str)} + {prepnp(za,inst)}
biec: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
biedzić się: imperf: subj{np(str)} + {cp(int)}
biedzić się: imperf: subj{np(str)} + {cp(żeby)}
biedzić się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że); prepncp(nad,inst,żeby)}
biegać: imperf: {np(dat)} + {prepncp(o,acc,int)}
biegać: imperf: {np(dat)} + {prepncp(o,acc,że)}
biegać: imperf: {np(dat)} + {prepnp(o,acc)}
biegać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
biegać: imperf: subj{np(str)} + {prepnp(za,inst)}
biegać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
bielić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
bielić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
bielić się: imperf: subj{np(str)} + {np(inst)}
bielić się: imperf: subj{np(str)} + {prepnp(od,gen)}
bielić się: imperf: subj{np(str)} + {prepnp(w,loc)}
biwakować: imperf: subj{np(str)} + {xp(locat)}
blednąć: imperf: subj{np(str)} + {prepncp(przy,loc,int)}
blednąć: imperf: subj{np(str)} + {prepncp(wobec,gen,że)}
blednąć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
blednąć: imperf: subj{np(str)} + {prepnp(przy,loc)}
blednąć: imperf: subj{np(str)} + {prepnp(w,loc)}
blednąć: imperf: subj{np(str)} + {prepnp(wobec,gen)}
blednąć: imperf: subj{np(str)} + {xp(mod)}
blednąć: imperf: subj{np(str)} + {xp(temp)}
blokować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
blokować się: imperf: subj{np(str)} + {prepnp(przy,loc)}
bluźnić: imperf: subj{np(str)} + {cp(int)}
bluźnić: imperf: subj{np(str)} + {cp(że)}
bluźnić: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
bluźnić: imperf: subj{np(str)} + {or}
bluźnić: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
bluźnić: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
błagać: imperf: subj{np(str)} + {np(gen)}
błagać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); cp(żeby); prepncp(o,acc,żeby)}
błagać: imperf: subj{np(str)} + {or}
błądzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
błądzić: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
błądzić: imperf: subj{np(str)} + {prepnp(w,loc)}
błądzić: imperf: subj{np(str)} + {xp(perl)}
błąkać się: imperf: subj{cp(że)} + {np(dat)} + {xp(locat)}
błąkać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
błąkać się: imperf: subj{np(str)} + {prepnp(w,loc)}
błąkać się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
błąkać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
błąkać się: imperf: subj{np(str)} + {xp(perl)}
błogosławić: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
błogosławić: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
błogosławić: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
błogosławić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
błogosławić: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {refl}
błyskać: imperf: subj{E}
błyskać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
błyskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
błyskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
błyskać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)}
błyskać: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
błysnąć: perf: {np(dat)} + {cp(że)}
błysnąć: perf: {np(dat)} + {or}
błysnąć: perf: subj{E}
błysnąć: perf: subj{np(str)} + {comprepnp(na temat)}
błysnąć: perf: subj{np(str)} + {comprepnp(w kwestii)}
błysnąć: perf: subj{np(str)} + {cp(że)}
błysnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
błysnąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
błysnąć: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
błysnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
błysnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
błysnąć: perf: subj{np(str)} + {np(inst)} + {xp(abl)}
błysnąć: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
błysnąć: perf: subj{np(str)} + {or}
błysnąć się: perf: subj{np(str)}
błyszczeć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
błyszczeć się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
boczyć się: imperf: subj{np(str)} + {prepncp(na,acc,że)}
boczyć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
boczyć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
boczyć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
boczyć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
bogacić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
bogacić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
bogacić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
bogacić się: imperf: subj{np(str)} + {np(inst)}
bogacić się: imperf: subj{np(str)} + {prepnp(na,loc)}
bogacić się: imperf: subj{np(str)} + {prepnp(o,acc)}
bogacić się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
bojkotować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
boksować: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
boksować: imperf: subj{np(str)} + {prepnp(dla,gen)}
boksować: imperf: subj{np(str)} + {prepnp(jako,str)}
boksować: imperf: subj{np(str)} + {prepnp(w,loc)}
boksować: imperf: subj{np(str)} + {prepnp(z,inst)}
boksować: imperf: subj{np(str)} + {xp(mod)}
boksować się: imperf: subj{np(str)} + {prepnp(z,inst)}
boleć: imperf: {np(str)} + {comprepnp(z powodu)} + {xp(locat)}
boleć: imperf: {np(str)} + {prepnp(od,gen)} + {xp(locat)}
boleć: imperf: {np(str)} + {prepnp(z,gen)} + {xp(locat)}
boleć: imperf: subj,controller{np(str)} + controllee{infp(_)}
boleć: imperf: subj{cp(że)} + {np(str)}
boleć: imperf: subj{lexnp(str,sg,'głowa',natr)} + {np(str)} + {prepncp(o,acc,int)}
boleć: imperf: subj{lexnp(str,sg,'głowa',natr)} + {np(str)} + {prepncp(o,acc,żeby)}
boleć: imperf: subj{lexnp(str,sg,'głowa',natr)} + {np(str)} + {prepnp(o,acc)}
boleć: imperf: subj{ncp(str,int)} + {np(str)}
boleć: imperf: subj{ncp(str,kiedy)} + {np(str)}
boleć: imperf: subj{np(str)} + {cp(że)}
boleć: imperf: subj{np(str); ncp(str,że)} + {np(str)}
boleć: imperf: subj{np(str)} + {np(str)} + {cp(że)}
boleć: imperf: subj{np(str)} + {or}
boleć: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
bombardować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
bombardować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
bombardować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
bombardować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
borykać się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
bożyć się: imperf: subj{np(str)} + {cp(że)}
brać: imperf: {np(str)} + {prepnp(na,acc)}
brać: imperf: subj{np(str)} + {cp(że)} + {preplexnp(do,gen,_,'siebie',natr)}
brać: imperf: subj{np(str)} + {lexnp(part,sg,'woda',natr)} + {preplexnp(w,acc,pl,'usta',natr)}
brać: imperf: subj{np(str)} + {ncp(str,że)} + {preplexnp(do,gen,_,'siebie',natr)}
brać: imperf: subj{np(str)} + {ncp(str,że)} + {preplexnp(na,acc,_,'siebie',natr)}
brać: imperf: subj{np(str)} + {np(str)}
brać: imperf: subj{np(str)} + {np(str); ncp(str,że); ncp(str,żeby)} + {prepnp(do,gen)} + {lexnp(dat,_,'siebie',natr)}
brać: imperf: subj{np(str)} + {np(str)} + {preplexnp(do,gen,_,'siebie',natr)}
brać: imperf: subj{np(str)} + {np(str)} + {preplexnp(na,acc,_,'siebie',natr)}
brać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(za,acc)}
brać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
brać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(abl)}
brać: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
brać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {preplexnp(pod,acc,sg,'uwaga',atr)}
brać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
brać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
brać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
brać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
brać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
brać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
brać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
brać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
brać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
brać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
brać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
brać: imperf: subj{np(str)} + {prepnp(nad,inst)} + {lexnp(str,sg,'góra',natr)}
brać: imperf: subj{np(str)} + {prepnp(od,gen)} + {preplexnp(w,acc,sg,'łapa',natr)}
brać: imperf: subj{np(str)} + {prepnp(od,gen)} + {preplexnp(w,acc,sg,'skóra',natr)}
brać: imperf: subj{np(str)} + {prepnp(za,acc)} + {refl}
brać: imperf: subj{np(str)} + {prepnp(z,inst)} + {lexnp(str,sg,'ślub',atr)}
brać się: imperf: subj{np(str)} + {preplexnp(w,acc,pl,'karb',natr)}
brać się: imperf: subj{np(str)} + {preplexnp(w,acc,sg,'garść',natr)}
brać się: imperf: subj{np(str)} + {prepnp(do,gen)}
brać się: imperf: subj{np(str)} + {prepnp(na,acc)}
brać się: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
brać się: imperf: subj{np(str)} + {prepnp(za,acc)}
brać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
brać się: imperf: subj{np(str)} + {xp(abl)}
brak: imperf: {np(dat)} + {np(gen)} + {cp(żeby)}
brak: imperf: {np(dat)} + {np(gen)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
brak: imperf: {np(dat)} + {prepnp(dla,gen)} + {lexnp(gen,pl,'słowo',atr)}
brak: imperf: {np(dat)} + {prepnp(na,acc)} + {lexnp(gen,pl,'słowo',atr)}
brak: imperf: {np(gen)} + {xp(locat)}
braknąć: imperf: {np(dat)} + {np(gen)} + {cp(żeby)}
braknąć: imperf: {np(dat)} + {np(gen)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
braknąć: imperf: {np(dat)} + {prepnp(dla,gen)} + {lexnp(gen,pl,'słowo',atr)}
braknąć: imperf: {np(dat)} + {prepnp(na,acc)} + {lexnp(gen,pl,'słowo',atr)}
braknąć: imperf: {np(gen)} + {xp(locat)}
brakować: imperf: {np(dat)} + {cp(żeby)}
brakować: imperf: {np(dat)} + {np(gen); ncp(gen,że); ncp(gen,żeby)}
bratać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
bratać się: imperf: subj{np(str)} + {prepnp(z,inst)}
bredzić: imperf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)}
bredzić: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w kwestii)}
bredzić: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w sprawie)}
bredzić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
bredzić: imperf: subj{np(str)} + {np(dat)} + {np(str)}
bredzić: imperf: subj{np(str)} + {np(dat)} + {or}
bredzić: imperf: subj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
bredzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
brnąć: imperf: subj{np(str)} + {cp(że)}
brnąć: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc); prepncp(w,loc,że)}
brnąć: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
brnąć: imperf: subj{np(str)} + {prepnp(przez,acc)}
brnąć: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
brnąć: imperf: subj{np(str)} + {prepnp(za,inst)}
brodzić: imperf: subj{np(str)} + {prepnp(po,acc)} + {prepnp(w,loc)}
brodzić: imperf: subj{np(str)} + {xp(dur)} + {xp(locat)} + {xp(mod)}
bronić: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
bronić: imperf: subj{np(str)} + {np(dat)} + {np(gen)}
bronić: imperf: subj{np(str)} + {np(gen); ncp(gen,że)} + {prepnp(przed,inst); prepncp(przed,inst,że)}
bronić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst); prepncp(przed,inst,że)}
bronić się: imperf: subj{np(str)} + {cp(że)}
bronić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst); prepncp(przed,inst,żeby)}
bronić się: imperf: subj{np(str)} + {or}
bronić się: imperf: subj{np(str)} + {prepnp(od,gen)}
brudzić: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
brudzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
brudzić się: imperf: subj{np(str)} + {comprepnp(w czasie)}
brudzić się: imperf: subj{np(str)} + {np(inst)}
brudzić się: imperf: subj{np(str)} + {prepnp(od,gen)}
brudzić się: imperf: subj{np(str)} + {prepnp(podczas,gen)}
brudzić się: imperf: subj{np(str)} + {prepnp(przy,loc)}
brzęczeć: imperf: {np(dat)} + {xp(dur)} + {xp(locat)}
brzęczeć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
brzęczeć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
brzęczeć: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
brzmieć: imperf: controller{np(dat)} + controllee{xp(mod)} + {preplexnp(w,loc,pl,'ucho',natr)}
brzmieć: imperf: subj,controller{np(str)} + controllee{np(nom)}
brzmieć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {preplexnp(w,loc,pl,'usta',ratr)}
brzmieć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',ratr)}
brzmieć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(dla,gen)}
brzmieć: imperf: subj,controller{np(str); ncp(str,że)} + controllee{xp(mod)} + {np(dat)} + {preplexnp(w,loc,pl,'ucho',ratr)}
brzmieć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {preplexnp(w,loc,pl,'ucho',ratr)}
brzmieć: imperf: subj{np(str)} + {prepnp(w,loc)}
brzydzić: imperf: subj{cp(gdy)} + {np(str)}
brzydzić: imperf: subj{cp(jak)} + {np(str)}
brzydzić: imperf: subj{cp(kiedy)} + {np(str)}
brzydzić: imperf: subj{cp(że)} + {np(str)}
brzydzić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)} + {np(str)}
brzydzić się: imperf: subj,controller{np(str)} + controllee{infp(_)}
brzydzić się: imperf: subj{np(str)} + {cp(że)}
brzydzić się: imperf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)}
brzydzić się: imperf: subj{np(str)} + {np(inst); ncp(gen,int); ncp(inst,że)}
buchać: imperf: {np(inst)} + {prepnp(od,gen)}
buchać: imperf: {np(inst)} + {xp(abl)} + {xp(adl)}
buchać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
buchnąć: perf: {np(inst)} + {prepnp(od,gen)}
buchnąć: perf: {np(inst)} + {xp(abl)} + {xp(adl)}
buchnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
buchnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
buchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
buchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
budować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
budować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
budować się: imperf: subj{np(str)} + {xp(locat)}
budzić: imperf: subj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
budzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
budzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
budzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
budzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(wśród,gen)}
budzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
budzić się: imperf: subj{np(str)} + {comprepnp(z powodu)}
budzić się: imperf: subj{np(str)} + {prepnp(do,gen)}
budzić się: imperf: subj{np(str)} + {prepnp(między,inst)}
budzić się: imperf: subj{np(str)} + {prepnp(na,acc)}
budzić się: imperf: subj{np(str)} + {prepnp(od,gen)}
budzić się: imperf: subj{np(str)} + {prepnp(u,gen)}
budzić się: imperf: subj{np(str)} + {prepnp(w,loc)}
budzić się: imperf: subj{np(str)} + {prepnp(z,gen)}
bujać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
bujać: imperf: subj{np(str)} + {np(str)} + {cp(że)}
bujać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
bujać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
bujać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
bujać: imperf: subj{np(str)} + {or}
bujać: imperf: subj{np(str)} + {prepnp(o,loc)}
bujać się: imperf: subj{np(str)} + {prepnp(na,loc)}
bujać się: imperf: subj{np(str)} + {prepnp(w,loc)}
bujać się: imperf: subj{np(str)} + {prepnp(z,inst)}
bujać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
bujać się: imperf: subj{np(str)} + {xp(locat)}
bulgotać: imperf: {np(dat)} + {xp(locat)}
bulgotać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
bulgotać: imperf: subj{np(str)} + {xp(mod)}
buntować: imperf: subj{np(str)} + {np(str)} + {cp(żeby)}
buntować: imperf: subj{np(str)} + {np(str)} + {prepnp(na,acc)}
buntować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
buntować się: imperf: subj{np(str)} + {prepncp(przeciw,dat,żeby)}
buntować się: imperf: subj{np(str)} + {prepnp(na,acc)}
buntować się: imperf: subj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(w,loc)}
buntować się: imperf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
buntować się: imperf: subj{np(str)} + {prepnp(w,loc)} + {cp(żeby)}
burczeć: imperf: {np(dat)} + {xp(locat)}
burczeć: imperf: subj{np(str)} + {comprepnp(na temat)}
burczeć: imperf: subj{np(str)} + {np(str)}
burczeć: imperf: subj{np(str)} + {or}
burczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
burczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
burknąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
burknąć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
burknąć: perf: subj{np(str)} + {np(dat)} + {or}
burknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
burknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
burknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
burknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
burknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
burknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
burknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
burknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
burknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {nonch}
burknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
burknąć: perf: subj{np(str)} + {prepnp(o,loc)}
burzyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
burzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
burzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
burzyć się: imperf: subj{np(str)} + {or}
burzyć się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
burzyć się: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,że)}
burzyć się: imperf: subj{np(str)} + {prepnp(w,loc)}
buszować: imperf: subj{np(str)} + {prepnp(po,loc); prepnp(u,gen); xp(locat)}
być: imperf: controller{np(dat)} + controllee{infp(_)} + {advp(misc)}
być: imperf: {np(dat)} + {cp(że)} + {advp(misc)}
być: imperf: {prepnp(z,inst)} + {advp(misc)}
być: imperf: subj,controller{cp(gdy)} + controllee{adjp(pred)}
być: imperf: subj,controller{cp(gdy)} + controllee{np(inst)}
być: imperf: subj,controller{cp(int)} + controllee{adjp(pred)}
być: imperf: subj,controller{cp(int)} + controllee{np(inst)}
być: imperf: subj,controller{cp(jak)} + controllee{adjp(pred)}
być: imperf: subj,controller{cp(jak)} + controllee{np(inst)}
być: imperf: subj,controller{cp(jakoby)} + controllee{adjp(pred)}
być: imperf: subj,controller{cp(jakoby)} + controllee{np(inst)}
być: imperf: subj,controller{cp(jeśli)} + controllee{adjp(pred)}
być: imperf: subj,controller{cp(jeśli)} + controllee{np(inst)}
być: imperf: subj,controller{cp(kiedy)} + controllee{adjp(pred)}
być: imperf: subj,controller{cp(kiedy)} + controllee{np(inst)}
być: imperf: subj,controller{cp(żeby)} + controllee{adjp(pred)}
być: imperf: subj,controller{cp(żeby)} + controllee{np(inst)}
być: imperf: subj,controller{cp(że)} + controllee{adjp(pred)}
być: imperf: subj,controller{cp(że)} + controllee{np(inst)}
być: imperf: subj,controller{infp(_)} + controllee{adjp(pred)}
być: imperf: subj,controller{infp(_)} + controllee{np(inst)}
być: imperf: subj,controller{np(str)} + controllee{infp(_)}
być: imperf: subj,controller{np(str)} + controllee{np(nom)}
być: imperf: subj,controller{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,jakoby); ncp(str,jeśli); ncp(str,kiedy); ncp(str,że); ncp(str,żeby)} + controllee{adjp(pred)}
być: imperf: subj,controller{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,jakoby); ncp(str,jeśli); ncp(str,kiedy); ncp(str,że); ncp(str,żeby)} + controllee{np(inst)}
być: imperf: subj{np(str)} + {lexnp(gen,sg,'zdanie',atr)}
być: imperf: subj{np(str)} + {prepnp(na,loc)}
być: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepnp(za,inst); prepncp(przeciw,dat,żeby); prepncp(za,inst,żeby)}
być: imperf: subj{np(str)} + {prepnp(przy,loc)}
być: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
być: imperf: subj{np(str)} + {prepnp(w,loc)}
być: imperf: subj{np(str)} + {prepnp(z,inst)}
być: imperf: subj{np(str)} + {xp(temp)}
bywać: imperf: controller{np(dat)} + controllee{infp(_)} + {advp(misc)}
bywać: imperf: {np(dat)} + {cp(że)} + {advp(misc)}
bywać: imperf: {prepnp(z,inst)} + {advp(misc)}
bywać: imperf: subj,controller{cp(gdy)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{cp(gdy)} + controllee{np(inst)}
bywać: imperf: subj,controller{cp(int)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{cp(int)} + controllee{np(inst)}
bywać: imperf: subj,controller{cp(jak)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{cp(jak)} + controllee{np(inst)}
bywać: imperf: subj,controller{cp(jeśli)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{cp(jeśli)} + controllee{np(inst)}
bywać: imperf: subj,controller{cp(kiedy)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{cp(kiedy)} + controllee{np(inst)}
bywać: imperf: subj,controller{cp(żeby)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{cp(żeby)} + controllee{np(inst)}
bywać: imperf: subj,controller{cp(że)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{cp(że)} + controllee{np(inst)}
bywać: imperf: subj,controller{infp(_)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{infp(_)} + controllee{np(inst)}
bywać: imperf: subj,controller{np(str)} + controllee{infp(_)}
bywać: imperf: subj,controller{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,jeśli); ncp(str,kiedy); ncp(str,że); ncp(str,żeby)} + controllee{adjp(pred)}
bywać: imperf: subj,controller{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,jeśli); ncp(str,kiedy); ncp(str,że); ncp(str,żeby)} + controllee{np(inst)}
bywać: imperf: subj{np(str)} + {lexnp(gen,sg,'zdanie',atr)}
bywać: imperf: subj{np(str)} + {prepnp(na,loc)}
bywać: imperf: subj{np(str)} + {prepnp(przy,loc)}
bywać: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)} + {xp(temp)}
bywać: imperf: subj{np(str)} + {prepnp(u,gen)} + {xp(temp)}
bywać: imperf: subj{np(str)} + {prepnp(w,loc)}
całować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
całować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc); prepnp(w,acc)}
całować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {preplexnp(z,gen,sg,'dubeltówka',natr)}
całować: imperf: subj{np(str)} + {prepnp(po,loc)} + {refl}
całować: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
całować się: imperf: subj{np(str)} + {prepnp(po,loc)} + {prepnp(z,inst)}
całować się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
cechować: imperf: subj{cp(że)} + {np(str)}
cechować: imperf: subj{np(str)} + {np(str)}
cechować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
cechować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
cechować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
cechować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
cedzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)} + {or}
cedzić: imperf: subj{np(str)} + {prepnp(przez,acc)} + {cp(że)}
cedzić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
celebrować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
celować: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
celować: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
celować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
celować: imperf: subj{np(str)} + {prepnp(ku,dat)}
celować: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
celować: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
celować: imperf: subj{np(str)} + {prepnp(w,loc)}
celować: imperf: subj{np(str)} + {xp(locat)}
cenić: imperf: subj{np(str)} + {advp(misc)} + {refl}
cenić: imperf: subj{np(str)} + {np(dat)} + {cp(że); ncp(str,że)} + {xp(locat)}
cenić: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
cenzurować: imperf: subj{np(str)} + obj{cp(int)}
cenzurować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
cenzurować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
cenzurować: imperf: subj{np(str)} + {refl}
cerować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
chadzać: imperf: subj,controller{np(str)} + controllee{infp(_)} + {xp(adl)}
chadzać: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {xp(abl)} + {xp(perl)}
chadzać: imperf: subj{np(str)} + {prepnp(na,acc); xp(adl)}
chadzać: imperf: subj{np(str)} + {prepnp(w,loc)}
chadzać: imperf: subj{np(str)} + {prepnp(za,inst)} + {xp(adl)}
charakteryzować: imperf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + {refl}
charakteryzować: imperf: subj,controller{np(str)} + controllee{prepnp(na,acc)} + {refl}
charakteryzować: imperf: subj{np(str); ncp(str,że)} + {np(str)}
charakteryzować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
charakteryzować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)}
charakteryzować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
charakteryzować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(na,acc)}
charakteryzować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
charczeć: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
charczeć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
charczeć: imperf: subj{np(str)} + {or}
chcieć: imperf: controller{np(str)} + controllee{cp(żeby); infp(_); advp(misc)}
chcieć: imperf: subj,controller{np(str)} + controllee{infp(_)}
chcieć: imperf: subj{np(str)} + {cp(że)}
chcieć: imperf: subj{np(str)} + {np(gen); cp(żeby); ncp(gen,żeby)} + {prepnp(od,gen)}
chcieć: imperf: subj{np(str)} + {np(str)} + {prepnp(od,gen)}
chcieć: imperf: subj{np(str)} + {np(str)} + {prepnp(za,acc)}
chcieć: imperf: subj{np(str)} + {or}
chcieć: imperf: subj{np(str)} + {prepnp(do,gen)}
chcieć: imperf: subj{np(str)} + {xp(adl)}
chcieć się: imperf: controller{np(dat)} + controllee{infp(_)}
chcieć się: imperf: {np(dat)} + {np(gen)}
chełpić się: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
chełpić się: imperf: subj{np(str)} + {np(dat)} + {cp(jak)}
chełpić się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
chełpić się: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
chełpić się: imperf: subj{np(str)} + {np(dat)} + {or}
chełpić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)} + {prepnp(przed,inst)}
chełpić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
chełpić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(jak)}
chełpić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
chełpić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
chichotać: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
chichotać: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
chichotać: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
chichotać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
chichotać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
chichotać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
chlapnąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
chlapnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
chlapnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
chlapnąć: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
chlapnąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
chlapnąć: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(abl)} + {xp(adl)}
chlapnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
chlipać: imperf: subj{np(str)} + {cp(że)}
chlipać: imperf: subj{np(str)} + {np(part)}
chlipać: imperf: subj{np(str)} + {or}
chlipać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,że)}
chlubić się: imperf: subj{np(str)} + {cp(że)}
chlubić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
chlubić się: imperf: subj{np(str)} + {prepnp(wobec,gen)}
chlusnąć: perf: {np(inst)} + {xp(abl)} + {xp(adl)}
chlusnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
chlusnąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
chlusnąć: perf: subj{np(str)} + {np(dat)} + {xp(adl)} + {xp(perl)}
chlusnąć: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
chlusnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
chłodzić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {refl}
chłodzić: imperf: subj{np(str)} + {np(dat)} + {preplexnp(za,inst,sg,'pomoc',natr)} + {refl}
chłodzić: imperf: subj{np(str)} + {np(dat)} + {xp(locat)} + {refl}
chłodzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
chłodzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(za,inst,sg,'pomoc',natr)}
chłodzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
chłodzić się: imperf: subj{np(str)} + {xp(locat)}
chłonąć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
chłonąć: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(perl)}
chłostać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
chłostać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
chłostać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
chłostać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
chłostać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
chodzić: imperf: {np(dat)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
chodzić: imperf: subj,controller{np(str)} + controllee{infp(_)} + {xp(adl)}
chodzić: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(po,loc,sg,'głowa',natr)}
chodzić: imperf: subj{cp(żeby)} + {prepnp(za,inst)}
chodzić: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(po,loc,sg,'głowa',natr)}
chodzić: imperf: subj{cp(że)} + {prepnp(za,inst)}
chodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
chodzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
chodzić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
chodzić: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {xp(abl)} + {xp(perl)}
chodzić: imperf: subj{np(str)} + {prepnp(koło,gen)}
chodzić: imperf: subj{np(str)} + {prepnp(na,acc); xp(adl)}
chodzić: imperf: subj{np(str)} + {prepnp(na,loc)}
chodzić: imperf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
chodzić: imperf: subj{np(str)} + {prepnp(w,loc)}
chodzić: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,żeby)}
chodzić: imperf: subj{np(str)} + {prepnp(z,inst)}
chodzić: imperf: subj{np(str)} + {prepnp(z,inst)} + {preplexnp(do,gen,sg,'łóżka',natr)}
chodzić: imperf: subj{np(str)} + {prepnp(z,inst)} + {preplexnp(w,loc,sg,'para',atr)}
chorować: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)} + {prepnp(z,gen)}
chorować: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(od,gen)}
chować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {xp(adl)}
chować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {xp(locat)}
chować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {xp(adl)}
chować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {xp(locat)}
chować: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(adl)} + {refl}
chować: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(locat)} + {refl}
chować się: imperf: subj{np(str)} + {prepnp(przy,loc)}
chować się: imperf: subj{np(str)} + {prepnp(z,inst)}
chować się: imperf: subj{np(str)} + {prepnp(z,inst); xp(locat)} + {advp(misc)}
chrapać: imperf: subj{np(str)}
chronić: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
chronić: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)}
chronić: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)} + {refl}
chronić: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)} + {refl}
chronić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {xp(locat)}
chronić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {xp(locat)}
chronić się: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
chronić się: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(locat)}
chronić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(adl)}
chronić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(locat)}
chrupać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
chrupać: imperf: subj{np(str)} + {np(inst)}
chrupać: imperf: subj{np(str)} + obj{np(str)}
chrząkać: imperf: subj{np(str)} + {advp(misc)} + {or}
chrząkać: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'znak',ratr)}
chrząkać: imperf: subj{np(str)} + {prepnp(z,gen)}
chrząkać: imperf: subj{np(str)} + {xp(mod)}
chrząknąć: perf: subj{np(str)} + {advp(misc)} + {or}
chrząknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
chrząknąć: perf: subj{np(str)} + {preplexnp(na,acc,sg,'znak',ratr)}
chrząknąć: perf: subj{np(str)} + {prepnp(z,gen)}
chrząknąć: perf: subj{np(str)} + {xp(mod)}
chrzęścić: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
chrzęścić: imperf: subj{np(str)} + {np(inst)}
chuchać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
chuchać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)}
chuchać: imperf: subj{np(str)} + {prepnp(na,acc)}
chudnąć: imperf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
chudnąć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
chudnąć: imperf: subj{np(str)} + {prepnp(o,acc)}
chudnąć: imperf: subj{np(str)} + {prepnp(od,gen)}
chudnąć: imperf: subj{np(str)} + {prepnp(w,loc)}
chudnąć: imperf: subj{np(str)} + {xp(mod)}
chwalić: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {refl}
chwalić: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
chwalić: imperf: subj{np(str)} + {np(str); ncp(str,że)}
chwalić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
chwalić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
chwalić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
chwalić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
chwalić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)} + {cp(że)}
chwalić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
chwalić się: imperf: subj{np(str)} + {np(dat)} + {np(inst); cp(że); ncp(inst,że)}
chwalić się: imperf: subj{np(str)} + {np(dat)} + {or}
chwalić się: imperf: subj{np(str)} + {np(inst); cp(że); ncp(inst,że)} + {prepnp(przed,inst)}
chwalić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(wobec,gen)}
chwalić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
chwalić się: imperf: subj{np(str)} + {prepnp(wobec,gen)} + {cp(że)}
chwycić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
chwycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
chwycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
chwycić: perf: subj{np(str)} + {prepnp(pod,acc)} + {refl}
chwycić się: perf: subj{np(str)} + {np(gen)}
chwycić się: perf: subj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc)}
chwytać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {or}
chwytać się: imperf: subj{np(str)} + {np(gen)}
chwytać się: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
chwytać się: imperf: subj{np(str)} + {prepnp(w,acc)}
chwytać się: imperf: subj{np(str)} + {prepnp(za,acc)} + {or}
chybić: perf: subj{np(str)} + {np(gen)}
chylić: imperf: subj{np(str)} + obj{lexnp(part,sg,'czoło',natr)} + {cp(że)}
chylić: imperf: subj{np(str)} + obj{lexnp(part,sg,'czoło',natr)} + {prepnp(ku,dat)}
chylić: imperf: subj{np(str)} + obj{lexnp(part,sg,'czoło',natr)} + {prepnp(przed,inst); prepncp(przed,inst,że)}
chylić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
chylić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
chylić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
chylić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
chylić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
chylić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
chylić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
chylić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
chylić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
chylić się: imperf: subj{np(str)} + {prepnp(ku,dat)}
chylić się: imperf: subj{np(str)} + {prepnp(na,acc)}
chylić się: imperf: subj{np(str)} + {prepnp(nad,inst)}
chylić się: imperf: subj{np(str)} + {prepnp(pod,inst)}
chylić się: imperf: subj{np(str)} + {prepnp(przed,inst)}
chylić się: imperf: subj{np(str)} + {prepnp(w,loc)}
chylić się: imperf: subj{np(str)} + {xp(adl)}
ciąć: imperf: subj{np(str)} + {np(inst)} + {refl}
ciąć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc); prepnp(w,acc)}
ciąć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
ciąć: _: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
ciąć się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
ciągnąć: imperf: {np(inst)} + {prepnp(od,gen)}
ciągnąć: imperf: {np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
ciągnąć: imperf: subj{np(str)} + {cp(że)}
ciągnąć: imperf: subj{np(str)} + {np(str)} + {or}
ciągnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
ciągnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
ciągnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
ciągnąć: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
ciągnąć: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
ciągnąć się: imperf: subj{np(str)} + {prepnp(za,inst)}
ciągnąć się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
ciągnąć się: imperf: subj{np(str)} + {xp(dur)}
ciągnąć się: imperf: subj{np(str)} + {xp(perl)}
ciążyć: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
ciążyć: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
ciążyć: imperf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
ciążyć: imperf: subj{np(str)} + {prepnp(nad,inst)}
cichnąć: imperf: subj{np(str)}
ciec: imperf: {np(dat)} + {xp(abl)}
ciec: imperf: {np(dat)} + {xp(adl)}
ciec: imperf: {np(dat)} + {xp(perl)}
ciec: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(adl)}
ciec: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
ciekawić: imperf: subj{cp(że)} + {np(str)}
ciekawić: imperf: subj{np(str); cp(int); ncp(str,int); ncp(str,że)} + {np(str)}
ciekawić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
ciemnieć: imperf: subj{np(str)} + {prepnp(ku,dat)}
ciemnieć: imperf: subj{np(str)} + {prepnp(od,gen)}
ciemnieć: imperf: subj{np(str)} + {prepnp(w,acc)}
ciemnieć: imperf: subj{np(str)} + {xp(locat)} + {xp(mod)} + {xp(temp)}
cierpieć: imperf: subj,controller{np(str)} + controllee{infp(_)}
cierpieć: imperf: subj{np(str)} + {comprepnp(z powodu)}
cierpieć: imperf: subj{np(str)} + {cp(gdy)}
cierpieć: imperf: subj{np(str)} + {cp(jak)}
cierpieć: imperf: subj{np(str)} + {cp(jeśli)}
cierpieć: imperf: subj{np(str)} + {cp(żeby2)}
cierpieć: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
cierpieć: imperf: subj{np(str)} + {prepnp(na,acc)}
cierpieć: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,że)}
cierpieć: imperf: subj{np(str)} + {prepnp(za,acc)}
cierpnąć: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',atr)}
cierpnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
cierpnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
cieszyć: imperf: subj{cp(że)} + {np(str)}
cieszyć: imperf: subj{np(str); ncp(str,że)} + {np(str)}
cieszyć: imperf: subj{np(str)} + {np(inst)} + {np(str)}
cieszyć się: imperf: subj{np(str)} + {cp(że)}
cieszyć się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
cieszyć się: imperf: subj{np(str)} + {or}
cieszyć się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
ciskać: imperf: {np(str)} + {cp(że)}
ciskać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
ciskać: imperf: subj{np(str)} + obj{np(inst)} + {np(dat)} + {prepnp(w,acc)}
ciskać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(na,acc)}
ciskać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(o,acc)}
ciskać: imperf: subj{np(str)} + obj{np(inst)} + {xp(adl)}
ciskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
ciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
ciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
ciskać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
ciskać się: imperf: subj{np(str)} + {cp(że)}
ciskać się: imperf: subj{np(str)} + {prepnp(na,acc)}
ciskać się: imperf: subj{np(str)} + {xp(adl)}
cisnąć: imperf: {np(str)} + {xp(locat)}
cisnąć: imperf: subj{cp(żeby)} + {np(str)}
cisnąć: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
cisnąć: imperf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
cisnąć: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
cisnąć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
cisnąć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
cisnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
cisnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
cisnąć: perf: {np(inst)} + {prepnp(o,acc)}
cisnąć: perf: {np(inst)} + {xp(adl)}
cisnąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
cisnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {or}
cisnąć: perf: subj{np(str)} + obj{np(inst)} + {np(dat)} + {prepnp(w,acc)}
cisnąć: perf: subj{np(str)} + obj{np(inst)} + {prepnp(na,acc)}
cisnąć: perf: subj{np(str)} + obj{np(inst)} + {prepnp(o,acc)}
cisnąć: perf: subj{np(str)} + obj{np(inst)} + {xp(adl)}
cisnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
cisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
cisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
cisnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
cisnąć się: imperf: subj{cp(int)} + {np(dat)} + {prepnp(na,acc)}
cisnąć się: imperf: subj{cp(żeby)} + {np(dat)} + {prepnp(na,acc)}
cisnąć się: imperf: subj{cp(że)} + {np(dat)} + {prepnp(na,acc)}
cisnąć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
cisnąć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
cisnąć się: imperf: subj{np(str)} + {xp(adl)}
cisnąć się: imperf: subj{np(str)} + {xp(locat)}
cisnąć się: imperf: subj{or} + {np(dat)} + {prepnp(na,acc)}
cisnąć się: perf: subj{np(str)} + {xp(adl)}
ciułać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
ciułać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
ciułać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
cmokać: imperf: subj{np(str)} + {np(inst)}
cmokać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
cmokać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
cmokać: imperf: subj{np(str)} + {prepnp(na,acc)}
cmokać: imperf: subj{np(str)} + {prepnp(po,loc)} + {refl}
cmokać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
cmokać: imperf: subj{np(str)} + {prepnp(z,gen)}
cmoknąć: perf: subj{np(str)} + {np(inst)}
cmoknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
cmoknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
cmoknąć: perf: subj{np(str)} + {prepnp(na,acc)}
cmoknąć: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
cmoknąć: perf: subj{np(str)} + {prepnp(z,gen)}
cofać: imperf: subj{np(str)} + {np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
cofać: imperf: subj{np(str)} + {np(str)} + {prepnp(przed,inst)}
cofać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
cofać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
cofać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
cofać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
cofać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
cofać się: imperf: subj{np(str)} + {np(dat)}
cofać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
cofać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
cofać się: imperf: subj{np(str)} + {prepncp(przed,inst,żeby)}
cofać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
cofać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
cofać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
cofać się: imperf: subj{np(str)} + {xp(abl)}
cofać się: imperf: subj{np(str)} + {xp(adl)}
cofnąć: perf: subj{np(str)} + {np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
cofnąć: perf: subj{np(str)} + {np(str)} + {prepnp(przed,inst)}
cofnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
cofnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
cofnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
cofnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
cofnąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
cofnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
cofnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
cofnąć się: perf: subj{np(str)} + {prepncp(przed,inst,żeby)}
cofnąć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
cofnąć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
cofnąć się: perf: subj{np(str)} + {prepnp(przed,inst)}
cofnąć się: perf: subj{np(str)} + {xp(abl)}
cofnąć się: perf: subj{np(str)} + {xp(adl)}
cuchnąć: imperf: controller{np(dat)} + controllee{xp(mod)} + {xp(abl)}
cuchnąć: imperf: controller{prepnp(od,gen)} + controllee{xp(mod)}
cuchnąć: imperf: controller{xp(locat)} + controllee{xp(mod)}
cuchnąć: imperf: {np(dat)} + {np(inst)} + {xp(abl)}
cuchnąć: imperf: {np(inst)} + {prepnp(od,gen)}
cuchnąć: imperf: {np(inst)} + {xp(locat)}
cuchnąć: imperf: subj,controller{np(str)} + controllee{xp(mod)}
cuchnąć: imperf: subj{np(str)} + {np(inst)}
cumować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
cumować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
cytować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)} + {or}
cytować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
cywilizować: imperf: subj{np(str)} + obj{np(str)}
cywilizować się: imperf: subj{np(str)}
czaić: imperf: subj{np(str)} + {cp(int)}
czaić: imperf: subj{np(str)} + {cp(że)}
czaić: imperf: subj{np(str)} + {np(str); ncp(str,że)}
czaić się: imperf: subj{np(str)} + {prepnp(do,gen)}
czaić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(locat)}
czaić się: imperf: subj{np(str)} + {prepnp(w,loc)}
czaić się: imperf: subj{np(str)} + {prepnp(za,inst)}
czaić się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
czarować: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
czarować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
czarować się: imperf: subj{np(str)} + {cp(że)}
czarować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
czas: imperf: {infp(_)}
czas: imperf: {np(dat)} + {xp(adl)}
czas: imperf: {prepnp(na,acc)} + {cp(żeby)}
czas: imperf: {prepnp(na,acc); prepncp(na,acc,żeby)}
czatować: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
czatować: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(locat)}
czatować: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(z,inst)}
czatować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
czatować: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
czcić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
czcić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
czcić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
czekać: imperf: subj{np(str)} + {np(gen)}
czekać: imperf: subj{np(str)} + {np(str)}
czekać: imperf: subj{np(str)} + {prepnp(na,acc); cp(aż); cp(int); cp(jak); cp(kiedy); cp(że); cp(żeby); prepncp(na,acc,aż); prepncp(na,acc,int); prepncp(na,acc,jak); prepncp(na,acc,kiedy); prepncp(na,acc,że); prepncp(na,acc,żeby)} + {prepnp(z,inst)} + {xp(dur)}
czekać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(aż)} + {xp(dur)}
czekać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(dur)} + {xp(locat)}
czepiać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
czepiać się: imperf: subj{np(str)} + {np(gen)} + {cp(że)}
czepiać się: imperf: subj{np(str)} + {np(gen); cp(że); ncp(gen,int); ncp(gen,że)}
czepiać się: imperf: subj{np(str)} + {np(gen)} + {np(inst)}
czepiać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
czepiać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
czepiać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
czernić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
czernić się: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
czernieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)} + {xp(locat)}
czernieć: imperf: subj{np(str)} + {xp(mod)}
czernieć: imperf: subj{np(str)} + {xp(temp)}
czerpać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepnp(z,gen); prepncp(z,gen,że)}
czerpać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
czerwienić: imperf: subj{np(str)} + obj{np(str)}
czerwienić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
czerwienić się: imperf: subj{np(str)} + {np(inst)}
czerwienieć: imperf: subj,controller{np(str)} + controllee{xp(mod)}
czerwienieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)} + {xp(locat)}
czerwienieć: imperf: subj{np(str)} + {xp(temp)}
czesać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(inst)} + {refl}
czesać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)} + {np(dat)} + {np(inst)}
czesać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
czesać się: imperf: subj{np(str)} + {prepnp(u,gen)}
czesać się: imperf: subj{np(str)} + {xp(locat)}
częstować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
częstować się: imperf: subj{np(str)} + {np(inst)}
człapać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
człapać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
człapać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
człapać: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(adl)}
człapać: imperf: subj{np(str)} + {prepnp(za,inst)}
człapać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
człapać: imperf: subj{np(str)} + {xp(perl)}
człapać się: imperf: subj{np(str)} + {prepnp(na,loc)}
człapać się: imperf: subj{np(str)} + {prepnp(za,inst)}
człapać się: imperf: subj{np(str)} + {xp(adl)}
człapać się: imperf: subj{np(str)} + {xp(perl)}
czmychnąć: perf: subj{np(str)} + {np(dat)}
czmychnąć: perf: subj{np(str)} + {prepnp(do,gen)}
czmychnąć: perf: subj{np(str)} + {prepnp(od,gen)}
czmychnąć: perf: subj{np(str)} + {prepnp(przed,inst)}
czmychnąć: perf: subj{np(str)} + {xp(abl)}
czmychnąć: perf: subj{np(str)} + {xp(adl)}
czołgać się: imperf: subj{np(str)} + {np(str)}
czołgać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(po,loc)}
czołgać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(locat)} + {xp(mod)} + {xp(perl)}
czuć: imperf: {cp(jak)} + {xp(locat)}
czuć: imperf: {cp(że)} + {xp(locat)}
czuć: imperf: {np(inst)} + {np(str)}
czuć: imperf: {np(inst)} + {prepnp(od,gen)}
czuć: imperf: {np(str)} + {prepnp(od,gen)}
czuć: imperf: {np(str)} + {xp(locat)}
czuć: imperf: subj{np(str)} + {cp(int)}
czuć: imperf: subj{np(str)} + {cp(jakby)}
czuć: imperf: subj{np(str)} + {cp(jak); cp(że)}
czuć: imperf: subj{np(str)} + {cp(jakoby)}
czuć: imperf: subj{np(str)} + {cp(żeby2)}
czuć: imperf: subj{np(str)} + {cp(że)} + {lexnp(inst,sg,'nos',atr)} + {lexnp(str,sg,'pismo',atr)}
czuć: imperf: subj{np(str)} + {np(str); ncp(str,jak); ncp(str,że); ncp(str,żeby2)}
czuć: imperf: subj{np(str)} + {np(str)} + {preplexnp(przez,acc,sg,'skóra',natr)}
czuć: imperf: subj{np(str)} + {np(str)} + {preplexnp(w,loc,pl,'kość',natr)}
czuć: imperf: subj{np(str)} + {np(str)} + {prepnp(na,loc)}
czuć: imperf: subj{np(str)} + {np(str)} + {prepnp(od,gen)}
czuć: imperf: subj{np(str)} + {prepnp(do,gen)} + {lexnp(str,pl,'mięta',natr)}
czuć się: imperf: subj,controller{np(str)} + controllee{adjp(pred)}
czuć się: imperf: subj,controller{np(str)} + controllee{infp(_)} + {preplexnp(na,loc,_,'siła',natr)}
czuć się: imperf: subj,controller{np(str)} + controllee{infp(_)} + {preplexnp(w,loc,sg,'obowiązek',natr)}
czuć się: imperf: subj,controller{np(str)} + controllee{np(inst)}
czuć się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
czuć się: imperf: subj{np(str)} + {cp(żeby)} + {preplexnp(w,loc,sg,'obowiązek',natr)}
czuć się: imperf: subj{np(str)} + {np(gen)} + {preplexnp(w,loc,sg,'obowiązek',natr)}
czulić się: imperf: subj{np(str)} + {prepnp(do,gen)}
czuwać: imperf: subj{np(str)} + {cp(żeby)}
czuwać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,żeby)}
czuwać: imperf: subj{np(str)} + {prepnp(przy,loc)}
czuwać: imperf: subj{np(str)} + {xp(locat)}
czyhać: imperf: subj{np(str)} + {cp(żeby)}
czyhać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
czynić: imperf: subj,controller{np(str)} + controllee{xp(mod)}
czynić: imperf: subj{np(str)} + controller{np(str)} + controllee{adjp(inst)}
czynić: imperf: subj{np(str)} + controller{np(str)} + controllee{np(inst)}
czynić: imperf: subj{np(str)} + obj{lexnp(str,sg,'wrażenie',atr)} + {prepnp(na,loc)}
czynić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
czynić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
czynić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
czynić się: imperf: {advp(misc)}
czynić się: imperf: subj,controller{np(str)} + controllee{adjp(pred)}
czyścić: imperf: {np(str)}
czyścić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
czyścić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
czyścić: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
czyścić się: imperf: subj{np(str)}
czytać: imperf: subj{np(str)} + {cp(żeby)}
czytać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
czytać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
czytać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
czytać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
czytać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
czytać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
czytać: imperf: subj{np(str)} + {prepnp(o,loc)} + {cp(int)}
czytać: imperf: subj{np(str)} + {prepnp(o,loc)} + {cp(że)}
czytać: imperf: subj{np(str)} + {prepnp(o,loc)} + {or}
czytywać: imperf: subj{np(str)} + {cp(że)}
czytywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
czytywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
czytywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
czytywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ćmić: imperf: {np(str)} + {xp(locat)}
ćmić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ćmić się: imperf: {np(dat)} + {xp(locat)}
ćmić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
ćwiczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ćwiczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
ćwiczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
ćwiczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ćwiczyć się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,żeby)}
ćwierkać: imperf: subj{cp(że)} + {np(dat)} + {xp(locat)}
ćwierkać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {xp(mod)}
ćwierkać: imperf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
ćwierkać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); cp(że); prepncp(o,loc,że)}
dać: perf: {infp(_)} + {lexnp(str,sg,'rada',natr)}
dać: perf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'rada',natr)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'czas',atr)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'możliwość',natr)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'okazja',atr)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'prawo',atr)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'rozkaz',natr)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,_,'szansa',atr)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{np(nom)} + {preplexnp(na,acc,sg,'imię',natr)}
dać: perf: subj{np(str)} + controller{np(dat)} + controllee{xp(mod)} + {preplexnp(na,acc,sg,'imię',natr)}
dać: perf: subj{np(str)} + {cp(żeby)} + {lexnp(str,sg,'rada',natr)}
dać: perf: subj{np(str)} + {cp(że)} + {lexnp(str,sg,'głowa',natr)}
dać: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {np(str)}
dać: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {preplexnp(do,gen,sg,'myślenie',natr)}
dać: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {lexnp(str,sg,'słowo',atr)}
dać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {lexnp(str,sg,'słowo',atr)}
dać: perf: subj{np(str)} + {np(str)} + {preplexnp(z,gen,_,'siebie',natr)}
dać: perf: subj{np(str)} + {np(str)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
dać: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
dać: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
dać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
dać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
dać się: perf: {infp(_)}
dać się: perf: subj{np(str)} + {np(dat)}
darować: _: subj{np(str)} + {np(dat)} + {cp(że)}
darować: _: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
darzyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
darzyć się: imperf: {np(dat)} + {advp(misc)}
darzyć się: imperf: {np(dat)} + {prepnp(w,loc)}
darzyć się: imperf: {np(dat)} + {xp(locat)}
darzyć się: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
datować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
datować: imperf: subj{np(str)} + obj{np(str)} + {xp(temp)}
datować się: imperf: subj{np(str)} + {prepnp(na,acc)}
datować się: imperf: subj{np(str)} + {xp(temp)}
dawać: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'rada',natr)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'czas',atr)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'możliwość',natr)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'okazja',natr)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'prawo',natr)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,sg,'rozkaz',natr)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {lexnp(str,_,'szansa',atr)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{np(nom)} + {preplexnp(na,acc,sg,'imię',natr)}
dawać: imperf: subj{np(str)} + controller{np(dat)} + controllee{xp(mod)} + {preplexnp(na,acc,sg,'imię',natr)}
dawać: imperf: subj{np(str)} + {cp(żeby)} + {lexnp(str,sg,'rada',natr)}
dawać: imperf: subj{np(str)} + {cp(że)} + {lexnp(str,sg,'głowa',natr)}
dawać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {np(str)}
dawać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {preplexnp(do,gen,sg,'myślenie',natr)}
dawać: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {lexnp(str,sg,'słowo',atr)}
dawać: imperf: subj{np(str)} + {np(dat)} + {np(part)}
dawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {lexnp(str,sg,'słowo',atr)}
dawać: imperf: subj{np(str)} + {np(str)} + {preplexnp(z,gen,_,'siebie',natr)}
dawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
dawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
dawać się: imperf: {infp(_)}
dawać się: imperf: subj{np(str)} + {np(dat)}
dąć: imperf: subj{np(str)} + {np(inst)}
dąć: imperf: subj{np(str)} + {prepnp(na,loc)}
dąć: imperf: subj{np(str)} + {prepnp(w,acc)}
dąć: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
dąć: imperf: subj{np(str)} + {xp(perl)}
dąć się: imperf: subj{np(str)} + {prepnp(na,acc)}
dąć się: imperf: subj{np(str)} + {prepnp(przed,inst)}
dąć się: imperf: subj{np(str)} + {prepnp(wobec,gen)}
dąsać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
dąsać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
dąsać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
dążyć: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
dążyć: imperf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
dążyć: imperf: subj{np(str)} + {xp(adl)}
dbać: imperf: subj{np(str)} + {prepnp(o,acc); cp(żeby); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
debatować: imperf: subj{np(str)} + {or}
debatować: imperf: subj{np(str)} + {prepnp(nad,inst); prepnp(o,loc); comprepnp(na temat); prepncp(nad,inst,int); prepncp(nad,inst,że); prepncp(nad,inst,żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(z,inst)}
debatować: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
debatować: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
debiutować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(inst)} + {prepnp(przed,inst)} + {xp(locat)}
decydować: imperf: subj{np(str)} + {advp(pron)}
decydować: imperf: subj{np(str)} + {comprepnp(w sprawie)}
decydować: imperf: subj{np(str)} + {cp(int)}
decydować: imperf: subj{np(str)} + {cp(że)}
decydować: imperf: subj{np(str)} + {cp(żeby)}
decydować: imperf: subj{np(str); ncp(str,że)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
decydować: imperf: subj{np(str)} + {or}
decydować: imperf: subj{np(str)} + {prepncp(o,loc,żeby)}
decydować się: imperf: subj,controller{np(str)} + controllee{infp(_)}
decydować się: imperf: subj{np(str)} + {cp(int)}
decydować się: imperf: subj{np(str)} + {cp(że)}
decydować się: imperf: subj{np(str)} + {cp(żeby)}
decydować się: imperf: subj{np(str)} + {or}
decydować się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
dedykować: _: subj{np(str)} + obj{np(str)} + {np(dat); prepnp(dla,gen)}
defilować: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
defilować: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
defilować: imperf: subj{np(str)} + {prepnp(nad,inst)}
defilować: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(przed,inst)} + {advp(misc)}
defilować: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(locat)}
defilować: imperf: subj{np(str)} + {xp(mod)} + {xp(perl)}
definiować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
definiować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
definiować: imperf: subj{np(str)} + obj{cp(int)}
definiować: imperf: subj{np(str)} + obj{cp(że)}
definiować: imperf: subj{np(str)} + obj{np(str)}
definiować: imperf: subj{np(str)} + {or}
deformować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
deformować się: imperf: subj{np(str)} + {prepnp(od,gen)}
degradować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
degradować się: imperf: subj{np(str)} + {prepnp(do,gen)}
deklamować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
deklamować: imperf: subj{np(str)} + {or}
deklamować: imperf: subj{np(str)} + {prepnp(o,loc)}
deklarować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
deklarować: imperf: subj{np(str)} + {np(dat)} + {or}
deklarować: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
deklarować się: imperf: subj,controller{np(str)} + controllee{infp(_)}
deklarować się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
deklarować się: imperf: subj{np(str)} + {cp(int)}
deklarować się: imperf: subj{np(str)} + {cp(że)}
deklarować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
deklarować się: imperf: subj{np(str)} + {preplexnp(po,loc,sg,'strona',ratr)}
deklarować się: imperf: subj{np(str)} + {prepnp(na,acc)}
deklarować się: imperf: subj{np(str)} + {prepnp(o,acc)}
deklarować się: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepnp(za,inst)}
dekorować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
delegować: _: subj{np(str)} + obj{np(str)} + {np(dat)}
delegować: _: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
delegować: _: subj{np(str)} + obj{np(str)} + {xp(adl)}
delektować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
demaskować: imperf: subj{np(str)} + {np(inst)} + {refl}
demaskować: imperf: subj{np(str)} + obj{np(str)} + {or}
demaskować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
demaskować: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
dementować: imperf: subj{np(str)} + {cp(jakoby)} + {xp(mod)}
dementować: imperf: subj{np(str)} + {cp(że); ncp(str,że)} + {xp(mod)}
dementować: imperf: subj{np(str)} + {ncp(str,jakoby)} + {xp(mod)}
dementować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {xp(mod)}
demolować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
demolować się: imperf: subj{np(str)}
demonstrować: imperf: subj{np(str)} + {comprepnp(na rzecz)}
demonstrować: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)}
demonstrować: imperf: subj{np(str)} + obj{cp(int)} + {prepnp(przed,inst)}
demonstrować: imperf: subj{np(str)} + obj{cp(int)} + {prepnp(wobec,gen)}
demonstrować: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
demonstrować: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(przed,inst)}
demonstrować: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(wobec,gen)}
demonstrować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
demonstrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
demonstrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
demonstrować: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
demonstrować: imperf: subj{np(str)} + {prepnp(za,inst)}
demontować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
demontować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
demontować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
demontować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
demontować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
demontować: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
demoralizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
demoralizować się: imperf: subj{np(str)} + {np(inst)}
denerwować: imperf: subj{cp(gdy)} + {np(str)}
denerwować: imperf: subj{cp(jak)} + {np(str)}
denerwować: imperf: subj{cp(jeśli)} + {np(str)}
denerwować: imperf: subj{cp(kiedy)} + {np(str)}
denerwować: imperf: subj{cp(że)} + {np(str)}
denerwować: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(str)}
denerwować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
denerwować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
denerwować się: imperf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
denerwować się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
denerwować się: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
denerwować się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
denerwować się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
deprawować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
deprawować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
deprawować: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
deprawować się: imperf: subj{np(str)} + {prepnp(dla,gen)}
deprawować się: imperf: subj{np(str)} + {xp(locat)}
deptać: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
deptać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
deptać: imperf: subj{np(str)} + {prepnp(koło,gen)}
deptać: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(za,inst)}
deptać: imperf: subj{np(str)} + {prepnp(wokół,gen)}
deptać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
determinować: imperf: subj{np(str)} + {cp(int)}
determinować: imperf: subj{np(str)} + {cp(że)}
determinować: imperf: subj{np(str)} + {cp(żeby)}
determinować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
determinować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
dewastować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
dezorganizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
dezorganizować się: imperf: subj{np(str)}
dławić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dławić się: imperf: subj{np(str)} + {np(inst)} + {or}
dławić się: imperf: subj{np(str)} + {prepnp(od,gen)}
dławić się: imperf: subj{np(str)} + {prepnp(z,gen)}
dłubać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
dłubać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
dłubać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
dłubać: imperf: subj{np(str)} + {prepnp(przy,loc)}
dmuchać: imperf: {np(inst)}
dmuchać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
dmuchać: imperf: subj{np(str)} + obj{np(str)}
dmuchać: imperf: subj{np(str)} + {prepnp(na,acc)}
dmuchać się: imperf: subj{np(str)} + {prepnp(z,inst)}
dmuchnąć: perf: {np(inst)}
dmuchnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)} + {or}
dmuchnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
dmuchnąć: perf: subj{np(str)} + {prepnp(na,acc)}
dmuchnąć: perf: subj{np(str)} + {xp(adl)}
dobić: perf: subj{cp(gdy)} + {np(str)}
dobić: perf: subj{cp(jak)} + {np(str)}
dobić: perf: subj{cp(jeśli)} + {np(str)}
dobić: perf: subj{cp(kiedy)} + {np(str)}
dobić: perf: subj{cp(że)} + {np(str)}
dobić: perf: subj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
dobić: perf: subj{np(str)} + obj{lexnp(gen,sg,'targ',natr)} + {prepnp(z,inst)}
dobić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
dobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
dobić: perf: subj{np(str)} + {prepnp(do,gen)}
dobić się: perf: subj{np(str)} + {np(gen)}
dobiec: perf: subj{cp(jak)} + {np(gen)} + {xp(abl)}
dobiec: perf: subj{cp(jak)} + {prepnp(do,gen)} + {xp(abl)}
dobiec: perf: subj{cp(że)} + {np(gen)} + {xp(abl)}
dobiec: perf: subj{cp(że)} + {prepnp(do,gen)} + {xp(abl)}
dobiec: perf: subj{np(str)} + {np(gen)} + {xp(abl)}
dobiec: perf: subj{np(str)} + {np(str)} + {xp(abl)}
dobiec: perf: subj{np(str)} + {np(str)} + {xp(perl)}
dobiec: perf: subj{np(str); or} + {np(gen)} + {xp(abl)}
dobiec: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
dobiec: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(perl)}
dobiec: perf: subj{np(str)} + {xp(adl)}
dobiec: perf: subj{or} + {np(str)} + {xp(abl)}
dobiec: perf: subj{or} + {prepnp(do,gen)} + {xp(abl)}
dobiegać: imperf: subj{cp(jak)} + {np(gen)} + {xp(abl)}
dobiegać: imperf: subj{cp(jak)} + {prepnp(do,gen)} + {xp(abl)}
dobiegać: imperf: subj{cp(że)} + {np(gen)} + {xp(abl)}
dobiegać: imperf: subj{cp(że)} + {prepnp(do,gen)} + {xp(abl)}
dobiegać: imperf: subj{cp(że)} + {prepnp(do,gen)} + {xp(perl)}
dobiegać: imperf: subj{np(str)} + {np(gen)} + {xp(abl)}
dobiegać: imperf: subj{np(str)} + {np(str)} + {xp(abl)}
dobiegać: imperf: subj{np(str); or} + {np(gen)} + {xp(abl)}
dobiegać: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
dobiegać: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(perl)}
dobiegać: imperf: subj{np(str)} + {xp(adl)}
dobiegać: imperf: subj{or} + {np(str)} + {xp(abl)}
dobiegać: imperf: subj{or} + {prepnp(do,gen)} + {xp(abl)}
dobierać: imperf: subj{np(str)} + obj{np(part)} + {xp(abl)} + {lexnp(dat,_,'siebie',natr)}
dobierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dobierać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dobierać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
dobijać: imperf: subj{cp(gdy)} + {np(str)}
dobijać: imperf: subj{cp(jak)} + {np(str)}
dobijać: imperf: subj{cp(jeśli)} + {np(str)}
dobijać: imperf: subj{cp(kiedy)} + {np(str)}
dobijać: imperf: subj{cp(że)} + {np(str)}
dobijać: imperf: subj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
dobijać: imperf: subj{np(str)} + obj{lexnp(gen,sg,'targ',natr)} + {prepnp(z,inst)}
dobijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
dobijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
dobijać: imperf: subj{np(str)} + {prepnp(do,gen)}
dobijać się: imperf: subj{np(str)} + {np(gen)}
dobijać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
dobrać: perf: subj{np(str)} + obj{np(part)} + {xp(abl)} + {lexnp(dat,_,'siebie',natr)}
dobrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dobrać się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)}
dobrać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dobrać się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
dobrnąć: perf: subj{np(str)} + {prepnp(do,gen)}
dobrnąć: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {xp(perl)}
dobudować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {xp(temp)}
dobudować: perf: subj{np(str)} + obj{np(str)} + {xp(adl)} + {xp(temp)}
dobudować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {xp(temp)}
doceniać: imperf: subj{np(str)} + {cp(int)}
doceniać: imperf: subj{np(str)} + {cp(że)}
doceniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
doceniać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(w,loc)}
doceniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
doceniać: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)} + {refl}
docenić: imperf: subj{np(str)} + {cp(int)}
docenić: imperf: subj{np(str)} + {cp(że)}
docenić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
docenić: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(w,loc)}
docenić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
docenić: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)} + {refl}
dochodzić: imperf: {prepnp(do,gen); prepncp(do,gen,że)}
dochodzić: imperf: subj{cp(że); ncp(str,że)} + {prepnp(do,gen)}
dochodzić: imperf: subj{np(str)} + {cp(int); ncp(gen,int)}
dochodzić: imperf: subj{np(str)} + {cp(że); ncp(gen,że)}
dochodzić: imperf: subj{np(str)} + {np(gen); ncp(gen,żeby)}
dochodzić: imperf: subj{np(str)} + {prepncp(do,gen,int)}
dochodzić: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
dochodzić: imperf: subj{np(str)} + {xp(adl)}
dochować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dochować się: perf: subj{np(str)} + {np(gen)}
dociągnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
dociągnąć: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
dociągnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dociągnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
dociągnąć: perf: subj{np(str)} + {xp(dur)}
dociągnąć się: perf: subj{np(str)} + {np(gen)}
dociągnąć się: perf: subj{np(str)} + {prepnp(do,gen)}
dociągnąć się: perf: subj{np(str)} + {xp(adl)}
dociec: perf: subj{np(str)} + {cp(int)}
dociec: perf: subj{np(str)} + {np(gen); ncp(gen,int)}
dociec: perf: subj{np(str)} + {or}
dociec: perf: subj{np(str)} + {xp(adl)}
dociekać: imperf: subj{np(str)} + {cp(int)}
dociekać: imperf: subj{np(str)} + {np(gen); ncp(gen,int)}
dociekać: imperf: subj{np(str)} + {or}
dociekać: imperf: subj{np(str)} + {xp(adl)}
docierać: imperf: subj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {prepnp(do,gen)}
docierać: imperf: subj{np(str)} + {np(part)}
docierać: imperf: subj{np(str)} + obj{np(str)}
docierać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
docierać się: imperf: subj{np(str)} + {prepnp(z,inst)}
doczekać: perf: subj{np(str)} + {cp(aż)}
doczekać: perf: subj{np(str)} + {np(gen); ncp(gen,że)}
doczekać: perf: subj{np(str)} + {prepnp(do,gen)}
doczekać się: perf: subj{np(str)} + {cp(aż)}
doczekać się: perf: subj{np(str)} + {cp(int)}
doczekać się: perf: subj{np(str)} + {cp(jak)}
doczekać się: perf: subj{np(str)} + {cp(że)}
doczekać się: perf: subj{np(str)} + {cp(żeby)}
doczekać się: perf: subj{np(str)} + {np(gen); ncp(gen,że); ncp(gen,żeby)}
doczekać się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,aż); prepncp(na,acc,że); prepncp(na,acc,żeby)}
doczytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
doczytać się: perf: subj{np(str)} + {cp(że)} + {xp(locat)}
doczytać się: perf: subj{np(str)} + {np(gen)} + {xp(locat)}
dodać: perf: subj{np(str)} + {np(dat)} + {np(gen)}
dodać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
dodać: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); cp(żeby); ncp(str,że)} + {prepnp(do,gen)}
dodać: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
dodawać: imperf: subj{np(str)} + {np(dat)} + {np(gen)}
dodawać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
dodawać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); cp(żeby); ncp(str,że)} + {prepnp(do,gen)}
dodawać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
dodzwonić się: perf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w sprawie)}
dodzwonić się: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
dodzwonić się: perf: subj{np(str)} + {prepnp(po,acc)}
dodzwonić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
dofinansować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
dofinansować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
dogadać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
dogadać: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
dogadać: perf: subj{np(str)} + {np(dat)} + {or}
dogadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
dogadać się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
dogadać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
dogadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
dogadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
dogadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
dogadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
dogadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
dogadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
dogadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
dogadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {prepadjp(po,postp)}
dogadywać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
dogadywać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
dogadywać: imperf: subj{np(str)} + {np(dat)} + {or}
dogadywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
dogadywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)}
dogadywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
dogadywać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
dogadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
dogadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
dogadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
dogadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
dogadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
dogadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
dogadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
dogadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepadjp(po,postp)}
doganiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
doganiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
doganiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
doganiać się: imperf: subj{np(str)} + {prepnp(z,inst)}
doglądać: imperf: subj{np(str)} + {cp(int)}
doglądać: imperf: subj{np(str)} + {cp(jak)}
doglądać: imperf: subj{np(str)} + obj{np(gen)}
dogonić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
dogonić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
dogonić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dogorywać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
dogorywać: imperf: subj{np(str)} + {prepnp(na,acc)}
dogorywać: imperf: subj{np(str)} + {prepnp(nad,inst)}
dogorywać: imperf: subj{np(str)} + {xp(mod)}
dograć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
dograć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
dograć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
dograć się: perf: subj{np(str)} + {prepnp(z,inst)}
doić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
doić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
doić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
doić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
doić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
doić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
doić: imperf: subj{np(str)} + {prepnp(w,acc)}
doić: imperf: subj{np(str)} + {xp(adl)}
doić: imperf: subj{np(str)} + {xp(locat)}
dojechać: perf: subj{np(str)} + {np(dat)}
dojechać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
dojechać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
dojechać: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
dojechać: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
dojechać: perf: subj{np(str)} + obj{np(str)}
dojechać: perf: subj{np(str)} + {prepnp(na,loc)}
dojeżdżać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
dojeżdżać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
dojeżdżać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
dojeżdżać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
dojeżdżać: imperf: subj{np(str)} + {prepnp(na,loc)}
dojrzeć: perf: subj{np(str)} + {cp(int)}
dojrzeć: perf: subj{np(str)} + {cp(jak)}
dojrzeć: perf: subj{np(str)} + {cp(że)}
dojrzeć: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
dojrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dojrzeć: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dojrzeć: perf: subj{np(str)} + {prepnp(w,loc)}
dojrzewać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
dojrzewać: imperf: subj{np(str)} + {prepncp(do,gen,int)}
dojrzewać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dojść: perf: {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dojść: perf: subj{cp(int)} + {prepnp(do,gen)}
dojść: perf: subj{cp(że)} + {prepnp(do,gen)}
dojść: perf: subj{np(str)} + {cp(int)}
dojść: perf: subj{np(str)} + {cp(że)}
dojść: perf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)}
dojść: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że)}
dojść: perf: subj{np(str)} + {prepnp(z,inst)} + {preplexnp(do,gen,sg,'ład',natr)}
dojść: perf: subj{np(str)} + {xp(adl)}
dokarmiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(mod)}
dokładać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
dokładać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
dokładać: imperf: subj{np(str)} + {np(gen)} + {cp(żeby)}
dokładać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
dokładać się: imperf: subj{np(str); ncp(str,że)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dokonać: perf: subj{np(str)} + obj{np(gen)} + {np(inst)}
dokonać się: perf: subj{np(str)} + {xp(locat)} + {xp(temp)}
dokonywać: imperf: subj{np(str)} + obj{np(gen)} + {np(inst)}
dokonywać się: perf: subj{np(str)} + {xp(locat)} + {xp(temp)}
dokończyć: perf: subj,controller{np(str)} + controllee{infp(imperf)}
dokończyć: perf: subj{np(str)} + {cp(że)}
dokończyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
dokończyć: perf: subj{np(str)} + obj{np(str)} + {or}
dokopać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
dokopać: perf: subj{np(str)} + {np(dat)} + {or}
dokopać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
dokopać się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że)}
doktoryzować się: imperf: subj{np(str)} + {prepnp(z,gen)} + {xp(locat)}
dokuczać: imperf: subj{np(str); ncp(str,że)} + {np(dat)}
dokuczać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
dokuczać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
dokuczać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
dokuczać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
dokuczyć: perf: subj{np(str); ncp(str,że)} + {np(dat)}
dokuczyć: perf: subj{np(str)} + {np(dat)} + {comprepnp(z powodu)}
dokuczyć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
dokuczyć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
dokuczyć: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
dokuczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
dokumentować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
dokumentować: imperf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
dokupić: perf: subj{np(str)} + {np(dat)} + {np(part)}
dokupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(do,gen)}
dokupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(od,gen)}
dokupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(u,gen)}
dokupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(za,acc)}
dokupić: perf: subj{np(str)} + obj{np(part)} + {xp(locat)}
dolać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
dolatywać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dolatywać: imperf: subj{np(str)} + {np(str)} + {xp(abl)} + {xp(perl)}
dolatywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
dolecieć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dolecieć: perf: subj{np(str)} + {np(str)} + {xp(abl)} + {xp(perl)}
dolecieć: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
dolegać: imperf: subj{np(str)} + {np(dat)}
dolewać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
doliczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
doliczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
doliczać się: imperf: subj{np(str)} + {cp(int)}
doliczać się: imperf: subj{np(str)} + {cp(że)}
doliczać się: imperf: subj{np(str)} + {np(gen)}
doliczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
doliczyć: perf: subj{np(str)} + {prepnp(do,gen)}
doliczyć się: perf: subj{np(str)} + {np(gen)}
dołączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
dołączać się: imperf: subj{np(str)} + {prepnp(do,gen)}
dołączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
dołączyć się: perf: subj{np(str)} + {prepnp(do,gen)}
dołożyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
dołożyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
dołożyć: perf: subj{np(str)} + {np(gen)} + {cp(żeby)}
dołożyć: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
dołożyć się: perf: subj{np(str); ncp(str,że)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
domagać się: imperf: subj{np(str)} + {np(gen); cp(żeby); ncp(gen,żeby)} + {prepnp(od,gen)}
dominować: imperf: subj{np(str)} + {np(inst)} + {prepnp(nad,inst)}
dominować: imperf: subj{np(str)} + {prepnp(u,gen)}
dominować: imperf: subj{np(str)} + {prepnp(w,loc)}
dominować: perf: subj{np(str)} + obj{np(str)}
domyślać się: imperf: subj{np(str)} + {cp(żeby)}
domyślać się: imperf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
domyślać się: imperf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)} + {prepnp(z,gen)}
domyślać się: imperf: subj{np(str)} + {or}
domyślać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
domyślać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {cp(że)}
domyślać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(int)}
domyślać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
domyślić się: perf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
domyślić się: perf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)} + {prepnp(z,gen)}
domyślić się: perf: subj{np(str)} + {or}
domyślić się: perf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
domyślić się: perf: subj{np(str)} + {prepnp(po,loc)} + {cp(że)}
domyślić się: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(int)}
domyślić się: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
donieść: perf: subj{np(str)} + {np(dat)} + {cp(int)}
donieść: perf: subj{np(str)} + {np(dat)} + {cp(jakoby)}
donieść: perf: subj{np(str)} + {np(dat)} + {or}
donieść: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
donieść: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
donieść: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,loc)} + {xp(adl)}
donieść: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(w,loc)} + {xp(adl)}
donieść: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
donieść: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(jakoby)}
donieść: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(że)}
donieść: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
donieść się: perf: subj{cp(że)} + {prepnp(do,gen)}
donieść się: perf: subj{np(str)} + {xp(adl)}
donosić: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
donosić: imperf: subj{np(str)} + {np(dat)} + {cp(jakoby)}
donosić: imperf: subj{np(str)} + {np(dat)} + {or}
donosić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
donosić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
donosić: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,loc)} + {xp(adl)}
donosić: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(w,loc)} + {xp(adl)}
donosić: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
donosić: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(jakoby)}
donosić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(że)}
donosić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
donosić: perf: subj{np(str)} + obj{np(str)}
donosić się: imperf: subj{np(str)} + {xp(abl)}
dookreślać: imperf: subj{np(str)} + {cp(że)}
dookreślać: imperf: subj{np(str)} + {np(inst)} + {cp(jak)}
dookreślać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
dookreślać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
dookreślać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dookreślać: imperf: subj{np(str)} + {prepnp(wobec,gen)} + {refl}
dookreślić: perf: subj{np(str)} + {cp(int)} + {refl}
dookreślić: perf: subj{np(str)} + {cp(że)}
dookreślić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
dookreślić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
dookreślić: perf: subj{np(str)} + obj{cp(int)} + {np(inst)}
dookreślić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
dookreślić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dopadać: perf: {np(gen)}
dopadać: perf: subj{np(str)} + {np(gen)}
dopadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
dopadać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
dopadać: perf: subj{np(str)} + {prepnp(do,gen)}
dopadać się: perf: subj{np(str)} + {prepnp(do,gen)}
dopasować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dopasować się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dopasowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dopasowywać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dopaść: perf: subj{np(str)} + {np(gen)}
dopaść: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
dopaść: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
dopaść: perf: subj{np(str)} + {prepnp(do,gen)}
dopaść się: perf: subj{np(str)} + {prepnp(do,gen)}
dopatrywać: imperf: subj{np(str)} + {cp(int)}
dopatrywać: imperf: subj{np(str)} + {cp(że)}
dopatrywać: imperf: subj{np(str)} + {cp(żeby)}
dopatrywać: imperf: subj{np(str)} + {np(gen)}
dopatrywać się: imperf: subj{np(str)} + {np(gen); ncp(gen,że); ncp(gen,żeby2)} + {prepnp(w,loc); prepncp(w,loc,że)}
dopatrywać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(u,gen)}
dopatrywać się: imperf: subj{np(str)} + {prepnp(w,loc)} + {cp(int)}
dopatrywać się: imperf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
dopatrywać się: imperf: subj{np(str)} + {prepnp(w,loc)} + {cp(żeby2)}
dopatrzyć: perf: subj{np(str)} + {cp(int)}
dopatrzyć: perf: subj{np(str)} + {cp(że)}
dopatrzyć: perf: subj{np(str)} + {cp(żeby)}
dopatrzyć: perf: subj{np(str)} + {np(gen)}
dopatrzyć się: perf: subj{np(str)} + {np(gen); ncp(gen,że); ncp(gen,żeby2)} + {prepnp(w,loc); prepncp(w,loc,że)}
dopatrzyć się: perf: subj{np(str)} + {np(gen)} + {prepnp(u,gen)}
dopatrzyć się: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(int)}
dopatrzyć się: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
dopatrzyć się: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(żeby2)}
dopełniać: imperf: subj{np(str)} + obj{np(gen)} + {np(inst)}
dopełniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
dopełniać się: imperf: subj{np(str)}
dopełnić: perf: subj{np(str)} + obj{np(gen)} + {np(inst)}
dopełnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
dopełnić się: perf: subj{np(str)}
dopiąć: perf: subj{np(str)} + {np(gen)}
dopiąć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'ostatni guzik',natr)}
dopiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
dopiąć: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
dopiąć się: perf: subj{np(str)} + {np(inst)}
dopiąć się: perf: subj{np(str)} + {prepnp(do,gen)}
dopiąć się: perf: subj{np(str)} + {prepnp(w,loc)}
dopilnować: perf: subj{np(str)} + obj{np(gen)} + {cp(int); cp(żeby)}
dopilnować: perf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,że); ncp(gen,żeby)}
dopinać: imperf: subj{np(str)} + {lexnp(gen,sg,'cel',natr)}
dopinać: imperf: subj{np(str)} + {lexnp(gen,sg,'swój',natr)}
dopinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dopinać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'guzik',atr)}
dopinać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
dopinać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
dopingować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
dopingować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dopisać: perf: subj{np(str)} + {cp(int)} + {xp(locat)}
dopisać: perf: subj{np(str)} + {cp(żeby)} + {xp(locat)}
dopisać: perf: subj{np(str)} + obj{cp(że)} + {prepnp(do,gen)}
dopisać: perf: subj{np(str)} + obj{cp(że)} + {xp(locat)}
dopisać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(do,gen)}
dopisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
dopisać: perf: subj{np(str)} + obj{or} + {prepnp(do,gen)}
dopisać: perf: subj{np(str)} + obj{or} + {xp(locat)}
dopisać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
dopisać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
dopisać się: perf: subj{np(str)} + {prepnp(do,gen)}
dopisywać: imperf: subj{np(str)} + {cp(int)} + {xp(locat)}
dopisywać: imperf: subj{np(str)} + {cp(żeby)} + {xp(locat)}
dopisywać: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(do,gen)}
dopisywać: imperf: subj{np(str)} + obj{cp(że)} + {xp(locat)}
dopisywać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(do,gen)}
dopisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
dopisywać: imperf: subj{np(str)} + obj{or} + {prepnp(do,gen)}
dopisywać: imperf: subj{np(str)} + obj{or} + {xp(locat)}
dopisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
dopisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
dopisywać się: imperf: subj{np(str)} + {prepnp(do,gen)}
dopłacać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {prepnp(z,gen)}
dopłacać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)} + {prepnp(z,gen)}
dopłacać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
dopłacić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {prepnp(z,gen)}
dopłacić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)} + {prepnp(z,gen)}
dopłacić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
dopłynąć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dopłynąć: perf: subj{np(str)} + {prepnp(na,loc)} + {xp(adl)}
dopłynąć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dopływać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dopływać: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(adl)}
dopływać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dopominać się: imperf: subj{np(str)} + {cp(żeby)}
dopominać się: imperf: subj{np(str)} + {np(gen); ncp(gen,żeby)}
dopominać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
dopomóc: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {np(inst)}
dopomóc: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
dopomóc: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
dopomóc: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przy,loc)}
dopomóc: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc); prepncp(w,loc,żeby)}
dopowiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {or}
dopowiadać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {prepnp(do,gen)}
dopowiadać: imperf: subj{np(str)} + obj{cp(żeby)} + {np(dat)} + {prepnp(do,gen)}
dopowiadać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {prepnp(do,gen)}
dopowiadać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {prepnp(do,gen)}
dopowiedzieć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {or}
dopowiedzieć: perf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {prepnp(do,gen)}
dopowiedzieć: perf: subj{np(str)} + obj{cp(żeby)} + {np(dat)} + {prepnp(do,gen)}
dopowiedzieć: perf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {prepnp(do,gen)}
dopowiedzieć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {prepnp(do,gen)}
dopracować: perf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'wzgląd',ratr)}
dopracować się: perf: subj{np(str)} + {np(gen)}
doprawić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)} + {np(inst)}
doprawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
doprawić się: perf: subj{np(str)} + {np(inst)}
doprosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
doprosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
doprosić się: perf: subj{np(str)} + {np(gen); ncp(gen,żeby)} + {prepnp(u,gen)}
doprosić się: perf: subj{np(str)} + {np(str)} + {cp(żeby)}
doprosić się: perf: subj{np(str)} + {np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
doprosić się: perf: subj{np(str)} + {prepnp(u,gen)} + {cp(żeby)}
doprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
doprowadzać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
doprowadzać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
doprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
doprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
doprowadzić: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
dopuszczać: imperf: subj{np(str)} + {cp(żeby)}
dopuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
dopuszczać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dopuszczać się: imperf: subj{np(str)} + {np(gen); ncp(gen,że)}
dopuścić: perf: subj{np(str)} + {cp(żeby)}
dopuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
dopuścić: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dopuścić się: perf: subj{np(str)} + {np(gen); ncp(gen,że)}
dopytać: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
dopytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
dopytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
dopytać: perf: subj{np(str)} + {or}
dopytać: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(u,gen)}
dopytać: perf: subj{np(str)} + {prepnp(u,gen)} + {cp(int)}
dopytać się: perf: subj{np(str)} + {np(gen)} + {prepnp(u,gen)}
dopytać się: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
dopytać się: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
dopytać się: perf: subj{np(str)} + {or}
dopytać się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(u,gen)}
dopytać się: perf: subj{np(str)} + {prepnp(u,gen)} + {comprepnp(na temat)}
dopytać się: perf: subj{np(str)} + {prepnp(u,gen)} + {cp(int)}
dopytać się: perf: subj{np(str)} + {prepnp(u,gen)} + {cp(że)}
dopytywać: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
dopytywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
dopytywać: imperf: subj{np(str)} + {or}
dopytywać się: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
dopytywać się: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
dopytywać się: imperf: subj{np(str)} + {or}
dorabiać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen)}
dorabiać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
dorabiać się: imperf: subj{np(str)} + {np(gen); ncp(gen,że)} + {np(inst); ncp(inst,że)}
dorabiać się: imperf: subj{np(str)} + {np(gen); ncp(gen,że)} + {prepnp(na,loc); prepncp(na,loc,że)}
doradzać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
doradzać: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
doradzać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
doradzać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
doradzać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
doradzać: imperf: subj{np(str)} + {np(dat)} + {or}
doradzać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
doradzać: imperf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(dat)}
doradzić: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
doradzić: perf: subj{np(str)} + {np(dat)} + {advp(misc)}
doradzić: perf: subj{np(str)} + {np(dat)} + {cp(int)}
doradzić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
doradzić: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
doradzić: perf: subj{np(str)} + {np(dat)} + {or}
doradzić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
doradzić: perf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(dat)}
dorastać: imperf: subj{np(str)} + {cp(żeby)}
dorastać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,pl,'pięta',natr)}
dorastać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {advp(misc)}
dorastać: imperf: subj{np(str)} + {prepnp(w,loc)}
dorastać: imperf: subj{np(str)} + {xp(locat)}
doręczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
doręczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(do,gen,pl,'ręka',batr)}
doręczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
doręczać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
doręczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
doręczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(do,gen,pl,'ręka',batr)}
doręczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
doręczyć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
dorobić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen)}
dorobić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
dorobić się: perf: subj{np(str)} + {np(gen); ncp(gen,że)} + {np(inst); ncp(inst,że)}
dorobić się: perf: subj{np(str)} + {np(gen); ncp(gen,że)} + {prepnp(na,loc); prepncp(na,loc,że)}
dorosnąć: perf: subj{np(str)} + {cp(żeby)}
dorosnąć: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,pl,'pięta',natr)}
dorosnąć: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {advp(misc)}
dorosnąć: perf: subj{np(str)} + {prepnp(w,loc)}
dorosnąć: perf: subj{np(str)} + {xp(locat)}
dorównać: perf: subj{np(str)} + {np(dat)} + {np(inst)}
dorównać: perf: subj{np(str)} + {np(dat)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
dorównać: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
dorównywać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
dorównywać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
dorównywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
dorwać: perf: subj{np(str)} + obj{np(gen)} + {prepnp(do,gen)}
dorwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
dorwać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
dorwać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dorwać się: perf: subj{np(str)} + {np(gen)}
dorzucać: imperf: subj{np(str)} + obj{np(inst)} + {xp(adl)}
dorzucać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
dorzucać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,acc)}
dorzucać: imperf: subj{np(str)} + obj{np(part)} + {xp(adl)}
dorzucać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(do,gen)}
dorzucać: imperf: subj{np(str)} + {or}
dorzucać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
dorzucać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
dorzucać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
dorzucać się: imperf: subj{np(str)} + {prepnp(do,gen)}
dorzucać się: imperf: subj{np(str)} + {prepnp(na,acc)}
dorzucić: perf: subj{np(str)} + obj{np(inst)} + {xp(adl)}
dorzucić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
dorzucić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,acc)}
dorzucić: perf: subj{np(str)} + obj{np(part)} + {xp(adl)}
dorzucić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(do,gen)}
dorzucić: perf: subj{np(str)} + {or}
dorzucić: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
dorzucić: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
dorzucić: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
dorzucić się: perf: subj{np(str)} + {prepnp(do,gen)}
dorzucić się: perf: subj{np(str)} + {prepnp(na,acc)}
dosiadać: imperf: subj{np(str)} + obj{np(gen)}
dosiadać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dosiadać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
dosiąść: perf: subj{np(str)} + {np(gen)}
dosiąść się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dosiąść się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
dosięgnąć: perf: subj{np(str)} + {np(gen)}
dosięgnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
dosięgnąć: perf: subj{np(str)} + {np(str)} + {or}
dosięgnąć: perf: subj{np(str)} + obj{np(gen)} + {np(inst)}
dosięgnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
doskoczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
doskoczyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
doskoczyć: perf: subj{np(str)} + {prepnp(na,acc)}
doskoczyć: perf: subj{np(str)} + {xp(adl)}
doskonalić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
doskonalić się: imperf: subj{np(str)} + {prepnp(w,loc)}
doskwierać: imperf: subj{cp(że)} + {np(dat)}
doskwierać: imperf: subj{np(str); ncp(str,że)} + {np(dat)}
dosłuchać: perf: subj{np(str)} + obj{np(str)}
dosłuchać się: perf: subj{np(str)} + {np(gen)} + {prepnp(w,loc)}
dosłuchiwać: imperf: subj{np(str)} + obj{np(gen)}
dosłuchiwać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(w,loc)}
dosłyszeć: perf: subj{np(str)} + {cp(int)}
dosłyszeć: perf: subj{np(str)} + {cp(jak)}
dosłyszeć: perf: subj{np(str)} + {cp(że)}
dosłyszeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dosłyszeć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
dostać: perf: subj,controller{np(str)} + controllee{infp(_)}
dostać: perf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'nakaz',natr)}
dostać: perf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'polecenie',natr)}
dostać: perf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'rozkaz',natr)}
dostać: perf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'szansa',natr)}
dostać: perf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'zadanie',natr)}
dostać: perf: subj{np(str)} + {np(gen)}
dostać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
dostać: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
dostać: perf: subj{np(str)} + {np(part)} + {prepnp(od,gen)}
dostać: perf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
dostać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dostać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
dostarczać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(adl)}
dostarczyć: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(adl)}
dostawać: imperf: subj,controller{np(str)} + controllee{infp(_)}
dostawać: imperf: subj{np(str)} + {np(gen)}
dostawać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
dostawać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
dostawać: imperf: subj{np(str)} + {np(part)} + {prepnp(od,gen)}
dostawać: imperf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
dostawać: imperf: subj{np(str)} + {prepnp(od,gen)} + {prepnp(w,acc)}
dostawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dostawać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
dostawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dostawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
dostąpić: perf: subj{np(str)} + {np(gen); ncp(gen,że)}
dostąpić: perf: subj{np(str)} + {prepnp(do,gen)}
dostępować: imperf: subj{np(str)} + {np(gen); ncp(gen,że)}
dostępować: imperf: subj{np(str)} + {prepnp(do,gen)}
dostosować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dostosować: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
dostosować się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dostosowywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dostosowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
dostosowywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dostrajać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
dostrajać się: imperf: subj{np(str)} + {prepnp(do,gen)}
dostroić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
dostroić się: perf: subj{np(str)} + {prepnp(do,gen)}
dostrzec: perf: subj{np(str)} + {cp(jak)}
dostrzec: perf: subj{np(str)} + {cp(żeby2)}
dostrzec: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)}
dostrzec: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dostrzegać: imperf: subj{np(str)} + {cp(jak)}
dostrzegać: imperf: subj{np(str)} + {cp(żeby2)}
dostrzegać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)}
dostrzegać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
doszukać się: perf: subj{np(str)} + {cp(int)}
doszukać się: perf: subj{np(str)} + {np(gen); ncp(gen,że)} + {prepnp(w,loc); prepncp(w,loc,że)}
doszukać się: perf: subj{np(str)} + {np(gen)} + {xp(locat)}
doszukać się: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
doszukiwać się: imperf: subj{np(str)} + {cp(int)}
doszukiwać się: imperf: subj{np(str)} + {cp(że)}
doszukiwać się: imperf: subj{np(str)} + {np(gen); ncp(gen,że)} + {prepnp(w,loc); prepncp(w,loc,że)}
doszukiwać się: imperf: subj{np(str)} + {np(gen)} + {xp(locat)}
dośrodkować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
dośrodkować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
dośrodkować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
doświadczać: imperf: subj{np(str)} + {cp(int)}
doświadczać: imperf: subj{np(str)} + {cp(że)}
doświadczać: imperf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,że)} + {np(inst)}
doświadczyć: perf: subj{np(str)} + {cp(int)}
doświadczyć: perf: subj{np(str)} + {cp(że)}
doświadczyć: perf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,że)} + {np(inst)}
dotknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
dotknąć: perf: subj{np(str)} + obj{np(gen)}
dotknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
dotknąć się: perf: subj{np(str)} + {np(gen)}
dotknąć się: perf: subj{np(str)} + {prepnp(do,gen)}
dotrwać: perf: subj{np(str)} + {cp(aż)}
dotrwać: perf: subj{np(str)} + {np(gen)}
dotrwać: perf: subj{np(str)} + {prepnp(do,gen)}
dotrzeć: perf: subj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {prepnp(do,gen)}
dotrzeć: perf: subj{np(str)} + {np(part)}
dotrzeć: perf: subj{np(str)} + obj{np(str)}
dotrzeć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
dotrzeć się: perf: subj{np(str)} + {prepnp(z,inst)}
dotrzymać: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'koło',natr)}
dotrzymać: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'pole',natr)}
dotrzymać: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'tempo',natr)}
dotrzymać: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'towarzystwo',natr)}
dotrzymać: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'wierność',natr)}
dotrzymać: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {lexnp(gen,sg,'krok',natr)}
dotrzymać: perf: subj{np(str)} + obj{np(gen)}
dotrzymać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dotrzymywać: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'koło',natr)}
dotrzymywać: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'pole',natr)}
dotrzymywać: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'tempo',natr)}
dotrzymywać: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'towarzystwo',natr)}
dotrzymywać: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'wierność',natr)}
dotrzymywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {lexnp(gen,sg,'krok',natr)}
dotrzymywać: imperf: subj{np(str)} + obj{np(gen)}
dotrzymywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
dotyczyć: imperf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że); ncp(gen,żeby)}
dotykać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
dotykać: imperf: subj{np(str)} + obj{np(gen)} + {np(inst)}
dotykać: imperf: subj{np(str)} + obj{np(str)}
dotykać się: imperf: subj{np(str)} + {np(gen)}
dotykać się: imperf: subj{np(str)} + {prepnp(do,gen)}
dowiadywać się: imperf: subj{np(str)} + {np(gen); prepnp(o,loc); cp(int); cp(że); ncp(gen,int); ncp(gen,że); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(od,gen); prepnp(u,gen); prepnp(z,gen)}
dowiadywać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(o,loc)} + {prepnp(od,gen)}
dowiadywać się: imperf: subj{np(str)} + {or}
dowiadywać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(u,gen)}
dowiedzieć się: perf: subj{np(str)} + {np(gen); prepnp(o,loc); cp(int); cp(że); ncp(gen,int); ncp(gen,że); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(od,gen); prepnp(u,gen); prepnp(z,gen)}
dowiedzieć się: perf: subj{np(str)} + {np(gen)} + {prepnp(o,loc)} + {prepnp(od,gen)}
dowiedzieć się: perf: subj{np(str)} + {or}
dowiedzieć się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(u,gen)}
dowierzać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
dowierzać: imperf: subj{np(str)} + {np(dat); ncp(dat,że)}
dowieść: perf: subj{np(str); ncp(str,że)} + obj{np(gen); ncp(gen,że)} + {np(dat)} + {np(inst)}
dowieść: perf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
dowieźć: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dowieźć: perf: subj{np(str)} + obj{np(part)} + {np(inst)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
dowlec: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dowlec się: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(adl)}
dowlec się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dowodzić: imperf: subj{ncp(str,że)} + obj{cp(że)}
dowodzić: imperf: subj{np(str); ncp(str,że)} + obj{np(gen); ncp(gen,że)} + {np(dat)} + {np(inst)}
dowodzić: imperf: subj{np(str)} + {np(dat)} + {or}
dowodzić: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
dowodzić: imperf: subj{np(str)} + obj{np(inst)}
dowozić: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dowozić: imperf: subj{np(str)} + obj{np(part)} + {np(inst)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
doznać: perf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,że)}
doznawać: imperf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,że)}
dozwolić: perf: subj{np(str)} + obj,controllee{prepnp(na,acc); cp(żeby); infp(_)} + controller{np(dat)}
dozwolić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
dożyć: perf: subj{np(str)} + {np(gen); ncp(gen,że); ncp(gen,żeby)}
dożyć: perf: subj{np(str)} + {np(str)}
dożyć: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
dożywać: imperf: subj{np(str)} + {np(gen); ncp(gen,że); ncp(gen,żeby)}
dożywać: imperf: subj{np(str)} + {np(str)}
dożywać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
drapać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
drapać: imperf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
drapać: imperf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
drapać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
drapać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
drażnić: imperf: subj{cp(kiedy)} + {np(str)}
drażnić: imperf: subj{cp(że)} + {np(str)}
drażnić: imperf: subj{ncp(str,kiedy)} + {np(str)}
drażnić: imperf: subj{np(str); ncp(str,że)} + {np(str)}
drażnić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
drażnić się: imperf: subj{np(str)} + {prepnp(z,inst)}
drążyć: imperf: subj{np(str)} + {cp(int)}
drążyć: imperf: subj{np(str)} + {cp(że)}
drążyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
drążyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
dreptać: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
dreptać: imperf: subj{np(str)} + {np(inst)}
dreptać: imperf: subj{np(str)} + {prepnp(koło,gen); prepncp(koło,gen,żeby)}
dreptać: imperf: subj{np(str)} + {prepnp(wokół,gen); prepncp(wokół,gen,żeby)}
dreptać: imperf: subj{np(str)} + {prepnp(za,inst)}
dreptać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
dreptać: imperf: subj{np(str)} + {xp(locat)}
dręczyć: imperf: subj{np(str)} + {cp(że)} + {refl}
dręczyć: imperf: subj{np(str)} + {ncp(inst,że)} + {refl}
dręczyć: imperf: subj{np(str)} + {np(inst)} + {refl}
dręczyć: imperf: subj{np(str)} + {np(str)} + {cp(że)}
dręczyć: imperf: subj{np(str)} + {np(str)} + {prepnp(o,acc)}
dręczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
drętwieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
drętwieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
drętwieć: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'myśl',atr)}
drętwieć: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'widok',atr)}
drgać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
drgać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
drgać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
drgać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
drgać: imperf: subj{np(str)} + {np(inst)}
drgnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
drgnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
drgnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
drgnąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
drgnąć: perf: subj{np(str)} + {np(inst)}
drobić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
drobić: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
drobić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
drobić: imperf: subj{np(str)} + {prepnp(za,inst)}
drobić: imperf: subj{np(str)} + {xp(perl)}
drożeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)} + {prepnp(z,gen)}
drukować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
drukować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
drukować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
drwić: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
drwić: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
drwić: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
dryfować: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
dryfować: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(locat)}
dryfować: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(perl)}
dryfować: imperf: subj{np(str)} + {prepnp(w,loc)} + {xp(abl)} + {xp(adl)}
dryfować: imperf: subj{np(str)} + {prepnp(w,loc)} + {xp(locat)}
dryfować: imperf: subj{np(str)} + {prepnp(w,loc)} + {xp(perl)}
dryfować: imperf: subj{np(str)} + {prepnp(z,inst)}
drzeć: imperf: subj{np(str)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,pl,'włos',natr)} + {preplexnp(z,gen,sg,'głowa',natr)}
drzeć: imperf: subj{np(str)} + {np(str)} + {cp(że)}
drzeć: imperf: subj{np(str)} + {np(str)} + {cp(żeby)}
drzeć: imperf: subj{np(str)} + {np(str)} + {prepncp(o,acc,że)}
drzeć: imperf: subj{np(str)} + {np(str)} + {prepnp(do,gen)} + {or}
drzeć: imperf: subj{np(str)} + {np(str)} + {prepnp(na,acc)} + {or}
drzeć: imperf: subj{np(str)} + {np(str)} + {prepnp(o,acc)}
drzeć: imperf: subj{np(str)} + {np(str)} + {prepnp(przeciw,dat)}
drzeć: imperf: subj{np(str)} + {np(str)} + {prepnp(za,acc)}
drzeć: imperf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
drzeć: imperf: subj{np(str)} + {np(str)} + {xp(locat)}
drzeć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
drzeć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
drzeć: imperf: subj{np(str)} + {prepnp(z,inst)} + {lexnp(str,pl,'kot',natr)}
drzeć: imperf: subj{np(str)} + {xp(adl)}
drzeć się: imperf: subj{np(str)} + {prepncp(o,acc,że)}
drzeć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że); cp(żeby)}
drzeć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
drzeć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
drzeć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
drzeć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc)} + {or}
drzeć się: imperf: subj{np(str)} + {prepnp(z,inst)}
drzeć się: imperf: subj{np(str)} + {xp(adl)}
drzemać: imperf: subj{np(str)} + {prepnp(nad,inst)}
drzemać: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(u,gen)}
drzemać: imperf: subj{np(str)} + {prepnp(w,loc)}
drzemać: imperf: subj{np(str)} + {xp(locat)}
drżeć: imperf: subj{np(str)} + {cp(czy)}
drżeć: imperf: subj{np(str)} + {cp(że)}
drżeć: imperf: subj{np(str)} + {cp(żeby)}
drżeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
drżeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
drżeć: imperf: subj{np(str)} + {or}
drżeć: imperf: subj{np(str)} + {preplexnp(w,loc,pl,'posada',natr)}
drżeć: imperf: subj{np(str)} + {prepncp(przed,inst,żeby)}
drżeć: imperf: subj{np(str)} + {prepnp(do,gen)}
drżeć: imperf: subj{np(str)} + {prepnp(nad,inst)}
drżeć: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
drżeć: imperf: subj{np(str)} + {prepnp(przed,inst)}
dublować: imperf: subj{np(str)} + obj{np(str)}
dublować się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int)}
dudnić: imperf: {np(dat)} + {prepnp(w,loc)}
dudnić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
dudnić: imperf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
dudnić: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
dudnić: imperf: subj{np(str)} + {np(dat)} + {xp(locat)} + {xp(mod)}
dudnić: imperf: subj{or} + {np(dat)} + {prepnp(w,loc)}
dukać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
dukać: imperf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(na temat)}
dukać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
dukać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
dukać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepadjp(po,postp)}
dukać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
dumać: imperf: subj{np(str)} + {cp(int)}
dumać: imperf: subj{np(str)} + {cp(że)}
dumać: imperf: subj{np(str)} + {or}
dumać: imperf: subj{np(str)} + {prepnp(nad,inst); prepnp(o,loc); prepncp(nad,inst,int); prepncp(nad,inst,że); prepncp(nad,inst,żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
dusić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
dusić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dusić się: imperf: subj{np(str)} + {comprepnp(z powodu)}
dusić się: imperf: subj{np(str)} + {np(inst)}
dusić się: imperf: subj{np(str)} + {prepnp(od,gen)}
dusić się: imperf: subj{np(str)} + {prepnp(w,loc)}
dusić się: imperf: subj{np(str)} + {prepnp(z,gen)}
dusić się: imperf: subj{np(str)} + {xp(locat)}
dwoić: imperf: subj{np(str)} + obj{np(str)}
dwoić się: imperf: subj{np(str)}
dwoić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)} + {preplexnp(przed,inst,pl,'oko',natr)}
dwoić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)} + {preplexnp(w,loc,pl,'oko',natr)}
dwoić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {preplexnp(przed,inst,pl,'oko',natr)}
dwoić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {preplexnp(w,loc,pl,'oko',natr)}
dygotać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
dygotać: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
dygotać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
dyktować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
dyktować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
dyktować: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
dyktować: imperf: subj{np(str)} + {np(dat)} + {or}
dyktować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)}
dymić: imperf: subj{E} + {np(dat)} + {xp(abl)}
dymić: imperf: subj{E} + {xp(locat)}
dymić: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
dymić: imperf: subj{np(str)} + {np(inst)} + {xp(abl)}
dymić: imperf: subj{np(str)} + {prepnp(od,gen)}
dymić: imperf: subj{np(str)} + {xp(locat)}
dymić się: imperf: subj{E} + {np(dat)} + {xp(abl)}
dymić się: imperf: subj{E} + {xp(locat)}
dymić się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
dymić się: imperf: subj{np(str)} + {prepnp(od,gen)}
dymić się: imperf: subj{np(str)} + {xp(locat)}
dyndać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
dyndać: imperf: subj{np(str)} + {np(dat)} + {prepnp(u,gen)}
dyndać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
dyndać: imperf: subj{np(str)} + {np(inst)}
dyndać się: imperf: subj{np(str)} + {np(dat)}
dyndać się: imperf: subj{np(str)} + {prepnp(na,loc)}
dyrygować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
dyrygować: imperf: subj{np(str)} + {np(inst)} + {cp(żeby)}
dyrygować: imperf: subj{np(str)} + {or}
dyskredytować: imperf: subj{ncp(str,int); ncp(str,że)} + obj{np(str)}
dyskredytować: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {refl}
dyskredytować: imperf: subj{np(str)} + obj{ncp(str,int)}
dyskredytować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
dyskredytować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
dyskryminować: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(z powodu)}
dyskryminować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,gen); prepncp(za,acc,int); prepncp(za,acc,że)}
dyskutować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
dyskutować: imperf: subj{np(str)} + {or}
dyskutować: imperf: subj{np(str)} + {prepnp(nad,inst); prepnp(o,loc); comprepnp(na temat); cp(int); prepncp(nad,inst,int); prepncp(nad,inst,że); prepncp(nad,inst,żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(z,inst)}
dyskutować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
dyskutować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
dyskutować: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
dyskwalifikować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(z,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
dysponować: imperf: subj{np(str)} + {np(inst)}
dysponować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
dysponować: imperf: subj{np(str)} + {or}
dystansować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
dystansować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'wzgląd',ratr)}
dystansować się: imperf: subj{np(str)} + {prepnp(od,gen)}
dyszeć: imperf: subj{np(str)} + {fixed('ledwie')}
dyszeć: imperf: subj{np(str)} + {fixed('ledwo')}
dyszeć: imperf: subj{np(str)} + {np(inst)}
dziać się: imperf: controller{np(dat)} + controllee{xp(mod)}
dziać się: imperf: subj{np(str)} + {np(dat)}
dziać się: imperf: subj{np(str)} + {prepnp(z,inst)}
dziać się: imperf: subj{np(str)} + {xp(locat)} + {xp(temp)}
działać: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)} + {np(inst)}
działać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
działać: imperf: subj{np(str)} + {xp(locat)}
dziedziczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
dzielić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
dzielić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
dzielić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
dzielić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
dzielić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
dzielić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
dzielić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
dzielić się: imperf: subj{np(str)} + {prepnp(na,acc)}
dzielić się: imperf: subj{np(str)} + {prepnp(przez,acc)}
dzierżawić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
dzierżawić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(za,acc)}
dziękować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
dziękować: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
dziobać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
dziobać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
dziobać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
dziobać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
dziobać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
dziobać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
dziobać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
dziobać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(z,inst)}
dziurawić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
dziurawić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
dziurawić się: imperf: subj{np(str)} + {prepnp(od,gen)}
dziurawić się: imperf: subj{np(str)} + {xp(mod)}
dziwić: imperf: subj{cp(int)} + {np(str)}
dziwić: imperf: subj{np(str); cp(że); ncp(str,int); ncp(str,że)} + {np(str)}
dziwić: imperf: subj{np(str)} + {np(inst)} + {np(str)}
dziwić się: imperf: subj{np(str)} + {cp(int)}
dziwić się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
dziwić się: imperf: subj{np(str)} + {np(dat); cp(że); ncp(dat,int); ncp(dat,że)}
dziwić się: imperf: subj{np(str)} + {or}
dzwonić: imperf: {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
dzwonić: imperf: {np(dat)} + {preplexnp(w,loc,_,'ucho',natr)}
dzwonić: imperf: subj{np(str)} + {np(dat)}
dzwonić: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
dzwonić: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'ucho',natr)}
dzwonić: imperf: subj{np(str)} + {np(inst)}
dzwonić: imperf: subj{np(str)} + {preplexnp(do,gen,pl,'drzwi',atr)}
dzwonić: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'trwoga',natr)}
dzwonić: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(o,acc)} + {prepnp(od,gen); xp(abl)}
dzwonić: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {comprepnp(w sprawie)}
dzwonić: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {cp(int); cp(że); cp(żeby)}
dzwonić: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {prepnp(po,acc)}
dzwonić: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {prepnp(z,inst); prepncp(z,inst,że)}
dzwonić: imperf: subj{np(str)} + {prepnp(na,acc)}
dzwonić: imperf: subj{np(str)} + {prepnp(za,inst)}
dźwięczeć: imperf: {np(dat)} + {prepnp(w,loc)} + {xp(dur)}
dźwięczeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {or}
dźwięczeć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)} + {or}
dźwięczeć: imperf: subj{or} + {np(dat)} + {prepnp(w,loc)} + {xp(mod)}
dźwigać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
dźwigać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
dźwigać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
dźwigać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
dźwigać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
dźwigać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
dźwigać się: imperf: subj{np(str)} + {prepnp(na,acc)}
dźwigać się: imperf: subj{np(str)} + {prepnp(na,loc)}
dźwigać się: imperf: subj{np(str)} + {prepnp(z,gen)}
dźwigać się: imperf: subj{np(str)} + {xp(abl)}
dźwignąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
dźwignąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
dźwignąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
dźwignąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
dźwignąć się: perf: subj{np(str)} + {prepnp(na,acc)}
dźwignąć się: perf: subj{np(str)} + {prepnp(na,loc)}
dźwignąć się: perf: subj{np(str)} + {prepnp(z,gen)}
dźwignąć się: perf: subj{np(str)} + {xp(abl)}
egzaminować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
egzaminować: imperf: subj{np(str)} + obj{np(str)} + {or}
egzaminować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
egzekwować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
egzystować: imperf: subj{np(str)} + {prepnp(jako,str)}
egzystować: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(w,loc)}
egzystować: imperf: subj{np(str)} + {prepnp(od,gen)}
egzystować: imperf: subj{np(str)} + {xp(locat)} + {xp(mod)}
ekscytować: imperf: subj{cp(int)} + {np(str)}
ekscytować: imperf: subj{cp(że)} + {np(str)}
ekscytować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
ekscytować się: imperf: subj{np(str)} + {cp(int)}
ekscytować się: imperf: subj{np(str)} + {cp(że)}
ekscytować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
ekshumować: _: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ekshumować: _: subj{np(str)} + obj{np(str)} + {xp(locat)}
eksmitować: _: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
eksperymentować: imperf: subj{np(str)} + {np(inst)}
eksperymentować: imperf: subj{np(str)} + {prepnp(na,loc)}
eksperymentować: imperf: subj{np(str)} + {prepnp(z,inst)}
eksploatować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
eksploatować: imperf: subj{np(str)} + {refl}
eksplodować: _: subj{np(str)} + {np(inst)}
eksplodować: _: subj{np(str)} + obj{np(str)}
eksponować: imperf: subj{np(str)} + {cp(że)}
eksponować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
eksportować: _: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
elektryzować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
elektryzować się: imperf: subj{np(str)} + {ncp(inst,że)}
eliminować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
emanować: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
emanować: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
emanować: imperf: subj{np(str)} + {prepnp(od,gen)}
emanować: imperf: subj{np(str)} + {prepnp(z,gen)}
emigrować: imperf: subj{np(str)} + {prepnp(w,loc)} + {xp(adl)}
emigrować: imperf: subj{np(str)} + {prepnp(za,inst)} + {xp(adl)}
emigrować: imperf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)}
emigrować: imperf: subj{np(str)} + {xp(mod)}
emitować: _: subj{np(str)} + obj{np(str)} + {xp(locat)}
entuzjazmować się: imperf: subj{np(str)} + {cp(int); cp(że)}
entuzjazmować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
entuzjazmować się: imperf: subj{np(str)} + {or}
ewakuować: _: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
ewakuować się: _: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
falować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
falować: imperf: subj{np(str)} + obj{np(str)}
fałszować: imperf: subj{np(str)} + {cp(że)}
fałszować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
farbować: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
farbować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
farbować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
farbować się: perf: subj{np(str)} + {advp(misc)}
farbować się: perf: subj{np(str)} + {np(inst)}
farbować się: perf: subj{np(str)} + {prepnp(na,acc)}
fascynować: imperf: subj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(str)}
fascynować: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)}
fascynować się: imperf: subj{np(str)} + {cp(int)}
fascynować się: imperf: subj{np(str)} + {cp(że)}
fascynować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
faszerować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
faszerować się: imperf: subj{np(str)} + {np(inst)}
fatygować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
fatygować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
fatygować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
fatygować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
fatygować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
fatygować: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
fatygować się: imperf: subj,controller{np(str)} + controllee{infp(_)}
fatygować się: imperf: subj{np(str)} + {cp(żeby)}
fatygować się: imperf: subj{np(str)} + {np(inst)}
fatygować się: imperf: subj{np(str)} + {prepnp(do,gen)}
fatygować się: imperf: subj{np(str)} + {prepnp(na,acc)}
fatygować się: imperf: subj{np(str)} + {prepnp(z,inst)}
fatygować się: imperf: subj{np(str)} + {xp(adl)}
faulować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)} + {xp(mod)}
faworyzować: imperf: subj{np(str)} + obj{np(str)} + {lexnp(inst,sg,'koszt',ratr)}
fedrować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
fedrować: imperf: subj{np(str)} + {xp(locat)}
fetować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
figurować: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {xp(locat)}
figurować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {xp(locat)}
fikać: imperf: subj{np(str)} + {np(inst)}
fikać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
fikać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
fikać: imperf: subj{np(str)} + {prepnp(do,gen)}
filmować: imperf: subj{np(str)} + {np(inst)} + {cp(int)}
filmować: imperf: subj{np(str)} + {np(inst)} + {cp(jak)}
filmować: imperf: subj{np(str)} + {np(inst)} + {refl}
filmować: imperf: subj{np(str)} + obj{np(str); ncp(str,jak)} + {np(inst)}
filtrować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
filtrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
filtrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
filtrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
filtrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
finalizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
finansować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
finansować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
finiszować: _: subj{np(str)} + {adjp(str)}
finiszować: _: subj{np(str)} + {np(inst)}
finiszować: _: subj{np(str)} + {np(str)}
finiszować: _: subj{np(str)} + {prepadjp(jako,str)}
finiszować: _: subj{np(str)} + {prepnp(ku,dat)}
finiszować: _: subj{np(str)} + {prepnp(na,loc)}
finiszować: _: subj{np(str)} + {prepnp(o,acc)} + {prepnp(od,gen)} + {advp(misc)}
finiszować: _: subj{np(str)} + {prepnp(przed,inst)}
finiszować: _: subj{np(str)} + {prepnp(w,loc)}
flirtować: imperf: subj{np(str)} + {prepnp(z,inst)}
formować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
formować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
formować się: imperf: subj{np(str)} + {prepnp(w,acc)}
formować się: imperf: subj{np(str)} + {prepnp(z,gen)}
formułować: imperf: subj{np(str)} + controller{ncp(str,że)} + controllee{prepnp(jako,str)}
formułować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
formułować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
forsować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
forsować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
forsować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
forsować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
fotografować: imperf: subj{np(str)} + {np(inst)} + {refl}
fotografować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
frunąć: _: subj{np(str)} + {prepnp(na,loc)}
frunąć: _: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
fruwać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
fruwać: imperf: subj{np(str)} + {prepnp(na,loc)}
fundować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
fundować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
funkcjonować: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)}
funkcjonować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
funkcjonować: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(locat)}
gadać: imperf: subj,controller{np(str)} + controllee{xp(mod)}
gadać: imperf: subj{np(str)} + {np(dat)} + {np(str)}
gadać: imperf: subj{np(str)} + {np(dat)} + {or}
gadać: imperf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
gadać: imperf: subj{np(str)} + {np(str)} + {prepnp(na,acc)}
gadać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
gadać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
gadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
gadać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(z,inst)}
gadać: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
gadać: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
gadać: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
gadać: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
galopować: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(z,gen)} + {xp(adl)}
galopować: imperf: subj{np(str)} + {xp(mod)}
galopować: imperf: subj{np(str)} + {xp(perl)}
ganiać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
ganiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
ganiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
ganiać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
ganiać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
ganiać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
ganiać: imperf: subj{np(str)} + {prepnp(na,loc)}
ganiać: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,żeby)}
ganiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
ganiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(perl)}
ganić: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
ganić: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
ganić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
gapić się: imperf: subj{np(str)} + {cp(jak)}
gapić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
gapić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
gapić się: imperf: subj{np(str)} + {prepnp(za,inst)}
garbić: imperf: subj{np(str)} + obj{np(str)}
garbić się: imperf: subj{np(str)} + {prepnp(nad,inst)}
garbić się: imperf: subj{np(str)} + {prepnp(od,gen)}
garbić się: imperf: subj{np(str)} + {prepnp(pod,inst)}
gardzić: imperf: subj{np(str)} + {np(inst)}
garnąć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
garnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
garnąć: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
garnąć: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
garnąć się: imperf: subj{np(str)} + {cp(żeby)}
garnąć się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
garnąć się: imperf: subj{np(str)} + {xp(adl)}
gasić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
gasić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,loc,sg,'zarodek',natr)}
gasnąć: imperf: subj{np(str)} + {prepnp(na,loc)}
gasnąć: imperf: subj{np(str)} + {prepnp(w,loc)}
gasnąć: imperf: subj{np(str)} + {prepnp(z,inst)}
gawędzić: imperf: subj{np(str)} + {or}
gawędzić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
gawędzić: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
generalizować: imperf: subj{np(str)} + {comprepnp(co do)}
generalizować: imperf: subj{np(str)} + {comprepnp(na temat)}
generalizować: imperf: subj{np(str)} + {comprepnp(w kwestii)}
generalizować: imperf: subj{np(str)} + {comprepnp(w sprawie)}
generalizować: imperf: subj{np(str)} + {cp(int)}
generalizować: imperf: subj{np(str)} + {cp(że)}
generalizować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
generalizować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
generalizować się: imperf: subj{np(str)} + {prepnp(na,acc)}
generować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
generować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
generować: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
gestykulować: imperf: subj{np(str)} + {np(inst)}
gestykulować: imperf: subj{np(str)} + {or}
gestykulować: imperf: subj{np(str)} + {prepnp(nad,inst)}
gęstnieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
gęstnieć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
giąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
giąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
giąć się: imperf: subj{np(str)} + {prepnp(pod,inst)}
giąć się: imperf: subj{np(str)} + {prepnp(przed,inst)}
ginąć: imperf: subj{np(str)} + {np(dat)} + {preplexnp(z,gen,pl,'oko',natr)}
ginąć: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
ginąć: imperf: subj{np(str)} + {prepnp(na,loc)}
ginąć: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
ginąć: imperf: subj{np(str)} + {prepnp(w,loc)}
ginąć: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
ginąć: imperf: subj{np(str)} + {prepnp(z,gen)}
ginąć: imperf: subj{np(str)} + {xp(locat)}
gloryfikować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
gloryfikować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
gładzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
gładzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
gładzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
głaskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
głaskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
głaskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
głodzić: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
głodzić: imperf: subj{np(str)} + obj{np(str)} + {prepncp(po,acc,żeby)}
głodzić się: imperf: subj{np(str)} + {cp(żeby)}
głosić: imperf: subj{np(str)} + {ncp(str,że)}
głosić: imperf: subj{np(str)} + obj{np(str); cp(że)}
głosić: imperf: subj{np(str)} + {or}
głosić: imperf: subj{np(str)} + {prepncp(o,loc,int)}
głosić: imperf: subj{np(str)} + {prepncp(o,loc,jak)}
głosić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
głosować: imperf: subj{np(str)} + obj{np(str)}
głosować: imperf: subj{np(str)} + {or}
głosować: imperf: subj{np(str)} + {prepncp(nad,inst,żeby)}
głosować: imperf: subj{np(str)} + {prepnp(na,acc)}
głosować: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)}
głosować: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepnp(za,inst); prepncp(za,inst,żeby)}
głowić się: imperf: subj{np(str)} + {cp(int)}
głowić się: imperf: subj{np(str)} + {or}
głowić się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,żeby)}
gmerać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
gmerać się: imperf: subj{np(str)}
gnać: imperf: {np(str)} + {prepnp(do,gen)}
gnać: imperf: {np(str)} + {xp(abl)} + {xp(adl)}
gnać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
gnać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
gnać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
gnębić: imperf: subj{cp(int)} + {np(str)}
gnębić: imperf: subj{cp(że)} + {np(str)}
gnębić: imperf: subj{np(str); ncp(str,że)} + {np(str)}
gnębić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
gnębić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
gnębić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
gnić: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
gnić: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
gnić: imperf: subj{np(str)} + {preplexnp(pod,inst,sg,'wpływ',ratr)}
gnić: imperf: subj{np(str)} + {prepnp(w,loc)}
gnić: imperf: subj{np(str)} + {xp(locat)}
gnieść: imperf: {np(str)} + {xp(locat)}
gnieść: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
gnieść: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
gnieść: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
gnieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
gnieść: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
gnieść się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(locat)}
gniewać: imperf: subj{cp(że)} + {np(str)}
gniewać: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
gniewać się: imperf: subj{np(str)} + {comprepnp(z powodu)}
gniewać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)}
gniewać się: imperf: subj{np(str)} + {or}
gniewać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
gniewać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
gniewać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
gniewać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {prepnp(z,inst)}
gniewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
gniewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
gnieździć się: imperf: subj{np(str)} + {prepnp(u,gen)}
gnieździć się: imperf: subj{np(str)} + {xp(locat)}
gnoić: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
gnoić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
gnoić: imperf: subj{np(str)} + {xp(locat)} + {refl}
godzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
godzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
godzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
godzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
godzić: imperf: subj{np(str)} + {prepnp(na,acc)}
godzić się: imperf: {np(dat)} + {advp(pron)}
godzić się: imperf: subj,controllee{infp(_)} + controller{np(dat)}
godzić się: imperf: subj,controller{np(str)} + controllee{infp(_)}
godzić się: imperf: subj{cp(żeby)} + {np(dat)}
godzić się: imperf: subj{np(str)} + {cp(że)}
godzić się: imperf: subj{np(str)} + {cp(żeby)}
godzić się: imperf: subj{np(str)} + {or}
godzić się: imperf: subj{np(str)} + {prepnp(do,gen)}
godzić się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
godzić się: imperf: subj{np(str)} + {prepnp(za,acc)}
godzić się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że); prepncp(z,inst,żeby)}
goić: imperf: subj{np(str)} + {np(str)}
goić się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
goić się: imperf: subj{np(str)} + controller{prepnp(na,loc)} + controllee{xp(mod)}
golić: imperf: subj{np(str)} + {np(inst)} + {advp(misc)} + {refl}
golić: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
golić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {advp(misc)}
golić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
gonić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
gonić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
gonić: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
gonić: imperf: subj{np(str)} + {prepnp(za,inst)}
gonić się: imperf: subj{np(str)} + {prepnp(z,inst)}
gorączkować się: imperf: subj{np(str)} + {cp(int)}
gorączkować się: imperf: subj{np(str)} + {cp(że)}
gorączkować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
gorączkować się: imperf: subj{np(str)} + {or}
gorszyć: imperf: subj{cp(że)} + {np(str)}
gorszyć: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)}
gorszyć się: imperf: subj{np(str)} + {cp(że)}
gorszyć się: imperf: subj{np(str)} + {np(inst); prepnp(na,acc); ncp(inst,że)}
gorszyć się: imperf: subj{np(str)} + {or}
gorzeć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
gorzeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
gospodarować: imperf: subj{np(str)} + {np(inst)}
gospodarować: imperf: subj{np(str)} + {prepnp(na,loc)}
gospodarować: imperf: subj{np(str)} + {xp(locat)}
gospodarzyć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(inst)}
gospodarzyć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(locat)}
gospodarzyć się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(inst)}
gospodarzyć się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(locat)}
gościć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
gościć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
gościć: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
gotować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
gotować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
gotować się: imperf: subj{np(str)} + {comprepnp(z powodu)}
gotować się: imperf: subj{np(str)} + {cp(żeby)}
gotować się: imperf: subj{np(str)} + {prepnp(do,gen)}
gotować się: imperf: subj{np(str)} + {prepnp(na,acc)}
gotować się: imperf: subj{np(str)} + {prepnp(od,gen)}
gotować się: imperf: subj{np(str)} + {prepnp(w,loc)}
gotować się: imperf: subj{np(str)} + {xp(locat)}
górować: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(nad,inst)}
grabić: imperf: subj{np(str)} + {np(inst)} + {prepnp(u,gen)} + {lexnp(dat,_,'siebie',natr)}
grabić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
grabić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {preplexnp(pod,acc,_,'siebie',natr)}
grabić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
grabić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
grabić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
grabić: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(z,inst)} + {lexnp(dat,_,'siebie',natr)}
grać: imperf: subj{np(str)} + {comprepnp(na rzecz)}
grać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
grać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {prepnp(z,inst)}
grać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
grać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); prepnp(w,loc); xp(locat)}
grać: imperf: subj{np(str)} + {prepnp(do,gen)}
grać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
grać: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,żeby)}
gramolić się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)} + {xp(perl)}
gramolić się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
graniczyć: imperf: subj{np(str)} + {prepnp(z,inst)}
grasować: imperf: subj{np(str)} + {xp(locat)}
gratulować: imperf: subj{np(str)} + {np(dat)} + {np(gen); cp(że); ncp(gen,że)}
gromadzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
gromadzić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
gromadzić się: imperf: subj{np(str)} + {prepnp(u,gen)}
gromadzić się: imperf: subj{np(str)} + {xp(locat)}
gromić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); cp(że); prepncp(za,acc,że)}
grozić: imperf: subj{np(str)} + {np(dat)} + {np(inst); cp(że); ncp(inst,że)} + {or}
grozić: imperf: subj{np(str)} + {np(dat)} + {prepncp(za,acc,że)}
grozić: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc)}
gruchać: imperf: subj{np(str)} + {np(inst)}
gruchać: imperf: subj{np(str)} + {prepadjp(po,postp)}
gruchać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
gruchać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
gruchać: imperf: subj{np(str)} + {prepnp(o,loc)}
gruchać: imperf: subj{np(str)} + {prepnp(w,loc)}
gruchać: imperf: subj{np(str)} + {prepnp(z,inst)}
gruchnąć: perf: subj{cp(że)} + {xp(locat)}
gruchnąć: perf: subj{np(str)} + {cp(że)}
gruchnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
gruchnąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
gruchnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
gruchnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
gruchnąć: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
gruchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
gruchnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
gruchnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
gruchnąć: perf: subj{np(str)} + {prepnp(na,acc)}
gruchnąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
gruchnąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
gruchnąć: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
gruchnąć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
gruchnąć: perf: subj{or} + {xp(abl)}
gruchnąć: perf: subj{or} + {xp(locat)}
grupować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'wzgląd',ratr)}
grupować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
grupować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
grupować się: imperf: subj{np(str)} + {prepnp(w,acc)}
grupować się: imperf: subj{np(str)} + {xp(locat)}
gryźć: imperf: subj{cp(int)} + {np(str)}
gryźć: imperf: subj{cp(że)} + {np(str)}
gryźć: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
gryźć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
gryźć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
gryźć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
gryźć: imperf: subj{np(str)} + {prepnp(po,loc)} + {refl}
gryźć: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
gryźć się: imperf: subj{np(str)} + {cp(int)}
gryźć się: imperf: subj{np(str)} + {cp(że)}
gryźć się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
gryźć się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {prepnp(z,inst)}
grzać: imperf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
grzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
grzać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
grzać się: imperf: subj{np(str)} + {np(inst)}
grzebać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przy,loc)}
grzebać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
grzebać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
grzebać się: imperf: subj{np(str)} + {prepnp(przy,loc)}
grzebać się: imperf: subj{np(str)} + {prepnp(w,loc)}
grzebać się: imperf: subj{np(str)} + {prepnp(z,inst)}
grzeszyć: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
grzeszyć: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
grzeszyć: imperf: subj{np(str)} + {prepnp(z,inst)}
grzęznąć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
grzęznąć: imperf: subj{np(str)} + {prepnp(po,acc)} + {prepnp(w,loc)}
grzęznąć: imperf: subj{np(str)} + {prepnp(w,loc)} + {xp(locat)}
grzmieć: imperf: subj{E}
grzmieć: imperf: subj{np(str)} + {cp(żeby)}
grzmieć: imperf: subj{np(str)} + {np(inst)}
grzmieć: imperf: subj{np(str)} + {or}
grzmieć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
grzmieć: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
grzmotnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
grzmotnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
grzmotnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
grzmotnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
grzmotnąć się: perf: subj{np(str)} + {prepnp(o,acc)}
grzmotnąć się: perf: subj{np(str)} + {xp(adl)}
gubić: imperf: subj{np(str); ncp(str,że)} + {np(str)}
gubić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
gubić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,pl,'oko',natr)}
gubić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
gubić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
gubić się: imperf: subj{np(str)} + {np(inst)}
gubić się: imperf: subj{np(str)} + {prepnp(w,loc)}
gustować: imperf: subj{np(str)} + {prepnp(w,loc)}
gwałcić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
gwarantować: imperf: subj{np(str); ncp(str,że)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
gwarantować: imperf: subj{np(str)} + {or}
gwizdać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
gwizdać: imperf: subj{np(str)} + {prepncp(na,acc,int)}
gwizdać: imperf: subj{np(str)} + {prepnp(na,acc)}
gwizdnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
gwizdnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
gwizdnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
gwizdnąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
gwizdnąć: perf: subj{np(str)} + {prepnp(do,gen)}
gwizdnąć: perf: subj{np(str)} + {prepnp(na,acc)}
gwizdnąć: perf: subj{np(str)} + {prepnp(na,loc)}
gwizdnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
gwizdnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
gwizdnąć się: perf: subj{np(str)} + {prepnp(na,loc)}
haftować: imperf: subj{np(str)} + {np(inst)}
haftować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
haftować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
haftować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
haftować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
haftować: imperf: subj{np(str)} + {prepnp(po,loc)}
haftować: imperf: subj{np(str)} + {xp(adl)}
hałasować: imperf: subj{np(str)} + {cp(że)}
hałasować: imperf: subj{np(str)} + {cp(żeby)}
hałasować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
hałasować: imperf: subj{np(str)} + {or}
hałasować: imperf: subj{np(str)} + {xp(dur)} + {xp(locat)}
hałasować: imperf: subj{np(str)} + {xp(mod)}
hamować: imperf: subj{np(str)} + {cp(żeby)} + {refl}
hamować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
hamować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
hamować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); xp(locat)}
hamować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
hamować: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
handlować: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
harmonizować: imperf: subj{np(str)} + {np(inst)}
harmonizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,inst)}
harmonizować się: imperf: subj{np(str)} + {prepnp(z,inst)}
hartować: imperf: subj{np(str)} + {np(inst)} + {refl}
hartować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
hartować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
hartować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
hartować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
hartować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
hartować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
hartować: imperf: subj{np(str)} + {prepnp(na,acc)} + {refl}
hartować: imperf: subj{np(str)} + {prepnp(na,loc)} + {refl}
hartować: imperf: subj{np(str)} + {prepnp(przez,acc)} + {refl}
hartować: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
hartować: imperf: subj{np(str)} + {xp(locat)} + {refl}
hasać: imperf: subj{np(str)} + {prepnp(na,loc)}
hasać: imperf: subj{np(str)} + {xp(locat)}
hasać: imperf: subj{np(str)} + {xp(perl)}
hodować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
hodować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
hodować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
hodować się: imperf: subj{np(str)} + {advp(misc)}
hołdować: imperf: subj{np(str)} + {np(dat)}
hołubić: imperf: subj{np(str)} + obj{np(str)}
honorować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)}
huczeć: imperf: {np(dat)} + {xp(locat)}
huczeć: imperf: {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)} + {xp(locat)}
huczeć: imperf: {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {xp(locat)}
huczeć: imperf: subj{cp(int)} + {xp(locat)}
huczeć: imperf: subj{cp(że)} + {xp(locat)}
huczeć: imperf: subj{np(str)} + {cp(int)}
huczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
huczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
huczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
huczeć: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)}
huczeć: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
huknąć: perf: subj{cp(że)} + {xp(locat)}
huknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
huknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
huknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
huknąć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
huknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
huknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
huknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
huknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
huknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
huknąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
huknąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
hulać: imperf: subj{np(str)} + {prepnp(w,loc)}
hulać: imperf: subj{np(str)} + {prepnp(za,acc)}
hulać: imperf: subj{np(str)} + {xp(locat)}
hulać: imperf: subj{np(str)} + {xp(perl)}
huśtać: imperf: subj{np(str)} + {np(inst)}
huśtać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
huśtać się: imperf: subj{np(str)} + {prepnp(na,loc)}
idealizować: imperf: subj{np(str)} + obj{np(str)}
identyfikować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
identyfikować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
identyfikować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
identyfikować się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,nom)}
identyfikować się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
ignorować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
igrać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(mod)}
igrać: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(mod)} + {or}
ilustrować: imperf: subj{np(str)} + {cp(int); cp(że)}
ilustrować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
imać się: imperf: subj{np(str)} + {np(gen)}
imitować: imperf: subj,controller{np(str)} + controllee{np(str)}
imitować: imperf: subj{np(str)} + {cp(int)}
imitować: imperf: subj{np(str)} + {cp(że)}
imitować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
implikować: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)} + {xp(locat)}
imponować: imperf: subj{cp(int)} + {np(dat)}
imponować: imperf: subj{cp(jak)} + {np(dat)}
imponować: imperf: subj{cp(że)} + {np(dat)}
imponować: imperf: subj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
importować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
importować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
improwizować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
improwizować: imperf: subj{np(str)} + {prepnp(do,gen)}
improwizować: imperf: subj{np(str)} + {prepnp(na,acc)}
improwizować: imperf: subj{np(str)} + {prepnp(na,loc)}
inaugurować: _: subj{np(str)} + obj{np(str)} + {np(inst)}
indagować: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(co do)}
indagować: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
indagować: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(w kwestii)}
indagować: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
indagować: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
indagować: imperf: subj{np(str)} + obj{np(str)} + {or}
indagować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
indukować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
indukować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
indukować się: imperf: subj{np(str)} + {xp(locat)}
informować: imperf: subj{np(str)} + {np(str)} + {or}
informować: imperf: subj{np(str)} + obj{np(str)} + {cp(jakoby)}
informować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); cp(int); cp(że); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
informować się: imperf: subj{np(str)} + {comprepnp(na temat)} + {xp(locat)}
informować się: imperf: subj{np(str)} + {comprepnp(w kwestii)} + {xp(locat)}
informować się: imperf: subj{np(str)} + {comprepnp(w sprawie)} + {xp(locat)}
informować się: imperf: subj{np(str)} + {prepnp(co do,gen)} + {prepnp(u,gen)}
informować się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int)} + {prepnp(u,gen)}
informować się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int)} + {xp(locat)}
informować się: imperf: subj{np(str)} + {prepnp(u,gen)} + {cp(int)}
ingerować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
inicjować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
inkasować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(za,acc)}
inspirować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
inspirować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
inspirować się: imperf: subj{np(str)} + {np(inst)}
instalować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
instalować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
instalować się: imperf: subj{np(str)} + {prepnp(u,gen)}
instalować się: imperf: subj{np(str)} + {xp(locat)}
instruować: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
instruować: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
instruować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
instruować: imperf: subj{np(str)} + obj{np(str)} + {or}
instruować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
instruować się: imperf: subj{np(str)} + {or}
instruować się: imperf: subj{np(str)} + {prepnp(u,gen)}
integrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
integrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
integrować się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
integrować się: imperf: subj{np(str)} + {prepnp(z,inst)}
intensyfikować: imperf: subj{np(str)} + obj{np(str)}
intensyfikować się: imperf: subj{np(str)}
interesować: imperf: subj{np(str); cp(int); cp(że); cp(żeby); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(str)}
interesować się: imperf: subj{np(str)} + {cp(int)}
interesować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
interpretować: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
interpretować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(jako,str)}
interpretować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
interweniować: imperf: subj{np(str)} + {comprepnp(na temat)} + {xp(locat)}
interweniować: imperf: subj{np(str)} + {comprepnp(w kwestii)} + {xp(locat)}
interweniować: imperf: subj{np(str)} + {cp(żeby)} + {xp(locat)}
interweniować: imperf: subj{np(str)} + {np(inst)}
interweniować: imperf: subj{np(str)} + {prepncp(o,acc,żeby)} + {xp(locat)}
interweniować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
interweniować: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(u,gen)}
interweniować: imperf: subj{np(str)} + {prepnp(przez,acc)} + {prepnp(u,gen); xp(locat)} + {comprepnp(w sprawie)}
interweniować: imperf: subj{np(str)} + {prepnp(przy,loc)}
interweniować: imperf: subj{np(str)} + {prepnp(u,gen)} + {comprepnp(na temat)}
interweniować: imperf: subj{np(str)} + {prepnp(u,gen)} + {cp(że)}
interweniować: imperf: subj{np(str)} + {prepnp(u,gen)} + {or}
interweniować: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepncp(o,acc,żeby)}
interweniować: imperf: subj{np(str)} + {prepnp(w,acc)}
intrygować: imperf: subj{cp(int)} + {np(str)}
intrygować: imperf: subj{cp(że)} + {np(str)}
intrygować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
intrygować: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
intrygować: imperf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
intrygować: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
inwestować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
inwigilować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
inwigilować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
ironizować: imperf: subj{np(str)} + {comprepnp(na temat)}
ironizować: imperf: subj{np(str)} + {comprepnp(w sprawie)}
ironizować: imperf: subj{np(str)} + {cp(że)}
ironizować: imperf: subj{np(str)} + {or}
ironizować: imperf: subj{np(str)} + {prepnp(o,loc)}
irytować: imperf: subj{cp(gdy)} + {np(str)}
irytować: imperf: subj{cp(jak)} + {np(str)}
irytować: imperf: subj{cp(jeśli)} + {np(str)}
irytować: imperf: subj{cp(kiedy)} + {np(str)}
irytować: imperf: subj{cp(że)} + {np(str)}
irytować: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(str)}
irytować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
irytować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
irytować się: imperf: subj{np(str)} + {or}
irytować się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
istnieć: imperf: subj{np(str)} + {prepnp(dla,gen)}
istnieć: imperf: subj{np(str)} + {xp(dur)} + {xp(locat)}
istnieć: imperf: subj{np(str)} + {xp(locat)} + {xp(temp)}
iść: imperf: {infp(_)}
iść: imperf: {np(dat)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
iść: imperf: {np(dat)} + {xp(mod)}
iść: imperf: {prepadjp(ku,dat)}
iść: imperf: {prepnp(ku,dat); prepncp(ku,dat,że)}
iść: imperf: subj,controller{np(str)} + controllee{infp(_)} + {xp(adl)}
iść: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
iść: imperf: subj{np(str)} + {cp(że)} + {preplexnp(o,acc,sg,'głowa',natr)}
iść: imperf: subj{np(str)} + {cp(że)} + {preplexnp(o,acc,sg,'zakład',natr)}
iść: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'ręka',natr)}
iść: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
iść: imperf: subj{np(str)} + {preplexnp(w,acc,pl,'ślad',ratr)}
iść: imperf: subj{np(str)} + {preplexnp(z,inst,pl,'torba',natr)}
iść: imperf: subj{np(str)} + {preplexnp(z,inst,sg,'dym',natr)}
iść: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen)}
iść: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {xp(abl)}
iść: imperf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,że); prepncp(ku,dat,żeby)}
iść: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
iść: imperf: subj{np(str)} + {prepnp(na,acc); xp(adl)}
iść: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
iść: imperf: subj{np(str)} + {prepnp(po,acc)}
iść: imperf: subj{np(str)} + {prepnp(w,acc)}
iść: imperf: subj{np(str)} + {prepnp(za,acc)}
iść: imperf: subj{np(str)} + {prepnp(za,acc)} + {fixed('za mąż')}
iść: imperf: subj{np(str)} + {prepnp(za,inst)}
iść: imperf: subj{np(str)} + {prepnp(z,inst)} + {preplexnp(do,gen,sg,'łóżko',natr)}
iść: imperf: subj{np(str)} + {prepnp(z,inst)} + {preplexnp(w,loc,sg,'para',atr)}
iść: imperf: subj{np(str)} + {xp(perl)}
izolować: _: subj{np(str)} + obj{np(str)} + {np(inst)}
izolować: _: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
izolować: _: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
izolować: _: subj{np(str)} + {prepnp(od,gen)} + {refl}
jadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
jadać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
jadać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
jadać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
jarzyć: imperf: subj{np(str)} + {cp(int)}
jarzyć: imperf: subj{np(str)} + {cp(że)}
jarzyć: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
jarzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
jarzyć się: imperf: {prepnp(od,gen)} + {xp(locat)}
jarzyć się: imperf: subj{np(str)} + {np(inst)}
jarzyć się: imperf: subj{np(str)} + {prepnp(od,gen)}
jarzyć się: imperf: subj{np(str)} + {prepnp(w,loc)}
jarzyć się: imperf: subj{np(str)} + {xp(adl)}
jarzyć się: imperf: subj{np(str)} + {xp(locat)}
jaśnieć: imperf: subj{E} + {xp(locat)}
jaśnieć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
jaśnieć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
jawić się: imperf: subj,controller{np(str)} + controllee{adjp(str)} + {np(dat)}
jawić się: imperf: subj,controller{np(str)} + controllee{np(inst)} + {np(dat)}
jawić się: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)} + {preplexnp(przed,inst,pl,'oko',natr)}
jawić się: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {prepnp(przed,inst)}
jawić się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {preplexnp(przed,inst,pl,'oko',natr)}
jawić się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(przed,inst)}
jawić się: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
jawić się: imperf: subj{np(str)} + {xp(locat)}
jąć: perf: subj,controller{E} + controllee{infp(imperf)}
jąć się: perf: subj{np(str)} + {np(gen)}
jąkać się: imperf: subj{np(str)} + {cp(że)}
jąkać się: imperf: subj{np(str)} + {np(inst)}
jąkać się: imperf: subj{np(str)} + {prepnp(z,gen)}
jąkać się: imperf: subj{np(str)} + {xp(mod)}
jechać: imperf: {np(inst)} + {prepnp(od,gen)}
jechać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
jechać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
jechać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
jechać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
jechać: imperf: subj{np(str)} + {prepnp(na,loc)}
jechać: imperf: subj{np(str)} + {prepnp(po,loc)}
jechać: imperf: subj{np(str)} + {prepnp(z,inst)} + {fixed('na jednym wózku')}
jednoczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(z,inst)}
jednoczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
jednoczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
jednoczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
jednoczyć się: imperf: subj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(z,inst)}
jednoczyć się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
jednoczyć się: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
jednoczyć się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
jeść: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
jeść: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
jeść: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
jeść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
jeść: imperf: subj{np(str)} + {prepnp(za,acc)}
jeździć: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
jeździć: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
jeździć: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
jeździć: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
jeździć: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
jeździć: imperf: subj{np(str)} + {prepnp(na,loc)}
jeżyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
jeżyć się: imperf: subj{lexnp(str,_,'włos',atr)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)} + {preplexnp(na,loc,sg,'głowa',atr)}
jeżyć się: imperf: subj{lexnp(str,_,'włos',atr)} + {np(dat)} + {preplexnp(na,acc,sg,'widok',natr)} + {preplexnp(na,loc,sg,'głowa',atr)}
jeżyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
jeżyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
jeżyć się: imperf: subj{np(str)} + {np(inst)}
jeżyć się: imperf: subj{np(str)} + {prepnp(na,acc)}
jeżyć się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
jeżyć się: imperf: subj{np(str)} + {xp(abl)}
jęczeć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {cp(że)}
jęczeć: imperf: subj{np(str)} + {cp(żeby)}
jęczeć: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
jęczeć: imperf: subj{np(str)} + {np(dat)} + {or}
jęczeć: imperf: subj{np(str)} + {np(str)}
jęczeć: imperf: subj{np(str)} + {np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
jęczeć: imperf: subj{np(str)} + {prepnp(na,acc)}
jęczeć: imperf: subj{np(str)} + {prepnp(w,loc)}
jęczeć: imperf: subj{np(str)} + {prepnp(z,gen)}
jęknąć: perf: subj{np(str)} + {cp(że)}
jęknąć: perf: subj{np(str)} + {np(str)}
jęknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
jęknąć: perf: subj{np(str)} + {prepnp(nad,inst)} + {or}
kadzić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
kadzić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
kadzić: imperf: subj{np(str)} + {np(dat)} + {or}
kaleczyć: imperf: subj{np(str)} + {np(inst)} + {refl}
kaleczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
kaleczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
kaleczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
kaleczyć się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
kaleczyć się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,acc)}
kalkulować: imperf: subj{np(str)} + {cp(int)} + {lexnp(dat,_,'siebie',natr)}
kalkulować: imperf: subj{np(str)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)}
kalkulować: imperf: subj{np(str)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
kalkulować: imperf: subj{np(str)} + {lexnp(dat,_,'siebie',natr)} + {or}
kalkulować: imperf: subj{np(str)} + obj{np(str)} + {lexnp(dat,_,'siebie',natr)}
kalkulować się: imperf: subj,controllee{infp(_)} + controller{np(dat)}
kalkulować się: imperf: subj{cp(żeby)} + {np(dat)}
kalkulować się: imperf: subj{np(str)} + {advp(misc)}
kalkulować się: imperf: subj{np(str)} + {np(dat)}
kandydować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
kandydować: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
kapać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
kapać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
kapać: imperf: subj{np(str)} + {prepnp(na,acc)}
kapać: imperf: subj{np(str)} + {prepnp(od,gen)}
kapać: imperf: subj{np(str)} + {prepnp(z,gen)}
kapitulować: _: subj{np(str)} + {prepnp(przed,inst)}
kapitulować: _: subj{np(str)} + {xp(mod)}
karać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)} + {refl}
karać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
karać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
karcić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {xp(mod)}
karmić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
karmić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
kasować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)} + {xp(abl)}
kasować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
kaszlać: imperf: subj{np(str)}
katować: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)} + {refl}
katować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
katować: imperf: subj{np(str)} + {prepnp(na,loc)} + {refl}
katować: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
katować: imperf: subj{np(str)} + {prepnp(z,inst)} + {refl}
kazać: _: subj{ncp(str,że)} + controller{np(dat)} + controllee{infp(_)}
kazać: _: subj{np(str)} + controller{np(dat)} + controllee{cp(żeby); infp(_)}
kazać: _: subj{np(str)} + {np(dat)} + {np(str)}
kazać: _: subj{np(str)} + {np(dat)} + {or}
kazić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
kazić się: imperf: subj{np(str)} + {prepnp(z,inst)}
kąpać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
kąpać: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
kąpać się: imperf: subj{np(str)} + {prepnp(w,loc)}
kibicować: imperf: subj{np(str)} + {np(dat); ncp(dat,żeby)}
kibicować: imperf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
kibicować: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
kichać: imperf: subj{np(str)} + {np(inst)}
kichać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
kichać się: imperf: subj{np(str)} + {prepnp(z,inst)}
kiełkować: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(w,loc)}
kierować: imperf: subj{np(str)} + obj{np(inst)}
kierować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
kierować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); xp(adl)}
kierować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
kierować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że); ncp(inst,żeby)}
kierować się: imperf: subj{np(str)} + {prepnp(ku,dat)}
kierować się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
kierować się: imperf: subj{np(str)} + {xp(adl)}
kipieć: imperf: subj{E} + {prepnp(od,gen)} + {xp(locat)}
kipieć: imperf: subj{E} + {prepnp(w,loc)} + {prepnp(z,gen)}
kipieć: imperf: subj{np(str)} + {np(inst)}
kipieć: imperf: subj{np(str)} + {prepnp(od,gen)}
kipieć: imperf: subj{np(str)} + {prepnp(z,gen)}
kipieć: imperf: subj{np(str)} + {xp(abl)}
kipieć: imperf: subj{np(str)} + {xp(adl)}
kisić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
kisić się: imperf: subj{np(str)} + {xp(locat)}
kiwać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(żeby)}
kiwać: imperf: subj{np(str)} + obj{np(str)}
kiwać się: imperf: subj{np(str)} + {prepnp(od,gen)}
kiwnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(żeby)}
kiwnąć: perf: subj{np(str)} + obj{np(str)}
kiwnąć się: perf: subj{np(str)}
klarować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
klarować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
klarować: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
klarować: imperf: subj{np(str)} + {np(dat)} + {or}
klarować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
klarować się: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
klaskać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
klaskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
klaskać: imperf: subj{np(str)} + {prepnp(na,acc)}
klasnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
klasnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
klasnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
klasnąć: perf: subj{np(str)} + {prepnp(na,acc)}
klasyfikować: imperf: subj{np(str)} + obj{np(str)} + {or}
klasyfikować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
klasyfikować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(jako,str)}
klasyfikować się: imperf: subj{np(str)} + {prepnp(na,loc)}
klasyfikować się: imperf: subj{np(str)} + {prepnp(w,loc)}
klasyfikować się: imperf: subj{np(str)} + {prepnp(wśród,gen)}
kląć: imperf: subj,controller{np(str)} + controllee{xp(mod)}
kląć: imperf: subj{np(str)} + {np(str)} + {cp(że)}
kląć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
kląć się: imperf: subj{np(str)} + {np(inst)} + {cp(że)}
kląć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
kleić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
kleić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,inst)}
kleić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
kleić się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
kleić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
klepać: imperf: subj,controller{np(str)} + controllee{xp(mod)}
klepać: imperf: subj{np(str)} + {comprepnp(na temat)}
klepać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
klepać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
klepać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
klepać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
klepać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {prepnp(do,gen)}
klepać: imperf: subj{np(str)} + obj{cp(że); cp(żeby)} + {np(dat)}
klepać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {prepnp(do,gen)}
klepać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
klepać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
klepać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
klepać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
klepać: imperf: subj{np(str)} + obj{prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {np(dat)}
klepać: imperf: subj{np(str)} + obj{prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(do,gen)}
klepać: imperf: subj{np(str)} + {or}
klepnąć: perf: subj,controller{np(str)} + controllee{xp(mod)}
klepnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
klepnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
klepnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
klepnąć: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
klepnąć: perf: subj{np(str)} + obj{cp(że); cp(żeby)} + {np(dat)}
klepnąć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
klepnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
klepnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
klepnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
klepnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
klepnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
klepnąć: perf: subj{np(str)} + {or}
klęczeć: imperf: subj{np(str)} + {prepnp(przed,inst)}
klęczeć: imperf: subj{np(str)} + {xp(locat)}
klękać: imperf: subj{np(str)} + {prepnp(przed,inst)}
klękać: imperf: subj{np(str)} + {xp(locat)}
klęknąć: perf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(przed,inst)}
klęknąć: perf: subj{np(str)} + {prepnp(na,loc)} + {xp(locat)}
klikać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
klikać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
klikać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
klikać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
klikać: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
kliknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
kliknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
kliknąć: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
kliknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
kluczyć: imperf: subj{np(str)} + {comprepnp(co do)}
kluczyć: imperf: subj{np(str)} + {comprepnp(na temat)}
kluczyć: imperf: subj{np(str)} + {comprepnp(w kwestii)}
kluczyć: imperf: subj{np(str)} + {comprepnp(w sprawie)}
kluczyć: imperf: subj{np(str)} + {cp(że)}
kluczyć: imperf: subj{np(str)} + {or}
kluczyć: imperf: subj{np(str)} + {prepnp(o,loc)}
kluczyć: imperf: subj{np(str)} + {prepnp(za,inst)}
kluczyć: imperf: subj{np(str)} + {xp(adl)}
kluczyć: imperf: subj{np(str)} + {xp(locat)}
kluczyć: imperf: subj{np(str)} + {xp(perl)}
kłamać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
kłamać: imperf: subj{np(str)} + {or}
kłamać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
kłamać: imperf: subj{np(str)} + {prepnp(wobec,gen)} + {cp(że)}
kłaniać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(od,gen)}
kłaniać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,acc,sg,'pas',natr)}
kłaniać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
kłaść: imperf: subj{np(str)} + {lexnp(str,pl,'ucho',natr)} + {preplexnp(po,loc,_,'siebie',natr)}
kłaść: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(w,acc,pl,'ucho',natr)}
kłaść: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {preplexnp(w,acc,pl,'ucho',natr)}
kłaść: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,acc,pl,'ucho',natr)} + {or}
kłaść: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(imperf)}
kłaść: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {preplexnp(w,acc,pl,'ucho',natr)}
kłaść: imperf: subj{np(str)} + obj{lexnp(str,sg,'głowa',natr)} + {cp(że)} + {preplexnp(pod,acc,sg,'topór',natr)}
kłaść: imperf: subj{np(str)} + obj{lexnp(str,sg,'kres',natr)} + {np(dat)}
kłaść: imperf: subj{np(str)} + obj{lexnp(str,sg,'krzyżyk',natr)} + {prepnp(na,loc)}
kłaść: imperf: subj{np(str)} + obj{lexnp(str,sg,'łapa',natr)} + {prepnp(na,loc)}
kłaść: imperf: subj{np(str)} + obj{lexnp(str,sg,'ręka',natr)} + {prepnp(na,loc)}
kłaść: imperf: subj{np(str)} + obj{lexnp(str,sg,'tama',natr)} + {np(dat)}
kłaść: imperf: subj{np(str)} + obj{np(str)} + {lexnp(inst,sg,'trup',natr)}
kłaść: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {lexnp(inst,sg,'łopata',natr)}
kłaść: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'karb',ratr)}
kłaść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
kłaść: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
kłaść: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
kłaść się: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
kłaść się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
kłaść się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
kłaść się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
kłaść się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
kłębić się: imperf: {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)} + {or}
kłębić się: imperf: {np(dat)} + {prepnp(od,gen)} + {preplexnp(w,loc,_,'głowa',natr)}
kłębić się: imperf: {prepnp(od,gen)} + {xp(locat)}
kłębić się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
kłębić się: imperf: subj{np(str)} + {prepnp(od,gen)}
kłębić się: imperf: subj{np(str)} + {xp(locat)}
kłócić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
kłócić się: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
kłócić się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
kłócić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
kłócić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
kłócić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
kłócić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
kłócić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(z powodu)}
kłócić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
kłócić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
kłócić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
kłuć: imperf: {np(str)} + {xp(locat)}
kłuć: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
kłuć: imperf: subj{np(str)} + {np(str)} + {xp(locat)}
kłuć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
kłuć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
knuć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(z,inst)}
kochać: imperf: subj,controller{np(str)} + controllee{infp(_)}
kochać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
kochać się: imperf: subj{np(str)} + {prepnp(w,loc)}
kochać się: imperf: subj{np(str)} + {prepnp(z,inst)}
koczować: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
kodować: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {xp(locat)}
kodować: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {xp(locat)}
kodować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kodować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
kodować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
koić: imperf: subj{np(str)} + {np(inst)} + {refl}
koić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
koić się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
kojarzyć: imperf: subj{np(str)} + {cp(int); cp(że)}
kojarzyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
kojarzyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
kojarzyć: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że); prepncp(z,inst,żeby)}
kojarzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
kojarzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst); prepncp(z,inst,że)}
kojarzyć się: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
kojarzyć się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
kojarzyć się: imperf: subj{cp(jak)} + {np(dat)} + {advp(misc)}
kojarzyć się: imperf: subj{cp(że)} + {np(dat)}
kojarzyć się: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,jak); prepncp(z,inst,jakby); prepncp(z,inst,że); prepncp(z,inst,żeby)}
kojarzyć się: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
kojarzyć się: imperf: subj{np(str)} + {prepnp(dla,gen)} + {advp(misc)}
kojarzyć się: imperf: subj{np(str)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
kojarzyć się: imperf: subj{np(str)} + {prepnp(u,gen)} + {advp(misc)}
kojarzyć się: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(z,inst)}
kojarzyć się: imperf: subj{np(str)} + {prepnp(w,acc)}
kojarzyć się: imperf: subj{np(str)} + {prepnp(w,loc)} + {advp(misc)}
kojarzyć się: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
kokietować: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
kokietować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
kokietować: imperf: subj{np(str)} + {or}
kolaborować: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
kolekcjonować: imperf: subj{np(str)} + obj{np(str)}
kolidować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że); prepncp(z,inst,żeby)}
kolportować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
kołatać: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
kołatać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
kołatać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
kołatać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
kołatać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
kołatać: imperf: subj{np(str)} + {prepnp(w,acc)}
kołatać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
kołatać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
kołatać się: imperf: subj{np(str)} + {np(inst)}
kołatać się: imperf: subj{np(str)} + {xp(perl)}
kołować: imperf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
kołować: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
kołować: imperf: subj{np(str)} + {np(inst)}
kołować: imperf: subj{np(str)} + obj{np(str)}
kołować: imperf: subj{np(str)} + {prepnp(za,inst)}
kołować się: imperf: {np(dat)} + {prepnp(od,gen)} + {prepnp(w,loc)}
kołysać: imperf: subj{np(str)} + {np(inst)}
kołysać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kołysać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
kołysać się: imperf: subj{np(str)} + {prepnp(na,loc)}
kołysać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
kołysać się: imperf: subj{np(str)} + {xp(locat)}
kombinować: imperf: subj{np(str)} + {cp(int)} + {lexnp(dat,_,'siebie',natr)}
kombinować: imperf: subj{np(str)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)}
kombinować: imperf: subj{np(str)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
kombinować: imperf: subj{np(str)} + {lexnp(dat,_,'siebie',natr)} + {or}
kombinować: imperf: subj{np(str)} + obj{np(str)} + {lexnp(dat,_,'siebie',natr)}
kombinować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
kombinować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
kombinować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
kombinować: imperf: subj{np(str)} + {prepnp(przy,loc)} + {nonch}
komenderować: imperf: subj{np(str)} + {cp(żeby)}
komenderować: imperf: subj{np(str)} + {np(inst)}
komenderować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
komenderować: imperf: subj{np(str)} + {or}
komentować: imperf: subj{np(str)} + obj{np(str)} + {or}
kompletować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
kompletować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
kompletować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
kompletować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
komplikować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
komplikować się: imperf: subj{np(str)}
komponować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
komponować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
komponować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
komponować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
komponować się: imperf: subj{np(str)} + {np(inst)}
komponować się: imperf: subj{np(str)} + {prepnp(do,gen)}
komponować się: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
komponować się: imperf: subj{np(str)} + {xp(locat)}
kompromitować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
kompromitować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
komunikować: imperf: subj{np(str)} + {np(dat)} + {or}
komunikować: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
komunikować: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)}
komunikować: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
komunikować się: imperf: subj{np(str)} + {prepnp(z,inst)}
konać: imperf: subj{np(str)} + {prepnp(na,acc)}
konać: imperf: subj{np(str)} + {prepnp(od,gen)}
konać: imperf: subj{np(str)} + {prepnp(wskutek,gen)}
konać: imperf: subj{np(str)} + {prepnp(z,gen)}
koncentrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że); prepncp(na,loc,żeby)}
koncentrować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
koncentrować się: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że); prepncp(na,loc,żeby)}
koncentrować się: imperf: subj{np(str)} + {prepnp(wokół,gen); prepncp(wokół,gen,int); prepncp(wokół,gen,że); prepncp(wokół,gen,żeby)}
koncentrować się: imperf: subj{np(str)} + {xp(locat)}
koncertować: imperf: subj{np(str)} + {xp(locat)}
konferować: imperf: subj{np(str)} + {prepnp(co do,gen)} + {prepnp(z,inst)}
konferować: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)} + {prepnp(z,inst)}
konferować: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
konferować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
konferować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
konferować: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
konferować: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
konferować: imperf: subj{np(str)} + {prepnp(z,inst)} + {or}
konfrontować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
konfrontować się: imperf: subj{np(str)} + {prepnp(z,inst)}
konkurować: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
konkurować: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
konkurować: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
konserwować: imperf: subj{np(str)} + {np(inst)} + {refl}
konserwować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
konserwować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
konsolidować: imperf: subj{np(str)} + obj{np(str)}
konsolidować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
konsolidować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
konsolidować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
konsolidować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
konsolidować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
konsolidować się: imperf: subj{np(str)} + {prepnp(pod,inst)}
konsolidować się: imperf: subj{np(str)} + {prepnp(w,acc)}
konsolidować się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
konsolidować się: imperf: subj{np(str)} + {xp(locat)}
konstruować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
konsultować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,inst)}
konsultować się: imperf: subj{np(str)} + {prepnp(z,inst)}
konsumować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kontaktować: imperf: subj{np(str)}
kontaktować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
kontaktować się: imperf: subj{np(str)} + {prepnp(przez,acc)} + {prepnp(z,inst)} + {comprepnp(na temat)}
kontaktować się: imperf: subj{np(str)} + {prepnp(przez,acc)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
kontemplować: imperf: subj{np(str)} + {cp(int)}
kontemplować: imperf: subj{np(str)} + {cp(że)}
kontemplować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
kontemplować: imperf: subj{np(str)} + {or}
kontrastować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(z,inst)}
kontrolować: imperf: subj{np(str)} + {cp(int)} + {refl}
kontrolować: imperf: subj{np(str)} + {cp(że)}
kontrolować: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
kontrolować: imperf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
kontrolować: imperf: subj{np(str)} + {refl}
kontynuować: imperf: subj{np(str)} + obj{np(str)} + {or}
kończyć: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
kończyć: imperf: subj,controller{np(str)} + controllee{xp(mod)}
kończyć: imperf: subj{np(str)} + {np(str)}
kończyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kończyć: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
kończyć: imperf: subj{np(str)} + {prepnp(z,inst)}
kończyć: imperf: subj{np(str)} + {xp(locat)}
kończyć się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
kończyć się: imperf: subj{np(str)} + {np(inst)}
kończyć się: imperf: subj{np(str)} + {prepnp(na,acc)}
kończyć się: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
koordynować: imperf: subj{np(str)} + {np(inst)}
koordynować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
kopać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
kopać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
kopać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
kopać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc); prepnp(w,acc)}
kopać się: imperf: subj{np(str)} + {prepnp(przez,acc)} + {prepnp(z,inst)}
kopać się: imperf: subj{np(str)} + {xp(adl)}
kopiować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kopnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
kopnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
kopnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
kopnąć się: perf: subj{np(str)} + {xp(adl)}
korcić: imperf: controller{np(str)} + controllee{infp(_)}
korcić: imperf: {np(str)} + {cp(że)}
korcić: imperf: {np(str)} + {cp(żeby)}
korcić: imperf: {np(str)} + {prepnp(do,gen)}
korcić: imperf: {np(str)} + {prepnp(na,acc)}
korcić: imperf: subj{np(str); ncp(str,że)} + {np(str)}
korespondować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)} + {advp(misc)}
korespondować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
korespondować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
korespondować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
korygować: imperf: subj{np(str)} + {cp(że)}
korygować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
korygować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
korygować: imperf: subj{np(str)} + {or}
korzystać: imperf: subj{np(str)} + {cp(że)}
korzystać: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
korzystać: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
kosić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
kosztować: imperf: subj{np(str)} + {np(str)} + {np(str)}
kosztować: imperf: subj{np(str)} + obj{np(part)}
kotłować: imperf: subj{np(str)} + obj{np(str)}
kotłować: imperf: subj{np(str)} + {prepnp(w,loc)}
kotłować się: imperf: {np(dat)} + {prepnp(od,gen)} + {xp(locat)}
kotłować się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
kotłować się: imperf: subj{np(str)} + {prepnp(w,loc)}
kotłować się: imperf: subj{np(str)} + {prepnp(z,inst)}
kpić: imperf: subj{np(str)} + {prepncp(z,gen,że)}
kpić: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
kpić: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
krajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
krajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
krajać się: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)}
krakać: imperf: subj{np(str)} + {cp(że)}
krakać: imperf: subj{np(str)} + {or}
krakać: imperf: subj{np(str)} + {prepnp(na,acc)}
krakać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
kraść: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
kraść: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
krążyć: imperf: subj{np(str)} + {prepnp(po,loc)}
krążyć: imperf: subj{np(str)} + {prepnp(wokół,gen); prepncp(wokół,gen,int); prepncp(wokół,gen,że); prepncp(wokół,gen,żeby)}
krążyć: imperf: subj{np(str)} + {xp(locat)}
krążyć: imperf: subj{np(str)} + {xp(perl)}
kreować: imperf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + {refl}
kreować: imperf: subj,controller{np(str)} + controllee{prepnp(na,acc)} + {refl}
kreować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)}
kreować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(na,acc)}
kreować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
kreślić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
kręcić: imperf: subj{np(str)} + {np(dat)} + {np(str)}
kręcić: imperf: subj{np(str)} + {np(inst)} + {or}
kręcić: imperf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
kręcić się: imperf: {np(dat)} + {preplexnp(w,loc,sg,'głowa',atr)}
kręcić się: imperf: subj{np(str)} + {np(dat)}
kręcić się: imperf: subj{np(str)} + {prepnp(koło,gen)}
kręcić się: imperf: subj{np(str)} + {prepnp(przy,loc)}
kręcić się: imperf: subj{np(str)} + {prepnp(wokół,gen); prepncp(wokół,gen,int); prepncp(wokół,gen,że); prepncp(wokół,gen,żeby)}
kręcić się: imperf: subj{np(str)} + {prepnp(za,inst)}
kręcić się: imperf: subj{np(str)} + {xp(locat)}
krępować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
krępować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
krępować się: imperf: subj{np(str)} + {cp(że)}
krępować się: imperf: subj{np(str)} + {infp(_)}
krępować się: imperf: subj{np(str)} + {np(gen); ncp(gen,że)}
krępować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
krępować się: imperf: subj{np(str)} + {prepnp(w,loc)}
kroczyć: imperf: subj{np(str)} + {prepnp(do,gen)}
kroczyć: imperf: subj{np(str)} + {prepnp(ku,dat)}
kroczyć: imperf: subj{np(str)} + {xp(adl)} + {xp(perl)}
kroić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
kroić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
kroić się: imperf: subj{np(str)} + {np(dat)}
kropić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kropić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
kropić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
kropić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
kropić: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
królować: imperf: subj{np(str)} + {np(dat)}
królować: imperf: subj{np(str)} + {prepnp(nad,inst)}
królować: imperf: subj{np(str)} + {xp(locat)}
kruszyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kruszyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
kruszyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
kruszyć: imperf: subj{np(str)} + {prepncp(o,acc,int)} + {lexnp(str,_,'kopia',natr)}
kruszyć: imperf: subj{np(str)} + {prepncp(o,acc,żeby)} + {lexnp(str,_,'kopia',natr)}
kruszyć: imperf: subj{np(str)} + {prepncp(o,acc,że)} + {lexnp(str,_,'kopia',natr)}
kruszyć: imperf: subj{np(str)} + {prepnp(o,acc)} + {lexnp(str,_,'kopia',natr)}
kruszyć się: imperf: subj{np(str)} + {prepnp(na,acc)}
kruszyć się: imperf: subj{np(str)} + {prepnp(od,gen)}
kruszyć się: imperf: subj{np(str)} + {prepnp(pod,inst)}
krwawić: imperf: subj{lexnp(str,_,'serce',ratr)} + {comprepnp(z powodu)}
krwawić: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)} + {comprepnp(z powodu)}
krwawić: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)} + {cp(gdy)}
krwawić: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)} + {cp(jak)}
krwawić: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)} + {cp(jeśli)}
krwawić: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)} + {cp(kiedy)}
krwawić: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)} + {cp(że)}
krwawić: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)} + {prepnp(z,gen)}
krwawić: imperf: subj{lexnp(str,sg,'serce',ratr)} + {cp(gdy)}
krwawić: imperf: subj{lexnp(str,sg,'serce',ratr)} + {cp(jak)}
krwawić: imperf: subj{lexnp(str,sg,'serce',ratr)} + {cp(kiedy)}
krwawić: imperf: subj{lexnp(str,sg,'serce',ratr)} + {cp(że)}
krwawić: imperf: subj{lexnp(str,sg,'serce',ratr)} + {prepnp(z,gen)}
krwawić: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
krwawić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
krwawić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
krwawić: imperf: subj{np(str)} + {xp(adl)}
krwawić: imperf: subj{np(str)} + {xp(perl)}
krwawić się: imperf: subj{lexnp(str,sg,'serce',natr)} + {cp(jak)}
krwawić się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'serce',natr)}
krwawić się: imperf: subj{np(str)} + {np(inst)}
kryć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
kryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {xp(locat)}
kryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
kryć: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
kryć się: perf: subj{np(str)} + {prepnp(pod,inst)}
kryć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,inst)}
kryć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {xp(locat)}
kryć się: perf: subj{np(str)} + {prepnp(w,loc)}
kryć się: perf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,że)}
krystalizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
krystalizować się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
krytykować: imperf: subj{np(str)} + {cp(int)}
krytykować: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(z powodu)}
krytykować: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
krytykować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
krytykować: imperf: subj{np(str)} + obj{np(str)} + {or}
krytykować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
krzątać się: imperf: subj{np(str)} + {prepnp(koło,gen)}
krzątać się: imperf: subj{np(str)} + {prepnp(przy,loc)}
krzątać się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
krzątać się: imperf: subj{np(str)} + {xp(locat)}
krzepić: imperf: subj{np(str)} + {np(inst)} + {refl}
krzepić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
krzewić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
krzewić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
krzewić się: imperf: subj{np(str)} + {prepnp(w,loc)}
krzewić się: imperf: subj{np(str)} + {xp(locat)}
krztusić: imperf: subj{np(str)} + obj{np(str)} + {or}
krztusić się: imperf: subj{np(str)} + {np(inst)} + {or}
krztusić się: imperf: subj{np(str)} + {prepnp(od,gen)} + {or}
krztusić się: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
krzyczeć: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
krzyczeć: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
krzyczeć: imperf: subj{np(str)} + {np(dat)} + {np(str)}
krzyczeć: imperf: subj{np(str)} + {np(str); cp(że); cp(żeby)} + {prepnp(do,gen)}
krzyczeć: imperf: subj{np(str)} + {np(str)} + {prepnp(za,acc)}
krzyczeć: imperf: subj{np(str)} + {np(str)} + {prepnp(za,inst)}
krzyczeć: imperf: subj{np(str)} + obj{or} + {np(dat)}
krzyczeć: imperf: subj{np(str)} + obj{or} + {prepnp(do,gen)}
krzyczeć: imperf: subj{np(str)} + {prepncp(o,loc,żeby)}
krzyczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
krzyczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
krzyczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
krzyczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {nonch}
krzyczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
krzyczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
krzyczeć: imperf: subj{np(str)} + {prepnp(o,acc)}
krzyczeć: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
krzyczeć: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
krzyczeć: imperf: subj{np(str)} + {prepnp(za,inst)} + {cp(że)}
krzyczeć: imperf: subj{np(str)} + {prepnp(za,inst)} + {cp(żeby)}
krzyczeć: imperf: subj{np(str)} + {prepnp(za,inst)} + {or}
krzyczeć: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
krzyknąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
krzyknąć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
krzyknąć: perf: subj{np(str)} + {np(dat)} + {or}
krzyknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
krzyknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
krzyknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
krzyknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
krzyknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
krzyknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że); cp(żeby)}
krzyknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
krzyknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
krzyknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
krzyknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
krzyknąć: perf: subj{np(str)} + {prepnp(o,acc)}
krzyknąć: perf: subj{np(str)} + {prepnp(o,loc)}
krzyknąć: perf: subj{np(str)} + {prepnp(przeciw,dat)}
krzyknąć: perf: subj{np(str)} + {prepnp(za,inst)} + {cp(że)}
krzyknąć: perf: subj{np(str)} + {prepnp(za,inst)} + {cp(żeby)}
krzyknąć: perf: subj{np(str)} + {prepnp(za,inst)} + {or}
krzyknąć: perf: subj{np(str)} + {prepnp(z,gen)} + {or}
krzywdzić: imperf: subj{np(str); cp(że); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
krzywdzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
krzywić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
krzywić się: imperf: subj{np(str)} + {np(dat)}
krzywić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
krzywić się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
krzyżować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
krzyżować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
krzyżować się: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
kształcić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
kształcić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
kształcić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
kształcić się: imperf: subj{np(str)} + {prepnp(na,acc)}
kształcić się: imperf: subj{np(str)} + {prepnp(na,loc)}
kształcić się: imperf: subj{np(str)} + {prepnp(w,loc)}
kształtować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kształtować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
kształtować się: imperf: subj{np(str)} + {np(inst)}
kształtować się: imperf: subj{np(str)} + {xp(locat)}
kucać: imperf: subj{np(str)} + {prepnp(na,loc)}
kucać: imperf: subj{np(str)} + {xp(locat)}
kucnąć: perf: subj{np(str)} + {prepnp(na,loc)}
kucnąć: perf: subj{np(str)} + {xp(locat)}
kuć: perf: subj{np(str)} + obj{lexnp(str,sg,'żelazo',natr)} + {fixed('póki gorące')}
kuć: perf: subj{np(str)} + obj{np(str)} + {fixed('na blachę')}
kuć: perf: subj{np(str)} + obj{np(str)} + {fixed('na cztery nogi')}
kuć: perf: subj{np(str)} + obj{np(str)} + {fixed('na pamięć')}
kuć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
kuć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
kuć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
kuć: perf: subj{xp(locat)} + obj{np(str)}
kuleć: imperf: subj{np(str)} + {prepnp(na,acc)}
kuleć: imperf: subj{np(str)} + {prepnp(na,loc)}
kultywować: imperf: subj{np(str)} + obj{np(str)}
kumać: imperf: subj{np(str)} + {cp(int)}
kumać: imperf: subj{np(str)} + {cp(że)}
kumać: imperf: subj{np(str)} + {np(str)}
kumać się: imperf: subj{np(str)} + {prepnp(z,inst)}
kumulować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby); prepncp(po,acc,żeby)}
kumulować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
kumulować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
kumulować się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
kupić: perf: subj{np(str)} + {np(dat)} + {np(part)}
kupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(od,gen)}
kupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(u,gen)}
kupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(za,acc)}
kupić: perf: subj{np(str)} + obj{np(part)} + {xp(locat)}
kupić: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
kupić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
kupować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
kupować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
kupować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kupować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
kupować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
kupować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
kupować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
kurczyć: imperf: subj{np(str)} + obj{np(str)}
kurczyć się: imperf: subj{np(str)} + {prepnp(z,gen)}
kurczyć się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
kursować: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
kursować: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
kursować: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
kusić: imperf: subj{cp(żeby)} + {np(str)}
kusić: imperf: subj{np(str)} + {cp(że)}
kusić: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
kusić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
kusić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
kusić: imperf: subj{np(str)} + {or}
kusić się: imperf: subj,controller{np(str)} + controllee{infp(_)}
kusić się: imperf: subj{np(str)} + {prepnp(na,acc)}
kusić się: imperf: subj{np(str)} + {prepnp(o,acc)}
kwalifikować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
kwalifikować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
kwalifikować: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
kwalifikować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
kwalifikować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
kwalifikować się: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)}
kwalifikować się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
kwalifikować się: imperf: subj{np(str)} + {cp(żeby)}
kwalifikować się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
kwalifikować się: imperf: subj{np(str)} + {prepnp(na,acc)}
kwapić się: imperf: subj,controller{np(str)} + controllee{infp(_)}
kwapić się: imperf: subj{np(str)} + {cp(żeby)}
kwapić się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
kwapić się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)}
kwapić się: imperf: subj{np(str)} + {xp(adl)}
kwaterować: imperf: subj{np(str)} + {xp(locat)}
kwaterować się: imperf: subj{np(str)} + {xp(locat)}
kwestionować: imperf: subj{np(str)} + {cp(jakoby)}
kwestionować: imperf: subj{np(str)} + obj{cp(int)}
kwestionować: imperf: subj{np(str)} + obj{cp(że)}
kwestionować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
kwestować: imperf: subj{np(str)} + {prepnp(na,acc)}
kwitnąć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
kwitnąć: imperf: subj{np(str)} + {prepnp(w,loc)}
kwitować: imperf: subj{np(str)} + {cp(że)}
kwitować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
kwitować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
kwitować: imperf: subj{np(str)} + {or}
lać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
lać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
lać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
lać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
lać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
lać się: imperf: {np(dat)} + {preplexnp(na,acc,pl,'głowa',natr)}
lać się: imperf: {np(dat)} + {xp(abl)}
lać się: imperf: {np(inst)} + {prepnp(z,gen)}
lać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
lać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
lać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,pl,'głowa',natr)}
lać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(przez,acc,pl,'ręka',natr)}
lać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
lać się: imperf: subj{np(str)} + {xp(adl)}
lać się: imperf: subj{np(str)} + {xp(locat)}
lamentować: imperf: subj{np(str)} + {comprepnp(z powodu)}
lamentować: imperf: subj{np(str)} + {cp(że)}
lamentować: imperf: subj{np(str)} + {or}
lamentować: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
lamentować: imperf: subj{np(str)} + {prepnp(po,loc)}
lansować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
lansować: imperf: subj{np(str)} + {cp(że)}
lansować: imperf: subj{np(str)} + {np(inst)} + {refl}
lansować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
lansować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
lansować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
lansować: imperf: subj{np(str)} + {prepnp(na,acc)} + {refl}
lansować: imperf: subj{np(str)} + {xp(locat)} + {refl}
latać: imperf: subj{np(str)} + {np(dat)}
latać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
latać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
latać: imperf: subj{np(str)} + {prepnp(na,loc)}
latać: imperf: subj{np(str)} + {prepnp(za,inst)}
latać: imperf: subj{np(str)} + {prepnp(z,inst)}
lawirować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
lądować: imperf: subj{np(str)} + {advp(misc)}
lądować: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
lądować: imperf: subj{np(str)} + {xp(locat)}
lecieć: imperf: {np(dat)} + {advp(misc)}
lecieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
lecieć: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
lecieć: imperf: subj{np(str)} + {prepnp(do,gen)}
lecieć: imperf: subj{np(str)} + {prepnp(na,acc)}
lecieć: imperf: subj{np(str)} + {prepnp(na,loc)}
lecieć: imperf: subj{np(str)} + {prepnp(za,inst)}
lecieć: imperf: subj{np(str)} + {prepnp(z,gen)}
leczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
leczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
leczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
leczyć się: imperf: subj{np(str)} + {np(dat)}
leczyć się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
leczyć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(u,gen)}
leczyć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(locat)}
leczyć się: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(z,gen)}
leczyć się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
leczyć się: imperf: subj{np(str)} + {prepnp(z,gen)} + {xp(locat)}
legalizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
legalizować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
legalizować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
legalizować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pośrednictwo',ratr)}
legalizować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
legalizować: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
legalizować się: imperf: subj{np(str)} + {xp(mod)}
legitymować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
legitymować się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
legitymować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
legitymować się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
lekceważyć: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
lenić: imperf: subj{np(str)} + obj{np(str)}
lenić się: imperf: subj,controller{np(str)} + controllee{infp(_)}
lenić się: imperf: subj{np(str)} + {prepnp(do,gen)}
lenić się: imperf: subj{np(str)} + {prepnp(z,inst)}
lenić się: imperf: subj{np(str)} + {xp(locat)}
lenić się: imperf: subj{np(str)} + {xp(temp)}
lepić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
lepić: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
lepić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
lepić się: imperf: subj{np(str)} + {prepnp(od,gen)}
lepić się: imperf: subj{np(str)} + {prepnp(z,gen)}
leżeć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(na,loc)}
leżeć: imperf: subj{np(str); ncp(str,żeby)} + {prepnp(w,loc)}
leżeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
leżeć: imperf: subj{np(str)} + {prepnp(u,gen)}
leżeć: imperf: subj{np(str)} + {xp(locat)}
lękać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
lękać się: imperf: subj{np(str)} + {cp(czy)}
lękać się: imperf: subj{np(str)} + {cp(że)}
lękać się: imperf: subj{np(str)} + {cp(żeby)}
lękać się: imperf: subj{np(str)} + {np(gen); ncp(str,że); ncp(str,żeby)}
lękać się: imperf: subj{np(str)} + {prepncp(o,acc,czy)}
lękać się: imperf: subj{np(str)} + {prepncp(o,acc,że)}
lękać się: imperf: subj{np(str)} + {prepnp(o,acc)}
lgnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
lgnąć: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
lgnąć: imperf: subj{np(str)} + {prepnp(w,loc)}
licytować: imperf: subj{np(str)} + obj{np(str)}
licytować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int)} + {prepnp(z,inst)}
licytować się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int)} + {prepnp(z,inst)}
licytować się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
liczyć: imperf: subj{np(str)} + {np(str)}
liczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
liczyć: imperf: subj{np(str)} + {prepnp(do,gen)}
liczyć: imperf: subj{np(str)} + {prepnp(na,acc); cp(że); prepncp(na,acc,że)}
liczyć się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
likwidować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
likwidować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
likwidować: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
litować się: imperf: subj{np(str)} + {cp(że)}
litować się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,że)} + {or}
lizać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
lizać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
lizać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
lizać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
lizać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
lizać się: imperf: subj{np(str)} + {prepnp(z,gen)}
lizać się: imperf: subj{np(str)} + {prepnp(z,inst)}
lokalizować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
lokalizować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
lokalizować się: imperf: subj{np(str)} + {xp(locat)}
lokować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
lokować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
lokować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
lokować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
lokować się: imperf: subj{np(str)} + {prepnp(u,gen)}
lokować się: imperf: subj{np(str)} + {xp(locat)}
losować: imperf: subj{np(str)} + {cp(int)}
losować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
losować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
losować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
lśnić: imperf: subj{np(str)} + {np(inst)}
lśnić: imperf: subj{np(str)} + {prepnp(od,gen)}
lśnić się: imperf: subj{np(str)} + {np(inst)}
lśnić się: imperf: subj{np(str)} + {prepnp(od,gen)}
lubić: imperf: subj,controller{np(str)} + controllee{np(str); cp(gdy); cp(jak); cp(jeśli); cp(kiedy); cp(że); cp(żeby); ncp(str,int); ncp(str,jak); ncp(str,że); infp(_)}
lubić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
lubić się: imperf: subj{np(str)} + {prepnp(z,inst)}
lubować się: imperf: subj{np(str)} + {np(inst)}
lubować się: imperf: subj{np(str)} + {prepnp(w,loc)}
lustrować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {xp(mod)} + {or}
lżyć: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
lżyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
lżyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
lżyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
ładować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
ładować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ładować się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,acc,sg,'życie',ratr)} + {preplexnp(z,inst,pl,'but',natr)}
ładować się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
ładować się: imperf: subj{np(str)} + {prepnp(w,acc)}
łagodzić: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
łamać: imperf: {np(str)} + {prepnp(w,loc)}
łamać: imperf: subj{np(str)} + {cp(int)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,_,'głowa',natr)}
łamać: imperf: subj{np(str)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,_,'głowa',natr)}
łamać: imperf: subj{np(str)} + {cp(że)} + {lexnp(str,pl,'ręka',natr)}
łamać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,_,'głowa',natr)} + {or}
łamać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
łamać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
łamać: imperf: subj{np(str)} + {prepnp(nad,inst)} + {lexnp(str,pl,'ręka',natr)}
łamać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,_,'głowa',natr)}
łamać: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,pl,'ząb',atr)}
łamać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(pod,inst)}
łamać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
łamać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
łamać się: imperf: subj{np(str)} + {prepnp(na,loc)}
łamać się: imperf: subj{np(str)} + {prepnp(o,acc)}
łamać się: imperf: subj{np(str)} + {prepnp(w,loc)}
łapać: imperf: subj{np(str)} + {cp(int)}
łapać: imperf: subj{np(str)} + {cp(że)}
łapać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
łapać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
łapać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
łapać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
łapać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,jak); prepncp(na,loc,że); prepncp(na,loc,żeby2)}
łapać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
łapać się: imperf: subj{np(str)} + {np(gen)}
łapać się: imperf: subj{np(str)} + {prepnp(na,acc)}
łapać się: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,jak); prepncp(na,loc,że); prepncp(na,loc,żeby2)}
łapać się: imperf: subj{np(str)} + {prepnp(w,acc)}
łapać się: imperf: subj{np(str)} + {prepnp(za,acc)}
łasić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen)}
łasić się: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(mod)}
łaskotać: imperf: {np(str)} + {xp(locat)}
łaskotać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)} + {refl}
łaskotać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)} + {refl}
łaskotać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
łaskotać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
łatać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
łazić: imperf: subj,controller{np(str)} + controllee{infp(_)} + {xp(adl)}
łazić: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(po,loc,sg,'głowa',natr)}
łazić: imperf: subj{cp(żeby)} + {prepnp(za,inst)}
łazić: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(po,loc,sg,'głowa',natr)}
łazić: imperf: subj{cp(że)} + {prepnp(za,inst)}
łazić: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
łazić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
łazić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
łazić: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {xp(abl)} + {xp(perl)}
łazić: imperf: subj{np(str)} + {prepnp(koło,gen)}
łazić: imperf: subj{np(str)} + {prepnp(na,acc); xp(adl)}
łazić: imperf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
łazić: imperf: subj{np(str)} + {prepnp(w,loc)}
łazić: imperf: subj{np(str)} + {prepnp(za,inst)}
łazić: imperf: subj{np(str)} + {prepnp(z,inst)}
łączyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,inst)}
łączyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
łączyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
łączyć się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
łączyć się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
łączyć się: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
łgać: imperf: subj{np(str)} + {cp(że)}
łgać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,acc,pl,'oko',ratr)}
łgać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {xp(mod)}
łgać: imperf: subj{np(str)} + {np(dat)} + {xp(mod)} + {or}
łkać: imperf: subj{np(str)} + {cp(że)}
łkać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {advp(misc)}
łkać: imperf: subj{np(str)} + {prepnp(o,loc)}
łkać: imperf: subj{np(str)} + {prepnp(w,acc)} + {or}
łkać: imperf: subj{np(str)} + {xp(mod)} + {or}
łomotać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
łomotać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
łomotać: imperf: subj{np(str)} + {np(dat)} + {xp(mod)}
łomotać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
łomotać: imperf: subj{or} + {np(dat)} + {xp(locat)}
łomotać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
łomotać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
łopotać: imperf: subj{np(str)} + {np(inst)}
łopotać: imperf: subj{np(str)} + {prepnp(w,acc)}
łopotać: imperf: subj{np(str)} + {xp(locat)}
łowić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
łowić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
łowić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
łudzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {comprepnp(co do)}
łudzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {cp(że)}
łudzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
łudzić się: imperf: subj{cp(że)} + {np(dat)}
łudzić się: imperf: subj{np(str)} + {comprepnp(co do)}
łudzić się: imperf: subj{np(str)} + {cp(że)}
łudzić się: imperf: subj{np(str)} + {cp(żeby2)}
łudzić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
łupić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
łupić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
łupić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
łupić: imperf: subj{np(str)} + {prepnp(w,acc)}
łuszczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
łuszczyć się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
łuszczyć się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
łykać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(z,gen)}
łykać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
łyknąć: perf: subj{np(str)} + obj{np(part)} + {prepnp(z,gen)}
łyknąć: perf: subj{np(str)} + obj{np(part)} + {prepnp(z,gen)} + {lexnp(dat,_,'siebie',natr)}
łyknąć: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
łypać: imperf: subj{np(str)} + {prepnp(do,gen)} + {lexnp(inst,_,'oko',atr)}
łypać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(abl)} + {lexnp(inst,_,'oko',atr)}
łypać: imperf: subj{np(str)} + {xp(adl)} + {lexnp(inst,_,'oko',atr)}
łypnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {lexnp(inst,_,'oko',atr)}
łypnąć: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(abl)} + {lexnp(inst,_,'oko',atr)}
łypnąć: perf: subj{np(str)} + {xp(adl)} + {lexnp(inst,_,'oko',atr)}
macać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
macać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
macać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
macać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
macać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
macać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
macać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
macać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
macać: imperf: subj{np(str)} + {prepnp(za,inst)}
macać: imperf: subj{np(str)} + {xp(locat)} + {refl}
macać się: imperf: subj{np(str)} + {prepnp(z,inst)}
machać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
machać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
machać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
machać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
machać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
machać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {cp(że)}
machać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {cp(żeby)}
machać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(że)}
machać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(żeby)}
machać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
machać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {lexnp(inst,sg,'ręka',natr)}
machnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
machnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
machnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
machnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
machnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
machnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {cp(że)}
machnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {cp(żeby)}
machnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(że)}
machnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(żeby)}
machnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
machnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
machnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
machnąć: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {lexnp(inst,sg,'ręka',natr)}
machnąć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
machnąć się: perf: subj{np(str)} + {prepnp(za,acc)}
machnąć się: perf: subj{np(str)} + {xp(adl)}
maczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
maczać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
magazynować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
magazynować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)} + {xp(locat)}
magazynować się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
majaczyć: imperf: subj{cp(że)} + {np(dat)}
majaczyć: imperf: subj{np(str)} + {cp(że)}
majaczyć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
majaczyć: imperf: subj{np(str)} + {np(str)}
majaczyć: imperf: subj{or} + {np(dat)}
majaczyć się: imperf: subj{cp(jakby)} + {np(dat)}
majaczyć się: imperf: subj{cp(że)} + {np(dat)}
majaczyć się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
majaczyć się: imperf: subj{or} + {np(dat)}
majstrować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przy,loc)}
majstrować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
majstrować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
majstrować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
majstrować: imperf: subj{np(str)} + {prepnp(nad,inst)}
maleć: imperf: subj{np(str)} + {preplexnp(w,loc,pl,'oko',ratr)}
maleć: imperf: subj{np(str)} + {prepnp(o,acc)}
malować: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
malować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
malować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
malować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
malować się: imperf: subj{np(str)} + {prepnp(w,loc)}
maltretować: imperf: subj{np(str)} + {np(inst)} + {refl}
maltretować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
mamić: imperf: subj{np(str)} + {cp(że)} + {refl}
mamić: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {refl}
mamić: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
mamić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
manewrować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
manewrować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
manewrować: imperf: subj{np(str)} + {xp(mod)}
manifestować: imperf: subj{np(str)} + {np(inst)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,żeby)}
manifestować: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,int); ncp(str,że)} + {np(inst)}
manifestować się: imperf: subj{np(str)} + {np(inst)}
manifestować się: imperf: subj{np(str)} + {prepnp(w,loc)}
manifestować się: imperf: subj{np(str)} + {xp(locat)}
manipulować: imperf: subj{np(str)} + {np(inst)} + {prepnp(przy,loc)}
marnotrawić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
marnotrawić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
marnotrawić się: imperf: subj{np(str)}
marnować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
marnować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)} + {lexnp(dat,_,'siebie',natr)}
marnować się: imperf: subj{np(str)}
marszczyć: imperf: subj{np(str)} + obj{np(str)}
marszczyć się: imperf: subj{np(str)} + {np(dat)}
marszczyć się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
marszczyć się: imperf: subj{np(str)} + {xp(locat)}
martwić: imperf: subj{cp(int)} + {np(str)}
martwić: imperf: subj{cp(że)} + {np(str)}
martwić: imperf: subj{np(str)} + {np(inst)} + {np(str)}
martwić się: imperf: subj{np(str)} + {comprepnp(z powodu)}
martwić się: imperf: subj{np(str)} + {cp(int)}
martwić się: imperf: subj{np(str)} + {cp(że)}
martwić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
martwić się: imperf: subj{np(str)} + {or}
martwić się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
marudzić: imperf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)}
marudzić: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w kwestii)}
marudzić: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w sprawie)}
marudzić: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
marudzić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
marudzić: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
marudzić: imperf: subj{np(str)} + {np(dat)} + {or}
marudzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,że)}
marudzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)} + {nonch}
marudzić: imperf: subj{np(str)} + {prepnp(z,inst)}
marznąć: imperf: subj{np(str)} + {fixed('do szpiku kości')}
marznąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
marznąć: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'kość',natr)}
marznąć: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'sopel',natr)}
marzyć: imperf: subj,controller{np(str)} + controllee{infp(_)}
marzyć: imperf: subj{np(str)} + {cp(że)}
marzyć: imperf: subj{np(str)} + {or}
marzyć: imperf: subj{np(str)} + {prepnp(o,loc); cp(żeby); prepncp(o,loc,że); prepncp(o,loc,żeby)}
marzyć się: imperf: subj,controllee{infp(_)} + controller{np(dat)}
marzyć się: imperf: subj{cp(żeby)} + {np(dat)}
marzyć się: imperf: subj{cp(że)} + {np(dat)}
marzyć się: imperf: subj{np(str)} + {np(dat)}
maskować: imperf: subj{np(str)} + {np(inst)} + {refl}
maskować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
maskować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
maskować: imperf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
masować: imperf: subj{np(str)} + {np(inst)} + {refl}
masować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
masować: imperf: subj{np(str)} + {prepnp(po,loc)} + {refl}
maszerować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
maszerować: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
maszerować: imperf: subj{np(str)} + {xp(perl)}
materializować się: imperf: subj{np(str)} + {xp(locat)}
mawiać: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{np(nom)}
mawiać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {cp(że)}
mawiać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {or}
mawiać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
mawiać: imperf: subj{np(str)} + {prepnp(o,loc)} + {advp(pron)}
mazać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
mazać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
mazać się: imperf: subj{np(str)} + {np(inst)}
mącić: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
mącić: imperf: subj{np(str)} + obj{np(str)}
mącić: imperf: subj{np(str)} + {prepnp(na,loc)}
mącić: imperf: subj{np(str)} + {prepnp(w,loc)}
mącić się: imperf: {np(dat)} + {prepnp(od,gen)} + {prepnp(w,loc)}
mącić się: imperf: subj{np(str)}
mdleć: imperf: subj{lexnp(str,sg,'serce',natr)} + {prepnp(w,loc)}
mdleć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
mdleć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
mdlić: imperf: {np(str)} + {preplexnp(na,acc,sg,'myśl',atr)}
mdlić: imperf: {np(str)} + {preplexnp(na,acc,sg,'widok',atr)}
mdlić: imperf: {np(str)} + {prepnp(od,gen)}
mdlić: imperf: {np(str)} + {prepnp(z,gen)}
medytować: imperf: subj{np(str)} + {cp(int)}
medytować: imperf: subj{np(str)} + {or}
medytować: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
medytować: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
meldować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
meldować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
meldować: imperf: subj{np(str)} + {np(dat)} + {or}
meldować: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
meldować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
meldować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
meldować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
meldować: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
meldować: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
meldować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)}
meldować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
meldować się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
meldować się: imperf: subj{np(str)} + {prepnp(na,acc)}
meldować się: imperf: subj{np(str)} + {prepnp(u,gen)}
męczyć: imperf: subj{cp(kiedy)} + {np(str)}
męczyć: imperf: subj{cp(że)} + {np(str)}
męczyć: imperf: subj{np(str); ncp(str,że)} + {np(str)}
męczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
męczyć się: imperf: subj{np(str)} + {cp(że)}
męczyć się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
męczyć się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,żeby)}
męczyć się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
mianować: _: subj,controller{np(str)} + controllee{np(inst)} + {refl}
mianować: _: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
mianować: _: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
mianować: _: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
mianować: _: subj{np(str)} + {prepnp(na,acc)} + {refl}
miażdżyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
miąć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
miąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
miąć się: imperf: subj{np(str)}
mieć: imperf: subj,controller{E} + controllee{infp(_)}
mieć: imperf: subj,controller{np(str)} + controllee{infp(_)}
mieć: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,_,'ambicja',atr); lexnp(str,_,'możliwość',atr); lexnp(str,_,'podstawa',atr); lexnp(str,_,'powód',atr); lexnp(str,_,'szansa',atr); lexnp(str,sg,'chęć',atr); lexnp(str,sg,'cierpliwość',atr); lexnp(str,sg,'czas',atr); lexnp(str,sg,'czelność',atr); lexnp(str,sg,'fantazja',atr); lexnp(str,sg,'interes',atr); lexnp(str,sg,'kaprys',atr); lexnp(str,sg,'możność',atr); lexnp(str,sg,'nadzieja',atr); lexnp(str,sg,'nieszczęście',atr); lexnp(str,sg,'obowiązek',atr); lexnp(str,sg,'ochota',atr); lexnp(str,sg,'odwaga',atr); lexnp(str,sg,'okazja',atr); lexnp(str,sg,'pragnienie',atr); lexnp(str,sg,'prawo',atr); lexnp(str,sg,'przyjemność',atr); lexnp(str,sg,'serce',atr); lexnp(str,sg,'siła',atr); lexnp(str,sg,'sposobność',atr); lexnp(str,sg,'sumienie',atr); lexnp(str,sg,'szczęście',atr); lexnp(str,sg,'zamiar',atr); lexnp(str,sg,'zaszczyt',atr); lexnp(str,sg,'zdrowie',atr); lexnp(str,sg,'zwyczaj',atr); lexnp(str,sg,'śmiałość',atr)}
mieć: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,_,'przyczyna',atr)}
mieć: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'obyczaj',atr)}
mieć: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'pech',atr)}
mieć: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'polecenie',natr)}
mieć: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'rozkaz',natr)}
mieć: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,sg,'tendencja',atr)}
mieć: imperf: subj,controller{np(str)} + controllee{np(nom)} + {preplexnp(na,acc,sg,'imię',atr)}
mieć: imperf: subj,controller{np(str)} + controllee{np(nom)} + {preplexnp(na,acc,sg,'nazwisko',atr)}
mieć: imperf: subj,controller{np(str)} + controllee{prepadjp(za,acc)} + {refl}
mieć: imperf: subj,controller{np(str)} + controllee{prepnp(za,acc)} + {refl}
mieć: imperf: subj{np(str)} + {advp(misc)}
mieć: imperf: subj{np(str)} + {advp(misc)} + {preplexnp(w,loc,sg,'głowa',natr)}
mieć: imperf: subj{np(str)} + controller{cp(że)} + controllee{prepadjp(za,acc)} + {np(dat)}
mieć: imperf: subj{np(str)} + controller{np(str)} + controllee{prepadjp(za,acc)}
mieć: imperf: subj{np(str)} + controller{np(str)} + controllee{prepnp(za,acc)}
mieć: imperf: subj{np(str)} + controller{np(str); ncp(str,że)} + controllee{prepadjp(za,acc)} + {np(dat)}
mieć: imperf: subj{np(str)} + {ncp(str,że)} + {preplexnp(do,gen,_,'siebie',natr)}
mieć: imperf: subj{np(str)} + {np(str)} + {preplexnp(przed,inst,_,'siebie',natr)}
mieć: imperf: subj{np(str)} + {np(str)} + {preplexnp(za,inst,_,'siebie',natr)}
mieć: imperf: subj{np(str)} + {np(str)} + {preplexnp(z,gen,sg,'głowa',natr)}
mieć: imperf: subj{np(str)} + {np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
mieć: imperf: subj{np(str)} + {np(str)} + {prepnp(u,gen)}
mieć: imperf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
mieć: imperf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
mieć: imperf: subj{np(str)} + {np(str)} + {xp(locat)}
mieć: imperf: subj{np(str)} + {prepnp(na,acc)}
mieć: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,że); prepncp(przeciw,dat,żeby)} + {nonch}
mieć się: imperf: {prepadjp(ku,dat)}
mieć się: imperf: {prepnp(na,acc)}
mieć się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(do,gen)}
mieć się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)}
mieć się: imperf: subj{np(str)} + {prepadjp(ku,dat)}
mieć się: imperf: subj{np(str)} + {preplexnp(na,loc,sg,'baczność',natr)}
mieć się: imperf: subj{np(str)} + {prepnp(ku,dat)}
mienić: imperf: subj,controller{np(str)} + controllee{adjp(inst)} + {refl}
mienić: imperf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
mienić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
mienić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
mienić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
mienić się: imperf: subj{np(str)} + {np(inst)}
mienić się: imperf: subj{np(str)} + {prepnp(od,gen)}
mierzić: imperf: subj{cp(gdy)} + {np(str)}
mierzić: imperf: subj{cp(int)} + {np(str)}
mierzić: imperf: subj{cp(jak)} + {np(str)}
mierzić: imperf: subj{cp(jeśli)} + {np(str)}
mierzić: imperf: subj{cp(kiedy)} + {np(str)}
mierzić: imperf: subj{cp(że)} + {np(str)}
mierzić: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(str)}
mierzić: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
mierzyć: imperf: subj{np(str)} + {lexnp(str,pl,'siła',natr)} + {preplexnp(na,acc,pl,'zamiar',natr)}
mierzyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
mierzyć: imperf: subj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
mierzyć: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
mierzyć: imperf: subj{np(str)} + {np(str)}
mierzyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
mierzyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
mierzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
mierzyć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
mierzyć: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
mierzyć się: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
mieszać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',atr)}
mieszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
mieszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
mieszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
mieszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
mieszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
mieszać się: imperf: {np(dat)} + {preplexnp(w,loc,_,'głowa',atr)}
mieszać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
mieszać się: imperf: subj{np(str)} + {prepnp(do,gen)}
mieszać się: imperf: subj{np(str)} + {prepnp(w,acc)}
mieszkać: imperf: subj,controller{np(str)} + controllee{xp(mod)}
mieszkać: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
mieszkać: imperf: subj{np(str)} + {prepnp(z,inst)}
mieścić: imperf: subj{np(str)} + {np(str)}
mieścić się: imperf: subj{cp(int)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
mieścić się: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
mieścić się: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
mieścić się: imperf: subj{ncp(str,int)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
mieścić się: imperf: subj{ncp(str,żeby)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
mieścić się: imperf: subj{ncp(str,że)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
mieścić się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
mieścić się: imperf: subj{np(str)} + {prepnp(w,loc)}
mieścić się: imperf: subj{np(str)} + {xp(locat)}
miewać: imperf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(str,_,'chęć',atr); lexnp(str,_,'szansa',atr); lexnp(str,sg,'ochota',atr); lexnp(str,sg,'okazja',atr); lexnp(str,sg,'sposobność',atr); lexnp(str,sg,'zamiar',atr); lexnp(str,sg,'zwyczaj',atr)}
miewać: imperf: subj{np(str)} + {advp(misc)} + {preplexnp(w,acc,sg,'głowa',natr)}
miewać: imperf: subj{np(str)} + controller{cp(że)} + controllee{prepadjp(za,acc)} + {np(dat)}
miewać: imperf: subj{np(str)} + {ncp(str,że)} + {preplexnp(do,gen,_,'siebie',natr)}
miewać: imperf: subj{np(str)} + {np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
miewać: imperf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
miewać: imperf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
miewać: imperf: subj{np(str)} + {np(str)} + {xp(locat)}
miewać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
miewać: imperf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepadjp(za,acc)} + {np(dat)}
miewać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(przed,inst,_,'siebie',natr)}
miewać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,_,'siebie',natr)}
miewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
miewać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
miewać się: imperf: subj{np(str)} + {preplexnp(na,loc,sg,'baczność',natr)}
migać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
migać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
migać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
migać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
migać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
migać się: imperf: subj{np(str)} + {prepnp(od,gen)}
migać się: imperf: subj{np(str)} + {prepnp(z,inst)}
mignąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
mignąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
mignąć się: perf: subj{np(str)} + {prepnp(od,gen)}
migotać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
migotać: imperf: subj{np(str)} + {np(inst)}
migotać: imperf: subj{np(str)} + {prepnp(od,gen)}
mijać: imperf: subj{np(str)} + controller{np(dat)} + controllee{xp(mod)}
mijać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
mijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
mijać się: imperf: subj{np(str)} + {prepnp(z,inst)}
milczeć: imperf: subj,controller{np(str)} + controllee{prepnp(jak,str)} + {prepnp(o,loc); prepncp(o,loc,że)}
milczeć: imperf: subj{np(str)} + {cp(int)}
milczeć: imperf: subj{np(str)} + {cp(że)}
milczeć: imperf: subj{np(str)} + {prepncp(o,loc,int)}
milczeć: imperf: subj{np(str)} + {prepncp(o,loc,żeby)}
milknąć: perf: subj{np(str)}
minąć: perf: subj{np(str)} + controller{np(dat)} + controllee{xp(mod)}
minąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
minąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
minąć się: perf: subj{np(str)} + {prepnp(z,inst)}
miotać: imperf: {np(inst)} + {prepnp(po,loc)}
miotać: imperf: {np(inst)} + {xp(abl)} + {xp(adl)}
miotać: imperf: subj{np(str)} + obj{np(inst)} + {np(dat)} + {prepnp(w,acc)}
miotać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(na,acc)}
miotać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(o,acc)}
miotać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(po,loc)}
miotać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(z,gen)} + {xp(adl)}
miotać: imperf: subj{np(str)} + obj{np(inst)} + {xp(abl)} + {xp(adl)}
miotać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
miotać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
miotać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
miotać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {xp(adl)}
miotać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
miotać się: imperf: subj{np(str)} + {prepnp(między,inst)}
miotać się: imperf: subj{np(str)} + {prepnp(w,loc)}
miotać się: imperf: subj{np(str)} + {prepnp(z,gen)}
miotać się: imperf: subj{np(str)} + {prepnp(z,inst)}
miotać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
miotać się: imperf: subj{np(str)} + {xp(locat)}
mknąć: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
mknąć: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
mleć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
mleć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {xp(locat)}
mleć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
mleć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(locat)}
mnożyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
mnożyć się: imperf: subj{np(str)}
mobilizować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
mobilizować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
mobilizować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przeciw,dat)}
mobilizować się: imperf: subj{np(str)} + {np(inst)} + {cp(żeby)}
mobilizować się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
mobilizować się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
mocować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
mocować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
mocować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(za,inst)}
mocować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)} + {xp(locat)}
mocować się: imperf: subj{np(str)} + {prepnp(z,inst)}
moczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
moczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
moczyć: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
moczyć się: imperf: subj{np(str)} + {prepnp(w,loc)}
modelować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
modelować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
modelować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepnp(w,loc)}
modelować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
modelować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
modernizować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)} + {xp(mod)}
modernizować się: imperf: subj{np(str)} + {np(inst)} + {prepnp(pod,inst)} + {xp(mod)}
modlić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(o,acc); prepnp(za,acc); cp(żeby); prepncp(o,acc,że); prepncp(o,acc,żeby); prepncp(za,acc,że); prepncp(za,acc,żeby)} + {or}
modlić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(za,acc)} + {cp(żeby)}
modlić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(za,inst)} + {cp(żeby)}
modyfikować: imperf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(dat)} + {np(inst)}
modyfikować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
modyfikować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
modyfikować się: imperf: subj{np(str)}
monitorować: imperf: subj{np(str)} + {cp(int)}
monitorować: imperf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(inst)}
monitować: imperf: subj{np(str)} + {cp(int)}
monitować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
monitować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'kąt',ratr)}
monitować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
monitować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(z,inst,sg,'pomoc',ratr)}
montować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
montować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
mordować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
mordować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
mordować się: imperf: subj{np(str)} + {prepnp(z,inst)}
mościć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
mościć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
mościć się: imperf: subj{np(str)} + {xp(locat)}
motywować: imperf: subj{np(str)} + {cp(że)}
motywować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)}
motywować: imperf: subj{np(str)} + {np(inst)} + {refl}
motywować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
motywować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
motywować: imperf: subj{np(str)} + obj{np(str)} + {or}
motywować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
motywować: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
można: imperf: {infp(_)}
móc: imperf: subj,controller{E} + controllee{infp(_)}
móc: imperf: subj,controller{np(str)} + controllee{infp(_)}
móc: imperf: subj{np(str)} + {np(str)}
mówić: imperf: subj,controller{np(str)} + controllee{xp(mod)}
mówić: imperf: subj{ncp(str,int)} + {prepnp(o,loc)} + {nonch}
mówić: imperf: subj{ncp(str,że)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {nonch}
mówić: imperf: subj{np(str)} + {comprepnp(na temat)} + {cp(że)}
mówić: imperf: subj{np(str)} + controller{np(dat)} + controllee{np(nom)}
mówić: imperf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)}
mówić: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{np(nom)}
mówić: imperf: subj{np(str)} + controller{prepnp(o,loc)} + controllee{xp(mod)}
mówić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {cp(że)}
mówić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {ncp(str,że)}
mówić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {comprepnp(na temat)}
mówić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
mówić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {comprepnp(na temat)}
mówić: imperf: subj{np(str)} + obj{or} + {np(dat)} + {prepnp(o,loc)}
mówić: imperf: subj{np(str)} + obj{prepnp(o,loc); comprepnp(na temat); cp(int); cp(że); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {np(dat)}
mówić: imperf: subj{np(str)} + {prepadjp(po,postp)}
mówić: imperf: subj{np(str)} + {preplexnp(za,acc,_,'siebie',natr)}
mówić: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
mówić: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
mówić: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że); or}
mówić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)} + {cp(że)}
mówić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)} + {or}
mówić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
mówić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int)} + {prepnp(z,inst)}
mówić: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
mrozić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
mrozić się: imperf: subj{np(str)} + {np(dat)}
mruczeć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
mruczeć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
mruczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
mruczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
mruczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
mruczeć: imperf: subj{np(str)} + {prepnp(na,acc)}
mruczeć: imperf: subj{np(str)} + {prepnp(za,inst)} + {cp(że)}
mruczeć: imperf: subj{np(str)} + {prepnp(za,inst)} + {cp(żeby)}
mruczeć: imperf: subj{np(str)} + {prepnp(za,inst)} + {or}
mrugać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
mrugać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
mrugnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
mrugnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
mruknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
mruknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
mruknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
mruknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
mruknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
mruknąć: perf: subj{np(str)} + {prepnp(na,acc)}
mruknąć: perf: subj{np(str)} + {prepnp(za,inst)} + {cp(że)}
mruknąć: perf: subj{np(str)} + {prepnp(za,inst)} + {cp(żeby)}
mruknąć: perf: subj{np(str)} + {prepnp(za,inst)} + {or}
mrużyć: imperf: subj{np(str)} + obj{lexnp(str,_,'oko',atr)} + {prepnp(od,gen)}
mrużyć: imperf: subj{np(str)} + obj{lexnp(str,_,'oko',atr)} + {prepnp(pod,inst)}
mrużyć: imperf: subj{np(str)} + obj{lexnp(str,_,'oko',atr)} + {prepnp(w,loc)}
mrużyć: imperf: subj{np(str)} + obj{lexnp(str,_,'oko',atr)} + {prepnp(z,gen)}
mrużyć się: imperf: subj{lexnp(str,_,'oko',atr)} + {np(dat)} + {prepnp(z,gen)}
mrużyć się: imperf: subj{lexnp(str,_,'oko',atr)} + {prepnp(od,gen)}
mrużyć się: imperf: subj{lexnp(str,_,'oko',atr)} + {prepnp(pod,inst)}
mrużyć się: imperf: subj{np(str)} + {prepnp(do,gen)}
mrużyć się: imperf: subj{np(str)} + {prepnp(w,loc)}
mścić: imperf: subj{np(str)} + obj{np(str)}
mścić się: imperf: subj{ncp(str,że)} + {prepnp(na,loc)}
mścić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(nad,inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
mścić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
musieć: imperf: subj,controller{E} + controllee{infp(_)}
musieć: imperf: subj,controller{np(str)} + controllee{infp(_)}
musieć: imperf: subj{np(str)} + {xp(adl)}
muskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
muskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
muskać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
muskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
muskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
muskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
muskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
musnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
musnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
musnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
myć: imperf: subj{np(str)} + {np(inst)} + {refl}
myć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
mylić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
mylić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
mylić się: imperf: subj{np(str)} + {np(dat)} + {prepncp(z,inst,że)}
mylić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
mylić się: imperf: subj{np(str)} + {prepncp(w,loc,że)}
mylić się: imperf: subj{np(str)} + {prepnp(co do,gen); prepncp(co do,gen,int); prepncp(co do,gen,że)}
mylić się: imperf: subj{np(str)} + {prepnp(w,loc)}
myśleć: imperf: subj,controller{np(str)} + controllee{infp(_)}
myśleć: imperf: subj{np(str)} + controller{prepnp(o,loc)} + controllee{prepadjp(jako,str)}
myśleć: imperf: subj{np(str)} + controller{prepnp(o,loc)} + controllee{prepnp(jako,str)}
myśleć: imperf: subj{np(str)} + controller{prepnp(o,loc)} + controllee{xp(mod)}
myśleć: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,żeby)}
myśleć: imperf: subj{np(str)} + {prepnp(o,loc); cp(int); cp(że); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
myśleć: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {nonch}
nabawić: imperf: subj{np(str)} + {np(gen)} + {np(str)}
nabawić się: perf: subj{np(str)} + {np(gen)}
nabić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)} + {preplexnp(do,gen,sg,'głowa',atr)}
nabić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)} + {preplexnp(do,gen,sg,'głowa',atr)}
nabić: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {refl}
nabić: perf: subj{np(str)} + obj{np(part)}
nabić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
nabić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {preplexnp(do,gen,sg,'głowa',atr)}
nabić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nabić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nabić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
nabić się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
nabierać: imperf: subj{np(str)} + {np(inst)} + {np(part)}
nabierać: imperf: subj{np(str)} + {np(part)} + {prepnp(na,acc)}
nabierać: imperf: subj{np(str)} + {np(part)} + {prepnp(w,acc)}
nabierać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
nabierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
nabierać się: imperf: subj{np(str)} + {cp(że)}
nabierać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
nabijać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)} + {preplexnp(do,gen,sg,'głowa',atr)}
nabijać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)} + {preplexnp(do,gen,sg,'głowa',atr)}
nabijać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {refl}
nabijać: imperf: subj{np(str)} + obj{np(part)}
nabijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
nabijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {preplexnp(do,gen,sg,'głowa',atr)}
nabijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
nabijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nabijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
nabijać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
nabijać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
nabijać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,jak); prepncp(z,gen,że)}
nabrać: perf: subj{np(str)} + {np(part)} + {prepnp(na,acc)}
nabrać: perf: subj{np(str)} + {np(part)} + {prepnp(w,acc)}
nabrać: perf: subj{np(str)} + obj{np(part)} + {np(inst)}
nabrać: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
nabrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
nabrać się: perf: subj{np(str)} + {cp(że)}
nabrać się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
nabrzmiewać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
nabrzmiewać: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
nabrzmiewać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
nabrzmiewać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
nabrzmiewać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
nabyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
nabyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
nabyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
nabyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
nabyć się: perf: subj{np(str)} + {xp(locat)}
nabywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
nabywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
nabywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
nabywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
nachodzić: imperf: subj{cp(żeby)} + {np(str)}
nachodzić: imperf: subj{cp(że)} + {np(str)}
nachodzić: imperf: subj{np(str)} + {np(inst)}
nachodzić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
nachodzić: imperf: subj{np(str)} + {prepnp(na,acc)}
nachodzić się: imperf: subj{np(str)} + {prepnp(po,loc)}
nachodzić się: imperf: subj{np(str)} + {prepnp(przy,loc)}
nachodzić się: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,żeby)}
nachodzić się: imperf: subj{np(str)} + {xp(adl)}
nachylać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
nachylać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
nachylać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
nachylać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
nachylać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(ku,dat)}
nachylać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
nachylić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
nachylić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
nachylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
nachylić się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
nachylić się: perf: subj{np(str)} + {np(dat)} + {prepnp(ku,dat)}
nachylić się: perf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
naciąć: perf: subj{np(str)} + {np(gen)}
naciąć: perf: subj{np(str)} + {np(inst)} + {refl}
naciąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)} + {np(inst)}
naciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
naciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
naciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
naciąć się: perf: subj{np(str)} + {np(gen)}
naciąć się: perf: subj{np(str)} + {prepnp(na,acc)}
naciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
naciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
naciągać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
naciągać się: imperf: subj{np(str)}
naciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
naciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
naciągnąć się: perf: subj{np(str)} + {prepnp(o,acc)}
nacierać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
nacierać: imperf: subj{np(str)} + {np(inst)} + {refl}
nacierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
nacierać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
nacierać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
nacierać: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
nacierać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
nacierać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(abl)}
nacieszyć: perf: subj{np(str)} + {np(inst)} + {np(str)}
nacieszyć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
nacieszyć się: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
naciskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
naciskać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
naciskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
naciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
naciskać: imperf: subj{np(str)} + {or}
naciskać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
naciskać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
naciskać: perf: subj{np(str)} + {np(gen)} + {xp(adl)}
nacisnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
nacisnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nacisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nacisnąć: perf: subj{np(str)} + {or}
nadać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {or}
nadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nadać się: perf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,żeby)}
nadarzać się: imperf: subj{np(str)} + {cp(żeby)}
nadarzać się: imperf: subj{np(str)} + {np(dat)}
nadarzać się: imperf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
nadarzyć: perf: subj{np(str)} + {np(dat)} + {np(str)}
nadarzyć się: perf: subj{np(str)} + {np(dat)}
nadawać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {or}
nadawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nadawać: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
nadawać się: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,żeby)}
nadążać: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
nadążać: imperf: subj{np(str)} + {cp(żeby)}
nadążać: imperf: subj{np(str)} + {prepnp(za,inst)}
nadążać: imperf: subj{np(str)} + {prepnp(z,inst)}
nadążyć: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
nadążyć: imperf: subj{np(str)} + {cp(żeby)}
nadążyć: imperf: subj{np(str)} + {prepnp(za,inst)}
nadążyć: imperf: subj{np(str)} + {prepnp(z,inst)}
nadbiec: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
nadbiec: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
nadchodzić: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
nadciągać: imperf: subj{np(str)} + {prepnp(do,gen)}
nadciągać: imperf: subj{np(str)} + {prepnp(ku,dat)}
nadciągać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
nadciągnąć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
nadejść: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
nadepnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
nadepnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
nadesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
nadesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
nadjechać: perf: subj{np(str)} + {np(inst)}
nadjechać: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
nadjechać: perf: subj{np(str)} + {prepnp(na,loc)}
nadjechać: perf: subj{np(str)} + {xp(adl)}
nadjeżdżać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
nadjeżdżać: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(locat)}
nadjeżdżać: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(mod)}
nadjeżdżać: imperf: subj{np(str)} + {prepnp(z,gen)} + {xp(locat)}
nadjeżdżać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
nadmieniać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
nadmieniać: imperf: subj{np(str)} + {np(dat)} + {cp(jak)}
nadmieniać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
nadmieniać: imperf: subj{np(str)} + {np(dat)} + {or}
nadmieniać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
nadmienić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
nadmienić: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
nadmienić: perf: subj{np(str)} + {or}
nadrabiać: imperf: subj{np(str)} + {np(part)}
nadrabiać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)}
nadrobić: perf: subj{np(str)} + {np(part)}
nadrobić: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
nadrobić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)}
nadstawiać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
nadstawiać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
nadstawić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
nadstawić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
nadsyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
nadsyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
nadużyć: perf: subj{np(str)} + {np(gen)}
nadużywać: imperf: subj{np(str)} + {np(gen)}
nadziać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
nadziać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nadziać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nadziać się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
nadzorować: imperf: subj{np(str)} + obj{np(str)}
nagadać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
nagadać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
nagadać: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
nagadać: perf: subj{np(str)} + {np(dat)} + {np(str)}
nagadać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
nagadać się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
nagadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
nagadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
nagadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
nagiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
nagiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
nagiąć: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
nagiąć się: perf: subj{np(str)} + {np(gen)} + {np(inst)}
naginać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
naginać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
naginać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
naglić: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
naglić: imperf: subj{np(str)} + obj{np(str)} + {or}
naglić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
naglić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
nagrać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {refl}
nagrać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {refl}
nagrać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {refl}
nagrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
nagrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nagrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
nagrać się: perf: subj{np(str)} + {np(gen)}
nagrać się: perf: subj{np(str)} + {prepnp(na,loc)}
nagrać się: perf: subj{np(str)} + {xp(locat)}
nagradzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
nagradzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
nagradzać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
nagrodzić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
nagrodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
nagrodzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nagrodzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
nagrodzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
nagrodzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
nagrodzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
nagromadzić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(locat)}
nagromadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
nagromadzić się: perf: {np(dat)} + {np(part)} + {xp(locat)}
nagromadzić się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
nagrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
nagrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
nagrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nagrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
nagrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
nagrywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nagrywać się: imperf: subj{np(str)} + {prepnp(na,loc)}
nagrzewać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
nagrzewać się: imperf: subj{np(str)} + {prepnp(do,gen)}
nagrzewać się: imperf: subj{np(str)} + {prepnp(o,acc)}
nagrzewać się: imperf: subj{np(str)} + {prepnp(od,gen)}
nająć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
nająć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {preplexnp(w,loc,sg,'charakter',atr)}
nająć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nająć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
nająć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
nająć się: perf: subj{np(str)} + {prepnp(do,gen)} + {preplexnp(w,loc,sg,'charakter',atr)}
nająć się: perf: subj{np(str)} + {prepnp(jako,nom)}
nająć się: perf: subj{np(str)} + {prepnp(na,acc)}
nająć się: perf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(za,acc)}
nająć się: perf: subj{np(str)} + {xp(locat)}
najechać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {xp(abl)}
najechać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
najechać: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
najeść się: perf: subj{np(str)} + {np(gen)}
najeść się: perf: subj{np(str)} + {np(inst)}
najść: perf: {np(gen)} + {xp(abl)} + {xp(adl)}
najść: perf: subj{cp(żeby)} + {np(str)}
najść: perf: subj{cp(że)} + {np(str)}
najść: perf: subj{np(str)} + {np(inst)}
najść: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
najść: perf: subj{np(str)} + {prepnp(na,acc)}
najść się: perf: {np(gen)} + {xp(abl)} + {xp(adl)}
nakarmić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nakarmić się: perf: subj{np(str)} + {np(inst)}
nakazać: perf: subj{np(str)} + {np(dat)} + {or}
nakazać: perf: subj{np(str)} + obj,controllee{cp(żeby); infp(_)} + controller{np(dat)}
nakazać: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
nakazać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
nakazywać: imperf: subj{np(str)} + {np(dat)} + {or}
nakazywać: imperf: subj{np(str)} + obj,controllee{cp(żeby); infp(_)} + controller{np(dat)}
nakazywać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
nakazywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
nakleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nakleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
naklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
naklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
nakładać: imperf: subj{np(str)} + {np(gen)}
nakładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
nakładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nakładać się: imperf: subj{np(str)} + {prepnp(na,acc)}
nakłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
nakłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
nakłonić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
nakłonić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
nakreślić: perf: subj{np(str)} + {np(dat)} + {cp(int)}
nakreślić: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {or}
nakreślić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
nakreślić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
nakręcać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
nakręcać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
nakręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
nakręcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
nakręcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nakręcać: imperf: subj{np(str)} + {prepnp(na,acc)} + {refl}
nakręcać się: imperf: subj{np(str)} + {np(inst)}
nakręcić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
nakręcić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
nakręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
nakręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
nakręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nakręcić: perf: subj{np(str)} + {prepnp(na,acc)} + {refl}
nakręcić się: perf: subj{np(str)} + {np(inst)}
nakryć: perf: subj{np(str)} + {np(inst)} + {refl}
nakryć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nakryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
nakryć: perf: subj{np(str)} + {prepnp(do,gen)}
nakrywać: imperf: subj{np(str)} + {np(inst)} + {refl}
nakrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
nakrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
nakrywać: imperf: subj{np(str)} + {prepnp(do,gen)}
nakrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
nakrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
nakrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
nakrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {nonch}
nakrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
nakrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
nalać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
nalać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
nalać się: perf: subj{np(part)} + {np(dat)} + {xp(adl)} + {xp(perl)}
nalegać: imperf: subj{np(str)} + {or}
nalegać: imperf: subj{np(str)} + {prepncp(na,acc,żeby)}
nalegać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
nalegać: imperf: subj{np(str)} + {prepnp(o,acc)}
nalewać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
nalewać się: imperf: subj{np(part)} + {np(dat)} + {xp(adl)} + {xp(perl)}
należeć: imperf: {infp(_)}
należeć: imperf: subj{cp(żeby)} + {prepnp(do,gen)}
należeć: imperf: subj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(do,gen)}
należeć się: imperf: subj{cp(żeby)} + {np(dat)}
należeć się: imperf: subj{np(str)} + {np(dat)}
należeć się: perf: subj{np(str)} + {xp(locat)}
naliczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
naliczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
naliczyć się: perf: subj{np(str)} + {np(gen)}
naładować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
naładować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nałożyć: perf: subj{np(str)} + {np(gen)}
nałożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
nałożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nałożyć się: perf: subj{np(str)} + {prepnp(na,acc)}
namalować: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {refl}
namalować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
namawiać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
namawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,żeby); prepncp(na,acc,żeby)}
namawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
namawiać: imperf: subj{np(str)} + {or}
namawiać się: imperf: subj{np(str)} + {prepnp(z,inst)}
namęczyć: perf: subj{np(str)} + {np(inst)} + {np(str)}
namęczyć się: perf: subj{np(str)} + {cp(żeby)}
namęczyć się: perf: subj{np(str)} + {np(inst); ncp(inst,żeby)}
namęczyć się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,żeby)}
namęczyć się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)}
namnożyć: perf: subj{np(str)} + obj{np(gen)}
namnożyć: perf: subj{np(str)} + obj{np(str)}
namnożyć się: perf: {np(gen)}
namnożyć się: perf: subj{np(str)}
namówić: perf: subj{np(str)} + {np(str)} + {prepncp(na,acc,żeby)}
namówić: perf: subj{np(str)} + {np(str)} + {prepnp(przeciw,dat)}
namówić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
namówić: perf: subj{np(str)} + obj{np(str)} + {prepncp(do,gen,żeby)}
namówić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepnp(na,acc)}
namówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
namyślać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
namyślać się: imperf: subj{np(str)} + {cp(int)}
namyślać się: imperf: subj{np(str)} + {or}
namyślać się: imperf: subj{np(str)} + {prepncp(nad,inst,int)}
namyślać się: imperf: subj{np(str)} + {prepnp(nad,inst)}
nanieść: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(locat)}
nanieść: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
nanieść: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
nanieść: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
nanieść się: perf: {np(part)} + {xp(abl)} + {xp(adl)}
nanieść się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
nanosić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
nanosić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
nanosić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
nanosić: _: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(locat)}
nanosić się: perf: subj{np(str)} + {np(gen)}
nanosić się: _: {np(part)} + {xp(abl)} + {xp(adl)}
nanosić się: _: subj{np(str)} + {xp(abl)} + {xp(adl)}
naopowiadać: perf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)}
naopowiadać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
naopowiadać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
naopowiadać: perf: subj{np(str)} + {np(dat)} + {np(gen)}
naopowiadać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
naopowiadać się: perf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)}
naopowiadać się: perf: subj{np(str)} + {np(dat)} + {cp(int)}
naopowiadać się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
naopowiadać się: perf: subj{np(str)} + {np(dat)} + {np(gen)}
naopowiadać się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
napadać: imperf: subj{cp(żeby)} + {np(str)}
napadać: imperf: subj{nonch} + {np(str)} + {cp(żeby)}
napadać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
napadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
napadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
napadać: perf: subj{E}
napadać: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
napalić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
napalić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
napalić: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
napalić się: perf: subj{np(str)} + {cp(żeby)}
napalić się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
napalić się: perf: subj{np(str)} + {xp(mod)}
napaść: perf: subj{cp(żeby)} + {np(str)}
napaść: perf: subj{nonch} + {np(str)} + {cp(żeby)}
napaść: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
napaść: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
napaść: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
napaść: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
napaść się: perf: subj{np(str)} + {np(inst)}
napatrzyć się: perf: subj{np(str)} + {cp(int)}
napatrzyć się: perf: subj{np(str)} + {cp(że)}
napatrzyć się: perf: subj{np(str)} + {np(dat)}
napatrzyć się: perf: subj{np(str)} + {np(gen)}
napatrzyć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
napawać: imperf: subj{cp(gdy)} + {np(inst)} + {np(str)}
napawać: imperf: subj{cp(int)} + {np(inst)} + {np(str)}
napawać: imperf: subj{cp(jak)} + {np(inst)} + {np(str)}
napawać: imperf: subj{cp(jeśli)} + {np(inst)} + {np(str)}
napawać: imperf: subj{cp(kiedy)} + {np(inst)} + {np(str)}
napawać: imperf: subj{cp(że)} + {np(inst)} + {np(str)}
napawać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)} + {np(str)}
napawać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
napawać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
napełniać: imperf: subj{ncp(str,że)} + obj{np(str)} + {np(inst)}
napełniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
napełniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
napełniać się: imperf: subj{np(str)} + {np(inst)}
napełnić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst)}
napełnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
napełnić się: perf: subj{np(str)} + {np(inst)}
napędzać: imperf: subj{np(str)} + {np(inst)} + {refl}
napędzać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {xp(adl)}
napędzać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
napędzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
napędzić: perf: subj{np(str)} + {np(inst)} + {refl}
napędzić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {xp(adl)}
napędzić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
napędzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
napiąć: perf: subj{np(str)} + obj{np(str)}
napiąć się: perf: subj{np(str)} + {np(dat)}
napić się: perf: subj{np(str)} + {np(gen)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
napić się: perf: subj{np(str)} + {np(inst)}
napierać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
napierać się: imperf: subj{np(str)} + {cp(żeby)}
napierać się: imperf: subj{np(str)} + {np(gen)}
napiętnować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
napiętnować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
napiętnować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
napiętnować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(że)}
napiętnować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
napinać: imperf: subj{np(str)} + obj{np(str)}
napinać się: imperf: subj{np(str)} + {np(dat)}
napisać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
napisać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
napisać: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
napisać: perf: subj{np(str)} + {np(dat)} + {or}
napisać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
napisać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {or}
napisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
napisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,loc)}
napisać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
napisać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
napisać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int); cp(że); cp(żeby)}
napisać: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
napisać: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
napisać: perf: subj{np(str)} + {prepnp(o,loc)} + {cp(int)}
napisać: perf: subj{np(str)} + {prepnp(o,loc)} + {cp(że)}
napluć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
napluć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
napluć: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
napłynąć: perf: subj{np(str)} + {np(dat)} + {np(inst)}
napłynąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
napłynąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
napłynąć: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
napłynąć: perf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
napływać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
napływać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
napływać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
napływać: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
napływać: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
napływać się: perf: subj{np(str)}
napoić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
napoić się: perf: subj{np(str)} + {np(inst)}
napominać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)} + {nonch}
napominać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
napominać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
napominać: imperf: subj{np(str)} + obj{np(str)} + {or}
napominać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
napomknąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
napomknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)} + {nonch}
napomykać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
napomykać: imperf: subj{np(str)} + {np(dat)} + {cp(jak)}
napomykać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
napomykać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
napomykać: imperf: subj{np(str)} + {np(dat)} + {or}
napomykać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {nonch}
napotkać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
napotkać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
napotkać: perf: subj{np(str)} + {prepnp(na,acc)}
napotykać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
napotykać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
napotykać: imperf: subj{np(str)} + {prepnp(na,acc)}
napracować się: perf: subj{np(str)} + {cp(żeby)} + {xp(mod)}
napracować się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
napracować się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,żeby)}
napracować się: perf: subj{np(str)} + {prepnp(przy,loc)}
naprawiać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
naprawiać się: imperf: subj{np(str)}
naprawić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
naprawić się: perf: subj{np(str)}
naprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
naprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc); prepncp(na,acc,że)}
naradzać się: imperf: subj{np(str)} + {prepnp(co do,gen)} + {prepnp(z,inst)}
naradzać się: imperf: subj{np(str)} + {prepnp(nad,inst)} + {prepnp(z,inst)}
naradzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
naradzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
naradzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
naradzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {or}
naradzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepncp(nad,inst,int)}
naradzić się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)} + {prepnp(z,inst)}
naradzić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
naradzić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
naradzić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
naradzić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
naradzić się: perf: subj{np(str)} + {prepnp(z,inst)} + {or}
narastać: imperf: {np(gen)} + {xp(locat)}
narastać: imperf: subj{np(str)} + {np(dat)}
narastać: imperf: subj{np(str)} + {prepnp(w,loc)}
narastać: imperf: subj{np(str)} + {xp(dur)}
narastać: imperf: subj{np(str)} + {xp(locat)}
narazić: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(na,acc); prepncp(na,acc,że)} + {refl}
narazić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(na,acc); prepncp(na,acc,że)}
narazić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,acc)}
narazić: perf: subj{np(str)} + {prepnp(dla,gen)} + {refl}
narazić się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
narażać: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(na,acc); prepncp(na,acc,że)} + {refl}
narażać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(na,acc); prepncp(na,acc,że)}
narażać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
narażać: imperf: subj{np(str)} + {prepnp(dla,gen)} + {refl}
narażać się: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
narobić: perf: subj{np(str)} + {np(dat)} + {np(gen)} + {comprepnp(z powodu)}
narobić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
narobić: perf: subj{np(str)} + {np(gen)} + {np(inst)}
narobić: perf: subj{np(str)} + {np(gen)} + {prepnp(dla,gen)}
narobić: perf: subj{np(str)} + {np(gen)} + {prepnp(z,gen)}
narobić: perf: subj{np(str)} + {np(gen)} + {prepnp(z,inst)}
narobić: perf: subj{np(str)} + {prepnp(w,acc)}
narobić: perf: subj{np(str)} + {xp(adl)}
narobić: perf: subj{np(str)} + {xp(locat)}
narobić się: perf: {np(dat)} + {np(gen)}
narobić się: perf: {np(gen)} + {xp(locat)}
narobić się: perf: {prepnp(z,inst)}
narobić się: perf: subj,controller{np(str)} + controllee{xp(mod)}
narobić się: perf: subj{np(str)} + {np(gen)}
narobić się: perf: subj{np(str)} + {prepnp(nad,inst)}
narobić się: perf: subj{np(str)} + {prepnp(po,acc)}
narobić się: perf: subj{np(str)} + {prepnp(przy,loc)}
narobić się: perf: subj{np(str)} + {prepnp(z,gen)}
narobić się: perf: subj{np(str)} + {xp(locat)}
narodzić: perf: subj{np(str)} + {np(dat)} + {np(gen)}
narodzić się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
narosnąć: perf: {np(gen)} + {xp(locat)}
narosnąć: perf: subj{np(str)} + {np(dat)}
narosnąć: perf: subj{np(str)} + {prepnp(w,loc)}
narosnąć: perf: subj{np(str)} + {xp(locat)}
naruszać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
naruszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
naruszyć: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
naruszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
narysować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
narysować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
narysować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
narysować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
narzekać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
narzekać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
narzekać: imperf: subj{np(str)} + {np(dat)} + {or}
narzekać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
narzucać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
narzucać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
narzucać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
narzucać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,acc)}
narzucać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,acc)}
narzucać się: imperf: subj{cp(że)} + {np(dat)}
narzucać się: imperf: subj{np(str); ncp(str,że)} + {np(dat)}
narzucać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
narzucać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
narzucać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
narzucać się: perf: subj{np(str)} + {np(gen)}
narzucać się: perf: subj{np(str)} + {np(inst)}
narzucić: perf: subj{np(str); ncp(str,że)} + {np(dat)}
narzucić: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
narzucić: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
narzucić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
narzucić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,acc)}
narzucić się: perf: subj{cp(że)} + {np(dat)}
narzucić się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
narzucić się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
nasiąkać: imperf: subj{np(str)} + {np(dat)} + {xp(mod)}
nasiąkać: imperf: subj{np(str)} + {np(inst)} + {xp(mod)}
nasiąknąć: perf: subj{np(str)} + {np(dat)} + {xp(mod)}
nasiąknąć: perf: subj{np(str)} + {np(inst)} + {xp(mod)}
nasilać: imperf: subj{np(str)} + obj{np(str)}
nasilać się: imperf: subj{np(str)}
nasilić: perf: subj{np(str)} + obj{np(str)}
nasilić się: perf: subj{np(str)}
nasłać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(z,gen)}
nasłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
nasłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nasłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
nasłuchać się: perf: subj{np(str)} + {np(gen)} + {prepnp(od,gen)}
nasłuchać się: perf: subj{np(str)} + {prepnp(od,gen)} + {comprepnp(na temat)}
nasłuchać się: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(int)}
nasłuchać się: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(że)}
nasłuchać się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(od,gen)}
nasłuchiwać: imperf: subj{np(str)} + {cp(int)}
nasłuchiwać: imperf: subj{np(str)} + {cp(jak)}
nasłuchiwać: imperf: subj{np(str)} + {np(gen)}
nastać: perf: subj{np(str)} + {xp(locat)}
nastać się: perf: subj{np(str)} + {xp(locat)}
nastawać: imperf: subj{np(str)} + {or}
nastawać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
nastawać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
nastawać: imperf: subj{np(str)} + {xp(locat)}
nastawiać: imperf: subj{np(str)} + controller{np(str)} + controllee{xp(mod)} + {prepnp(do,gen)}
nastawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
nastawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
nastawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nastawiać: perf: subj{np(str)} + {np(gen)} + {xp(locat)}
nastawiać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(do,gen)}
nastawiać się: imperf: subj{np(str)} + {prepnp(na,acc)}
nastawić: perf: subj{np(str)} + controller{np(str)} + controllee{xp(mod)} + {prepnp(do,gen)}
nastawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
nastawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nastawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nastawić się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(do,gen)}
nastawić się: perf: subj{np(str)} + {prepnp(na,acc)}
nastąpić: perf: subj,controller{np(str)} + controllee{xp(mod)}
nastąpić: perf: subj{ncp(str,że)}
nastąpić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nastąpić: perf: subj{np(str)} + {prepnp(po,loc)}
nastąpić: perf: subj{np(str)} + {xp(temp)}
następować: imperf: subj,controller{np(str)} + controllee{xp(mod)}
następować: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
następować: imperf: subj{np(str)} + {prepnp(po,loc)}
następować: imperf: subj{np(str)} + {xp(temp)}
nastrajać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)} + {advp(misc)}
nastrajać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(na,acc)} + {advp(misc)}
nastrajać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
nastrajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)} + {advp(misc)}
nastrajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {advp(misc)}
nastrajać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {advp(misc)}
nastrajać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {advp(misc)}
nastraszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {cp(że)}
nastraszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
nastręczać: perf: subj{np(str)} + {np(dat)} + {np(gen)}
nastręczać: perf: subj{np(str)} + {np(dat)} + {np(str)}
nastręczać się: imperf: subj{np(str)} + {np(dat)}
nastroić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)} + {advp(misc)}
nastroić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(na,acc)} + {advp(misc)}
nastroić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
nastroić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)} + {advp(misc)}
nastroić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {advp(misc)}
nastroić się: perf: subj{np(str)} + {prepnp(do,gen)} + {advp(misc)}
nastroić się: perf: subj{np(str)} + {prepnp(na,acc)} + {advp(misc)}
nasunąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
nasunąć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nasunąć się: imperf: subj{cp(że)} + {np(dat)} + {prepnp(na,acc)}
nasunąć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nasunąć się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
nasuwać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
nasuwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nasuwać się: perf: subj{cp(że)} + {np(dat)} + {prepnp(na,acc)}
nasuwać się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nasuwać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
nasycać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
nasycać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
nasycić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
nasycić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
nasypać: perf: subj{np(str)} + obj{np(gen)} + {np(dat)} + {xp(adl)}
nasypać się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
naszkicować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {xp(locat)}
naśladować: imperf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
naśladować: imperf: subj{np(str)} + obj{np(str)}
naśmiewać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
naśmiewać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
naśmiewać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,jak); prepncp(z,gen,że)}
naśmiewać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,jak); prepncp(za,acc,że)}
naświetlać: imperf: subj{np(str)} + {np(inst)} + {refl}
naświetlać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)}
naświetlać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
naświetlać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
naświetlać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
naświetlić: perf: subj{np(str)} + {np(inst)} + {refl}
naświetlić: perf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)}
naświetlić: perf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
naświetlić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
naświetlić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
natchnąć: perf: {np(str)} + {cp(żeby)}
natchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
natchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
natknąć się: perf: subj{np(str)} + {prepncp(na,acc,int)}
natknąć się: perf: subj{np(str)} + {prepncp(na,acc,że)}
natknąć się: perf: subj{np(str)} + {prepnp(na,acc)}
natrafiać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
natrafić: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
natrzeć: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,pl,'ucho',natr)}
natrzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
natrzeć: perf: subj{np(str)} + {np(inst)} + {refl}
natrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
natrzeć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
natrzeć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
natrzeć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
natrzeć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
natrzeć: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(abl)}
natykać się: imperf: subj{np(str)} + {prepncp(na,acc,int)}
natykać się: imperf: subj{np(str)} + {prepncp(na,acc,że)}
natykać się: imperf: subj{np(str)} + {prepnp(na,acc)}
nauczać: imperf: subj{np(str)} + {np(gen)} + {xp(locat)}
nauczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(gen); prepnp(o,loc); cp(int); cp(że); cp(żeby); ncp(gen,int); ncp(gen,że); ncp(gen,żeby); prepncp(o,loc,int); prepncp(o,loc,że); infp(imperf)} + {np(inst)}
nauczać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)} + {nonch}
nauczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {nonch}
nauczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(gen); prepnp(o,loc); cp(int); cp(że); cp(żeby); ncp(gen,int); ncp(gen,że); ncp(gen,żeby); prepncp(o,loc,int); prepncp(o,loc,że); infp(imperf)} + {np(inst)}
nauczyć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)} + {nonch}
nauczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {nonch}
nauczyć się: perf: subj,controller{np(str)} + controllee{np(gen); prepnp(o,loc); cp(int); cp(że); cp(żeby); ncp(gen,int); ncp(gen,że); ncp(gen,żeby); prepncp(o,loc,int); prepncp(o,loc,że); infp(imperf)} + {prepnp(od,gen); prepnp(z,gen)}
nauczyć się: perf: subj{np(str)} + {comprepnp(na temat)} + {nonch}
nauczyć się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(od,gen); prepnp(z,gen)} + {nonch}
nawalić: perf: subj{np(str)} + {np(dat)}
nawalić: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
nawalić: perf: subj{np(str)} + obj{np(part)} + {xp(adl)}
nawalić: perf: subj{np(str)} + {xp(adl)}
nawalić: perf: subj{np(str)} + {xp(locat)}
nawalić się: perf: subj{np(str)} + {np(inst)}
nawalić się: perf: subj{np(str)} + {prepnp(na,acc)}
nawalić się: perf: subj{np(str)} + {xp(adl)}
nawiązać: perf: subj{np(str)} + {np(gen)}
nawiązać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
nawiązać: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
nawiązać: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
nawiązać się: perf: subj{np(str)} + {prepnp(między,inst)}
nawiązywać: imperf: subj{np(str)} + {np(gen)}
nawiązywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
nawiązywać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
nawiązywać się: imperf: subj{np(str)} + {prepnp(między,inst)}
nawiedzać: imperf: subj{np(str)} + obj{np(str)}
nawiedzić: perf: subj{np(str)} + obj{np(str)}
nawijać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
nawijać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
nawijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nawijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
nawijać: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
nawijać: imperf: subj{np(str)} + {or}
nawijać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nawinąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
nawinąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nawinąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
nawinąć: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
nawinąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
nawinąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
nawoływać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
nawoływać: imperf: subj{np(str)} + {or}
nawoływać się: imperf: subj{np(str)}
nawozić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
nawozić: perf: subj{np(str)} + {np(gen)}
nawozić się: perf: subj{np(str)} + {np(gen)}
nawracać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {prepnp(z,gen)}
nawracać: imperf: subj{np(str)} + {prepnp(do,gen)}
nawracać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
nawrócić: perf: subj{np(str)} + {np(inst)}
nawrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
nawrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
nawrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
nawrócić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
nawrócić się: perf: subj{np(str)} + {prepnp(do,gen)}
nawrócić się: perf: subj{np(str)} + {prepnp(ku,dat)}
nawrócić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
nawyknąć: perf: subj,controller{np(str)} + controllee{infp(imperf)}
nawyknąć: perf: subj{np(str)} + {cp(że)}
nawyknąć: perf: subj{np(str)} + {cp(żeby)}
nawyknąć: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
nazbierać: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
nazbierać się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
naznaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
naznaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
naznaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
naznaczyć się: perf: subj{np(str)} + {advp(misc)}
naznaczyć się: perf: subj{np(str)} + {np(inst)}
nazwać: perf: subj,controller{np(str)} + controllee{adjp(inst)} + {refl}
nazwać: perf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
nazwać: perf: subj,controller{np(str)} + controllee{np(nom)} + {refl}
nazwać: perf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
nazwać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
nazwać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
nazwać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(nom)}
nazwać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
nazwać: perf: subj{np(str)} + obj{np(str)} + {prepadjp(po,loc)}
nazwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
nazwać: perf: subj{np(str)} + {prepnp(po,loc)} + {refl}
nazywać: imperf: subj,controller{np(str)} + controllee{adjp(inst)} + {refl}
nazywać: imperf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
nazywać: imperf: subj,controller{np(str)} + controllee{np(nom)} + {refl}
nazywać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
nazywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
nazywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
nazywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(nom)}
nazywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
nazywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
nazywać się: imperf: subj,controller{np(str)} + controllee{np(inst)}
nazywać się: imperf: subj,controller{np(str)} + controllee{np(nom)}
nazywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
negocjować: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {prepnp(z,inst)}
negocjować: imperf: subj{np(str)} + obj{cp(int)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
negocjować: imperf: subj{np(str)} + obj{cp(żeby)} + {np(dat)} + {prepnp(z,inst)}
negocjować: imperf: subj{np(str)} + obj{cp(żeby)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
negocjować: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {prepnp(z,inst)}
negocjować: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
negocjować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {prepnp(z,inst)}
negocjować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
negocjować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
negocjować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
negocjować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
negować: imperf: subj{np(str)} + obj{cp(int)}
negować: imperf: subj{np(str)} + obj{cp(że)}
negować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
neutralizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
neutralizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
neutralizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
neutralizować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(mod)}
neutralizować się: imperf: subj{np(str)} + {xp(locat)}
nęcić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
nęcić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
nękać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
niecierpliwić: imperf: subj{cp(że)} + {np(str)}
niecierpliwić: imperf: subj{np(str); ncp(str,że)} + {np(str)}
niecierpliwić się: imperf: subj{np(str)} + {cp(int)}
niecierpliwić się: imperf: subj{np(str)} + {cp(że)}
niecierpliwić się: imperf: subj{np(str)} + {cp(żeby)}
niecierpliwić się: imperf: subj{np(str)} + {np(inst)}
niecierpliwić się: imperf: subj{np(str)} + {or}
nienawidzić: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
nienawidzić: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
nienawidzić: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)} + {refl}
niepokoić: imperf: subj{cp(gdy)} + {np(str)}
niepokoić: imperf: subj{cp(jak)} + {np(str)}
niepokoić: imperf: subj{cp(jeśli)} + {np(str)}
niepokoić: imperf: subj{cp(kiedy)} + {np(str)}
niepokoić: imperf: subj{cp(że)} + {np(str)}
niepokoić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
niepokoić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
niepokoić się: imperf: subj{np(str)} + {cp(int)}
niepokoić się: imperf: subj{np(str)} + {cp(że)}
niepokoić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
niepokoić się: imperf: subj{np(str)} + {or}
niepokoić się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
nieść: imperf: {np(inst)} + {xp(abl)}
nieść: imperf: {np(str)} + {xp(abl)} + {xp(adl)}
nieść: imperf: {np(str)} + {xp(perl)}
nieść: imperf: subj{np(str)} + {cp(że)}
nieść: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
nieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
nieść: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
nieść: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
nieść: imperf: subj{np(str)} + {xp(locat)} + {or}
nieść się: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
nieść się: imperf: subj{np(str)} + {or}
nieść się: imperf: subj{np(str)} + {prepnp(z,inst)}
nieść się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
nieść się: imperf: subj{np(str)} + {xp(perl)}
niknąć: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
niknąć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
niknąć: imperf: subj{np(str)} + {preplexnp(w,loc,pl,'oko',natr)}
niknąć: imperf: subj{np(str)} + {prepnp(przy,loc)}
niszczeć: imperf: subj{np(str)} + {comprepnp(z powodu)}
niszczeć: imperf: subj{np(str)} + {preplexnp(w,acc,sg,'skutek',natr)}
niszczeć: imperf: subj{np(str)} + {preplexnp(w,loc,sg,'tempo',ratr)}
niszczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
niszczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)} + {xp(mod)}
niszczeć: imperf: subj{np(str)} + {prepnp(z,gen)}
niszczeć: imperf: subj{np(str)} + {xp(dur)} + {xp(mod)}
niszczyć: imperf: subj{np(str)} + {np(inst)} + {refl}
niszczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
niszczyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
niweczyć: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
niwelować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
niwelować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
nocować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); xp(locat)}
nocować: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)} + {preplexnp(na,acc,sg,'walet',natr)}
nominować: _: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
nominować: _: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
nominować: _: subj{np(str)} + {prepnp(do,gen)} + {refl}
nominować: _: subj{np(str)} + {prepnp(na,acc)} + {refl}
nosić: imperf: {np(str)} + {xp(abl)} + {xp(adl)}
nosić: imperf: {np(str)} + {xp(perl)}
nosić: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
nosić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(locat)}
nosić się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
nosić się: imperf: subj{np(str)} + {prepnp(z,inst)}
notować: imperf: subj{np(str)} + {cp(żeby2)}
notować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
notować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
notować: imperf: subj{np(str)} + {prepnp(na,loc)} + {cp(int)}
notować: imperf: subj{np(str)} + {prepnp(na,loc)} + {cp(że)}
notować: imperf: subj{np(str)} + {prepnp(na,loc)} + {or}
notować: imperf: subj{np(str)} + {prepnp(w,loc)} + {cp(int)}
notować: imperf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
notować: imperf: subj{np(str)} + {prepnp(w,loc)} + {or}
nowelizować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
nucić: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
nucić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
nucić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)} + {or}
nudzić: imperf: {np(str)}
nudzić: imperf: subj{cp(gdy)} + {np(str)}
nudzić: imperf: subj{cp(jak)} + {np(str)}
nudzić: imperf: subj{cp(kiedy)} + {np(str)}
nudzić: imperf: subj{cp(że)} + {np(str)}
nudzić: imperf: subj{np(str)} + {cp(że)}
nudzić: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
nudzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
nudzić: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
nudzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
nudzić: imperf: subj{np(str)} + {or}
nudzić się: imperf: subj,controllee{infp(imperf)} + controller{np(dat)}
nudzić się: imperf: subj{cp(że)} + {np(dat)}
nudzić się: imperf: subj{np(str); ncp(str,że)} + {np(dat)}
nudzić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
nurtować: imperf: subj{cp(int)} + {np(str)}
nurtować: imperf: subj{cp(żeby)} + {np(str)}
nurtować: imperf: subj{cp(że)} + {np(str)}
nurtować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
nurtować: imperf: subj{np(str)} + {prepnp(w,loc)}
nurzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
nurzać się: imperf: subj{np(str)} + {prepnp(w,loc)}
obalać: imperf: subj{np(str)} + obj{np(str)}
obalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
obalać się: imperf: subj{np(str)} + {xp(adl)}
obalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
obalić się: perf: subj{np(str)} + {xp(adl)}
obarczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
obarczać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
obarczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
obarczyć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
obawiać się: imperf: subj{np(str)} + {cp(int)}
obawiać się: imperf: subj{np(str)} + {cp(żeby)}
obawiać się: imperf: subj{np(str)} + {np(gen); cp(że); ncp(gen,int); ncp(gen,że); ncp(gen,żeby); infp(_)}
obawiać się: imperf: subj{np(str)} + {prepnp(o,acc); cp(że); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
obchodzić: imperf: subj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(str)}
obchodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
obchodzić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
obchodzić się: imperf: {prepnp(bez,gen)}
obchodzić się: imperf: subj{np(str)} + controller{prepnp(z,inst)} + controllee{xp(mod)}
obchodzić się: imperf: subj{np(str)} + {np(inst)}
obchodzić się: imperf: subj{np(str)} + {prepnp(bez,gen)}
obciąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {np(inst)}
obciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
obciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
obciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
obciąć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
obciąć się: perf: subj{np(str)} + {prepnp(na,loc)}
obciąć się: perf: subj{np(str)} + {prepnp(z,gen)}
obciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
obciążać: imperf: subj{np(str)} + {np(inst)} + {advp(misc)} + {refl}
obciążać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obciążyć: perf: subj{np(str)} + {np(inst)} + {advp(misc)} + {refl}
obciążyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obcinać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {np(inst)}
obcinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
obcinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
obcinać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
obcinać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
obcinać się: imperf: subj{np(str)} + {prepnp(na,loc)}
obcinać się: imperf: subj{np(str)} + {prepnp(z,gen)}
obcować: imperf: subj{np(str)} + {prepnp(z,inst)}
obdarować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obdarowywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obdarzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obdarzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obejmować: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
obejmować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(inst)}
obejmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
obejmować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
obejmować się: imperf: subj{np(str)} + {prepnp(z,inst)}
obejrzeć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w roli)}
obejrzeć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
obejrzeć: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
obejrzeć: perf: subj{np(str)} + {xp(locat)} + {refl}
obejrzeć się: perf: subj{np(str)} + {prepnp(na,acc)}
obejrzeć się: perf: subj{np(str)} + {prepnp(za,inst)}
obejść: perf: subj{cp(że)} + {np(str)}
obejść: perf: subj{np(str)} + {np(str)} + {xp(abl)}
obejść się: perf: {prepnp(bez,gen)}
obejść się: perf: subj{np(str)} + controller{prepnp(z,inst)} + controllee{xp(mod)}
obejść się: perf: subj{np(str)} + {np(inst)}
obejść się: perf: subj{np(str)} + {prepnp(bez,gen)}
oberwać: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {prepnp(w,acc)}
oberwać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
oberwać: perf: subj{np(str)} + {np(inst)} + {prepnp(przez,acc)}
oberwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
oberwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
oberwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
oberwać: perf: subj{np(str)} + {prepnp(od,gen)} + {prepnp(po,loc)}
oberwać: perf: subj{np(str)} + {prepnp(od,gen)} + {prepnp(w,acc)}
oberwać się: perf: {np(dat)} + {prepnp(od,gen)} + {cp(że)}
oberwać się: perf: {np(dat)} + {prepnp(od,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
oberwać się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
oberwać się: perf: subj{np(str)} + {prepnp(pod,inst)}
oberwać się: perf: subj{np(str)} + {prepnp(z,gen)}
obezwładniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obezwładniać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
obezwładnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obfitować: imperf: subj{np(str)} + {np(inst)}
obfitować: imperf: subj{np(str)} + {prepnp(w,acc)}
obgadać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,inst)}
obgadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {cp(int)}
obgadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {cp(że)}
obgadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
obgadywać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,inst)}
obgadywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {cp(int)}
obgadywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {cp(że)}
obgadywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
obgryzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
obgryzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
obić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
obić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
obić się: perf: subj{cp(żeby2)} + {np(dat)} + {preplexnp(o,acc,sg,'ucho',natr)}
obić się: perf: subj{np(str); cp(int); cp(że); ncp(str,że)} + {np(dat)} + {preplexnp(o,acc,sg,'ucho',natr)}
obić się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
obiec: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obiecać: perf: subj,controller{np(str)} + controllee{infp(_)} + {np(dat)}
obiecać: perf: subj{np(str)} + {np(dat)} + {or}
obiecać: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
obiecywać: imperf: subj,controller{np(str)} + obj,controllee{np(str); cp(że); ncp(str,że); infp(_)} + {np(dat)}
obiecywać: imperf: subj{np(str)} + obj{or} + {np(dat)}
obiegać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obiegać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
obierać: imperf: subj{np(str)} + obj{np(part)} + {np(inst)} + {prepnp(z,gen)}
obierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
obierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
obierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
obierać się: imperf: subj{np(str)}
obijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
obijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
obijać się: imperf: subj{np(str); cp(int); cp(że); ncp(str,że)} + {np(dat)} + {preplexnp(o,acc,sg,'ucho',natr)}
obijać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
obijać się: imperf: subj{np(str)} + {xp(locat)}
objadać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
objadać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
objadać się: imperf: subj{np(str)} + {xp(mod)}
objaśniać: imperf: subj{np(str)} + {np(dat)} + {or}
objaśniać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)}
objaśniać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
objaśniać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(co do)}
objaśniać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
objaśniać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
objaśniać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
objaśniać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
objaśniać: imperf: subj{np(str)} + obj{np(str)} + {or}
objaśniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
objaśnić: perf: subj{np(str)} + {np(dat)} + {or}
objaśnić: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
objaśnić: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
objaśnić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(co do)}
objaśnić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
objaśnić: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
objaśnić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
objaśnić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
objaśnić: perf: subj{np(str)} + obj{np(str)} + {or}
objaśnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
objawiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
objawiać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
objawiać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
objawiać: imperf: subj{np(str)} + {or}
objawiać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
objawiać się: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
objawiać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
objawić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
objawić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
objawić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
objawić: perf: subj{np(str)} + {or}
objawić się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
objawić się: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
objawić się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
objąć: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
objąć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
objąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
objąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
objąć się: perf: subj{np(str)} + {prepnp(z,inst)}
objechać: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
objechać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
objechać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
objeżdżać: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
objeżdżać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
objeżdżać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
oblać: perf: subj{np(str)} + {np(inst)} + {refl}
oblać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
oblać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
oblać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
oblać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
oblać się: perf: subj{np(str)} + {np(inst)}
oblec: perf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
oblec: perf: subj{np(str)} + {np(inst)} + {refl}
oblec: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
oblec: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
oblec: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
oblec: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
oblegać: imperf: subj{np(str)} + obj{np(str)}
oblepiać: imperf: subj{np(str)} + {np(inst)} + {refl}
oblepiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
oblepiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
oblepiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
oblepiać się: imperf: subj{np(str)} + {np(inst)}
oblepiać się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
oblewać: imperf: subj{np(str)} + {np(inst)} + {refl}
oblewać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
oblewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
oblewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
oblewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
oblewać się: imperf: subj{np(str)} + {np(inst)}
obliczać: imperf: subj{np(str)} + {cp(int)}
obliczać: imperf: subj{np(str)} + {cp(że)}
obliczać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
obliczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
obliczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obliczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
obliczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
obliczyć się: perf: subj{np(str)} + {prepnp(na,acc)}
obligować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
obligować: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
oblizać się: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
oblizać się: perf: subj{np(str)} + {xp(mod)}
oblizywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
oblizywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
oblizywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
oblizywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
oblizywać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
oblizywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
oblizywać się: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'myśl',atr)}
oblizywać się: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'widok',atr)}
oblizywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
oblizywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
obłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
obłożyć się: perf: subj{np(str)} + {np(inst)}
obmacywać: imperf: subj{np(str)} + {np(inst)} + {refl}
obmacywać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
obmacywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
obmacywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obmacywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc); xp(locat)}
obmacywać: imperf: subj{np(str)} + {prepnp(po,loc)} + {refl}
obmacywać: imperf: subj{np(str)} + {xp(locat)} + {refl}
obmacywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
obmyć: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
obmyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
obmyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(locat)}
obmyć: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(locat)} + {refl}
obmyślać: imperf: subj{np(str)} + {cp(int)}
obmyślać: imperf: subj{np(str)} + obj{np(str)}
obmyślić: perf: subj{np(str)} + {cp(int)}
obmyślić: perf: subj{np(str)} + obj{np(str)}
obnażać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
obnażać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
obnażyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
obnażyć się: perf: subj{np(str)} + {prepnp(przed,inst)}
obniżać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
obniżać się: imperf: subj{np(str)}
obniżyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
obniżyć się: perf: subj{np(str)}
obnosić się: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
obnosić się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
obowiązywać: imperf: subj{np(str)} + {np(str)}
obowiązywać: imperf: subj{np(str)} + {xp(dur)}
obrabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obrabiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
obrabować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
obrabować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
obracać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
obracać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
obracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
obracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
obracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
obracać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
obracać się: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
obracać się: imperf: subj{np(str)} + {prepadjp(na,acc)}
obracać się: imperf: subj{np(str)} + {prepnp(na,acc)}
obracać się: imperf: subj{np(str)} + {prepnp(na,loc)}
obracać się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
obracać się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
obrać: perf: subj{np(str)} + {np(inst)} + {refl}
obrać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
obrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
obrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
obrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
obradować: imperf: subj{np(str)} + {prepnp(nad,inst); comprepnp(w sprawie); prepncp(nad,inst,int)}
obradować: imperf: subj{np(str)} + {prepnp(o,loc); comprepnp(na temat); prepncp(o,loc,int)}
obrastać: imperf: subj{np(str)} + {np(inst)}
obrastać: imperf: subj{np(str)} + obj{np(str)}
obrastać: imperf: subj{np(str)} + {prepnp(w,acc)}
obrazić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obrazić się: perf: subj{np(str)} + {or}
obrazić się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
obrazić się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
obrazić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
obrazić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
obrazować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str); cp(że); ncp(str,int); ncp(str,że)} + {np(inst)}
obrażać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obrażać się: imperf: subj{np(str)} + {or}
obrażać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
obrażać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
obrażać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepncp(o,acc,że)}
obrażać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepncp(za,acc,że)}
obrażać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc)}
obrażać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc)}
obronić: perf: subj{np(str)} + {ncp(str,że)}
obronić: perf: subj{np(str)} + {np(inst)} + {refl}
obronić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obronić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
obronić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
obronić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
obronić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
obronić: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
obronić: perf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
obronić się: perf: subj{np(str)} + {np(dat)}
obronić się: perf: subj{np(str)} + {xp(locat)}
obrosnąć: perf: subj{np(str)} + {np(inst)}
obrosnąć: perf: subj{np(str)} + obj{np(str)}
obrosnąć: perf: subj{np(str)} + {prepnp(w,acc)}
obrócić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
obrócić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
obrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
obrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
obrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
obrócić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
obrócić się: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
obrócić się: perf: subj{np(str)} + {prepadjp(na,acc)}
obrócić się: perf: subj{np(str)} + {prepnp(na,acc)}
obrócić się: perf: subj{np(str)} + {prepnp(na,loc)}
obrócić się: perf: subj{np(str)} + {prepnp(przeciw,dat)}
obrócić się: perf: subj{np(str)} + {prepnp(wokół,gen)}
obruszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
obruszyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
obruszyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
obrywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {prepnp(po,loc)}
obrywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {prepnp(w,acc)}
obrywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(przez,acc)}
obrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
obrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
obrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
obrywać się: imperf: {np(dat)} + {prepnp(od,gen)} + {cp(że)}
obrywać się: imperf: {np(dat)} + {prepnp(od,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
obrywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
obrywać się: imperf: subj{np(str)} + {prepnp(pod,inst)}
obrywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
obrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obrzucić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obsadzać: perf: subj{np(str)} + {np(inst)} + {refl}
obsadzać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obsadzać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {advp(misc)}
obsadzać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
obsadzać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
obsadzać: perf: subj{np(str)} + {prepnp(na,loc)} + {refl}
obsadzać: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
obsadzić: perf: subj{np(str)} + {np(inst)} + {refl}
obsadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obsadzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {advp(misc)}
obsadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
obsadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
obsadzić: perf: subj{np(str)} + {prepnp(na,loc)} + {refl}
obsadzić: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
obserwować: imperf: subj{np(str)} + {cp(int)}
obserwować: imperf: subj{np(str)} + {cp(jak)}
obserwować: imperf: subj{np(str)} + {cp(że)}
obserwować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
obsługiwać: imperf: subj{np(str)} + obj{np(str)}
obsługiwać: imperf: subj{np(str)} + {refl}
obsłużyć: perf: subj{np(str)} + obj{np(str)}
obsłużyć: perf: subj{np(str)} + {refl}
obstawać: imperf: subj{np(str)} + {cp(że)}
obstawać: imperf: subj{np(str)} + {cp(żeby)}
obstawać: imperf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,że); prepncp(przy,loc,żeby)}
obstawać: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,że); prepncp(za,inst,żeby)}
obstawiać: imperf: subj{np(str)} + {cp(int)}
obstawiać: imperf: subj{np(str)} + {cp(że)}
obstawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obstawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
obstawiać: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,że)}
obstawiać się: imperf: subj{np(str)} + {np(inst)}
obstawić: perf: subj{np(str)} + {cp(int)}
obstawić: perf: subj{np(str)} + {cp(że)}
obstawić: perf: subj{np(str)} + {np(inst)} + {refl}
obstawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
obstawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
obstawić: perf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,że)}
obsunąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
obsunąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
obsunąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
obsunąć się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
obsunąć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
obsunąć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
obsunąć się: perf: subj{np(str)} + {xp(locat)}
obsypać: perf: subj{np(str)} + {np(inst)} + {refl}
obsypać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obsypać się: perf: subj{np(str)} + {xp(abl)}
obsypać się: perf: subj{np(str)} + {xp(adl)}
obsypywać: imperf: subj{np(str)} + {np(inst)} + {refl}
obsypywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
obsypywać się: imperf: subj{np(str)} + {xp(abl)}
obsypywać się: imperf: subj{np(str)} + {xp(adl)}
obudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
obudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
obudzić się: perf: subj,controller{np(str)} + controllee{adjp(inst)}
obudzić się: perf: subj,controller{np(str)} + controllee{np(inst)}
obudzić się: perf: subj{np(str)} + {prepnp(w,loc)}
obudzić się: perf: subj{np(str)} + {prepnp(z,gen)}
oburzać: imperf: subj{cp(gdy)} + {np(str)}
oburzać: imperf: subj{cp(jak)} + {np(str)}
oburzać: imperf: subj{cp(jeśli)} + {np(str)}
oburzać: imperf: subj{cp(kiedy)} + {np(str)}
oburzać: imperf: subj{cp(że)} + {np(str)}
oburzać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)} + {np(str)}
oburzać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
oburzać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
oburzać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
oburzać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {or}
oburzać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
oburzać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
oburzyć: perf: subj{cp(gdy)} + {np(str)}
oburzyć: perf: subj{cp(jak)} + {np(str)}
oburzyć: perf: subj{cp(jeśli)} + {np(str)}
oburzyć: perf: subj{cp(kiedy)} + {np(str)}
oburzyć: perf: subj{cp(że)} + {np(str)}
oburzyć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)} + {np(str)}
oburzyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
oburzyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
oburzyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
oburzyć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {or}
oburzyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
oburzyć się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
obuwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
obuwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
obuwać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
obwąchiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
obwąchiwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
obwąchiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
obwąchiwać się: imperf: subj{np(str)} + {prepnp(z,inst)}
obwieszczać: imperf: subj,controller{np(str)} + controllee{adjp(inst)} + {refl}
obwieszczać: imperf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
obwieszczać: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {refl}
obwieszczać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
obwieszczać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
obwieszczać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
obwieszczać: imperf: subj{np(str)} + {np(dat)} + {or}
obwieszczać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
obwieszczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
obwieszczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
obwieszczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
obwieszczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
obwieszczać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
obwieścić: perf: subj,controller{np(str)} + controllee{adjp(inst)} + {refl}
obwieścić: perf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
obwieścić: perf: subj{np(str)} + {np(dat)} + {or}
obwieścić: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
obwieścić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
obwieścić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
obwieścić: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
obwieścić: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
obwieścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
obwiniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
obwiniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
obwiniać: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {refl}
obwiniać: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {refl}
obwołać: perf: subj,controller{np(str)} + controllee{adjp(inst)} + {refl}
obwołać: perf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
obwołać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
obwołać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
obyć się: perf: subj{np(str)} + {np(inst)}
obyć się: perf: subj{np(str)} + {prepnp(bez,gen); prepncp(bez,gen,że); prepncp(bez,gen,żeby)}
obyć się: perf: subj{np(str)} + {prepnp(z,inst)}
obywać się: imperf: subj{np(str)} + {np(inst)}
obywać się: imperf: subj{np(str)} + {prepnp(bez,gen); prepncp(bez,gen,że); prepncp(bez,gen,żeby)}
obywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
ocalać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(od,gen)}
ocalać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(przed,inst)}
ocalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ocalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ocalać: imperf: subj{np(str)} + {prepnp(od,gen)} + {refl}
ocalać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
ocalać: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
ocaleć: perf: subj{np(str)} + {prepnp(od,gen)}
ocaleć: perf: subj{np(str)} + {prepnp(z,gen)}
ocalić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(od,gen)}
ocalić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(przed,inst)}
ocalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ocalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ocalić: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
ocalić: perf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
ocalić: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
oceniać: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {refl}
oceniać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
oceniać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
oceniać: imperf: subj{np(str)} + {cp(int)}
oceniać: imperf: subj{np(str)} + {cp(że)}
oceniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
oceniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
oceniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
oceniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
oceniać: imperf: subj{np(str)} + {or} + {refl}
oceniać: imperf: subj{np(str)} + {prepnp(na,acc)} + {refl}
ocenić: perf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {refl}
ocenić: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
ocenić: perf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
ocenić: perf: subj{np(str)} + {cp(int)}
ocenić: perf: subj{np(str)} + {cp(że)}
ocenić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
ocenić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
ocenić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
ocenić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
ocenić: perf: subj{np(str)} + {or} + {refl}
ocenić: perf: subj{np(str)} + {prepnp(na,acc)} + {refl}
ochłodzić: perf: subj{np(str)} + {np(inst)} + {refl}
ochłodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ochłodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
ochłodzić: perf: subj{np(str)} + {xp(locat)} + {refl}
ochłodzić się: perf: subj{np(str)} + {prepnp(o,acc)}
ochłodzić się: perf: subj{np(str)} + {xp(locat)}
ochłonąć: imperf: subj{np(str)} + {prepnp(z,gen)}
ochraniać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
ochraniać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)}
ochraniać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)} + {refl}
ochraniać: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)} + {refl}
ochronić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
ochronić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)}
ochronić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)} + {refl}
ochronić: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)} + {refl}
ochrzcić: perf: subj{np(str)} + {np(inst)} + {refl}
ochrzcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ochrzcić się: perf: subj{np(str)}
ociągać się: imperf: subj{np(str)} + {prepnp(z,inst)}
ociekać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
ocieplać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ocieplać się: imperf: subj{np(str)} + {prepnp(od,gen)}
ocieplać się: imperf: {xp(locat)}
ocieplić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ocieplić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ocieplić się: perf: {prepnp(do,gen)} + {xp(locat)}
ocieplić się: perf: {prepnp(o,acc)} + {xp(locat)}
ocieplić się: perf: subj{np(str)} + {prepnp(do,gen)}
ocieplić się: perf: subj{np(str)} + {prepnp(o,acc)}
ocierać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
ocierać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
ocierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
ocierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
ocierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
ocierać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
ocierać się: imperf: subj{np(str)} + {xp(locat)}
ocknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ocknąć się: perf: subj{np(str)} + {prepnp(z,gen)}
oczarować: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
oczarować się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
oczekiwać: imperf: subj{np(str)} + {cp(aż)}
oczekiwać: imperf: subj{np(str)} + obj{cp(żeby)} + {prepnp(od,gen)}
oczekiwać: imperf: subj{np(str)} + obj{cp(żeby)} + {prepnp(po,loc)}
oczekiwać: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(od,gen)}
oczekiwać: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(po,loc)}
oczekiwać: imperf: subj{np(str)} + obj{np(gen); ncp(gen,że); ncp(gen,żeby)} + {prepnp(od,gen)}
oczekiwać: imperf: subj{np(str)} + obj{np(gen); ncp(gen,że); ncp(gen,żeby)} + {prepnp(po,loc)}
oczekiwać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
oczyszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
oczyszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
oczyszczać się: imperf: subj{np(str)} + {prepnp(z,gen)}
oczyścić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
oczyścić: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
oczyścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
oczyścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
odbić: perf: {np(dat)}
odbić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odbić: perf: subj{np(str)} + {np(str)} + {prepnp(na,loc)}
odbić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odbić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
odbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
odbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
odbić: perf: subj{np(str)} + {xp(abl)}
odbić: perf: subj{np(str)} + {xp(adl)}
odbić się: perf: {np(dat)} + {np(inst)}
odbić się: perf: subj{np(str)} + controller{prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że)} + controllee{xp(mod)}
odbić się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odbić się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
odbić się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odbić się: perf: subj{np(str)} + {prepnp(na,loc); prepnp(w,loc)}
odbić się: perf: subj{np(str)} + {prepnp(w,loc)} + {lexnp(inst,sg,'echo',atr)}
odbić się: perf: subj{np(str)} + {xp(locat)} + {lexnp(inst,sg,'echo',atr)}
odbiec: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)}
odbiec: perf: subj{np(str)} + {np(str)}
odbiec: perf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
odbiec: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
odbiegać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)}
odbiegać: imperf: subj{np(str)} + {np(str)}
odbiegać: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
odbiegać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
odbierać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
odbierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odbierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odbierać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
odbijać: imperf: {np(dat)}
odbijać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odbijać: imperf: subj{np(str)} + {np(str)} + {prepnp(na,loc)} + {lexnp(dat,_,'siebie',natr)}
odbijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odbijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
odbijać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,pl,'ręka',ratr)}
odbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
odbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
odbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
odbijać: imperf: subj{np(str)} + {xp(abl)}
odbijać: imperf: subj{np(str)} + {xp(adl)}
odbijać się: imperf: {np(dat)} + {np(inst)}
odbijać się: imperf: {np(dat)} + {prepnp(po,loc)}
odbijać się: imperf: subj{np(str)} + controller{prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że)} + controllee{xp(mod)}
odbijać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odbijać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
odbijać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odbijać się: imperf: subj{np(str)} + {prepnp(na,loc); prepnp(w,loc)}
odbijać się: imperf: subj{np(str)} + {prepnp(w,loc)} + {lexnp(inst,sg,'echo',atr)}
odbijać się: imperf: subj{np(str)} + {xp(locat)} + {lexnp(inst,sg,'echo',atr)}
odblokować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odblokować się: perf: subj{np(str)} + {prepnp(na,acc)}
odblokować się: perf: subj{np(str)} + {xp(locat)} + {xp(mod)}
odbudować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odbudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odbudować się: perf: subj{np(str)} + {prepnp(z,gen)}
odbudowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odbudowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odbudowywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
odburknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
odburknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(żeby)}
odburknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {nonch}
odburknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
odbyć: perf: subj{np(str)} + obj{np(str)}
odbyć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
odbyć się: perf: subj{np(str)} + {xp(locat)}
odbyć się: perf: subj{np(str)} + {xp(temp)}
odbywać: imperf: subj{np(str)} + obj{np(str)}
odbywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
odbywać się: imperf: subj{np(str)} + {xp(locat)}
odbywać się: imperf: subj{np(str)} + {xp(temp)}
odchodzić: imperf: subj{np(str)} + {prepnp(do,gen)}
odchodzić: imperf: subj{np(str)} + {prepnp(na,acc)}
odchodzić: imperf: subj{np(str)} + {prepnp(od,gen)}
odchodzić: imperf: subj{np(str)} + {prepnp(z,gen)}
odchodzić: imperf: subj{np(str)} + {prepnp(z,inst)}
odchylać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
odchylać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odchylać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odchylać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(od,gen)}
odchylić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
odchylić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odchylić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odchylić się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(od,gen)}
odciąć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
odciąć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
odciąć się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
odciąć się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
odciąć się: imperf: subj{np(str)} + {np(dat)} + {or}
odciąć się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że)}
odciągać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {or}
odciągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odciągać się: imperf: subj{np(str)} + {preplexnp(w,loc,sg,'czas',natr)}
odciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odciągnąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
odciągnąć się: perf: subj{np(str)} + {prepnp(o,acc)}
odciążyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); prepncp(od,gen,żeby)}
odcinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że)}
odcinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
odcinać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
odcinać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
odcinać się: imperf: subj{np(str)} + {np(dat)} + {or}
odcinać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że)}
odcisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
odcisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odcisnąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odcisnąć się: perf: subj{np(str)} + {prepnp(na,loc)}
odcisnąć się: perf: subj{np(str)} + {xp(locat)}
odczekać: perf: subj{np(str)} + {np(str)} + {cp(aż)}
odczepić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
odczepić się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int)}
odczuć: perf: subj{np(str)} + {cp(żeby2)}
odczuć: perf: subj{np(str)} + {np(inst)} + {cp(int)}
odczuć: perf: subj{np(str)} + {np(inst)} + {cp(że)}
odczuć: perf: subj{np(str)} + {np(str)} + {xp(locat)}
odczuć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
odczuwać: imperf: subj{np(str)} + {cp(int)}
odczuwać: imperf: subj{np(str)} + {cp(jak)}
odczuwać: imperf: subj{np(str)} + {cp(jakoby)}
odczuwać: imperf: subj{np(str)} + {cp(że)}
odczuwać: imperf: subj{np(str)} + {cp(żeby2)}
odczuwać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
odczuwać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że); ncp(str,żeby2)}
odczytać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
odczytać: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {prepnp(z,gen)}
odczytać: perf: subj{np(str)} + {or}
odczytywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
odczytywać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {prepnp(z,gen)}
odczytywać: imperf: subj{np(str)} + {or}
oddać: perf: subj{np(str)} + {np(dat)} + {adjp(inst)} + {prepadjp(za,acc)}
oddać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
oddać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
oddać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
oddać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
oddać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
oddać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
oddać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
oddać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
oddać się: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'dyspozycja',atr)}
oddać się: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'niewola',atr)}
oddać się: perf: subj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
oddać się: perf: subj{np(str)} + {prepnp(w,acc)}
oddalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
oddalać się: imperf: subj{np(str)} + {prepnp(od,gen)}
oddalać się: imperf: subj{np(str)} + {xp(abl)}
oddalać się: imperf: subj{np(str)} + {xp(adl)}
oddalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
oddalić się: perf: subj{np(str)} + {prepnp(od,gen)}
oddalić się: perf: subj{np(str)} + {xp(abl)}
oddalić się: perf: subj{np(str)} + {xp(adl)}
oddawać: imperf: subj{np(str)} + {np(dat)} + {adjp(inst)} + {prepadjp(za,acc)}
oddawać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
oddawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
oddawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
oddawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
oddawać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
oddawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
oddawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
oddawać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
oddawać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'dyspozycja',atr)}
oddawać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'niewola',atr)}
oddawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
oddawać się: imperf: subj{np(str)} + {prepnp(w,acc)}
oddychać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(inst); prepnp(przez,acc)}
oddychać: imperf: subj{np(str)} + {np(inst); prepnp(przez,acc)}
oddziaływać: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)} + {np(inst)}
oddziaływać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
oddzielać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
oddzielać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
oddzielić: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)} + {refl}
oddzielić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
oddzielić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
odebrać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
odebrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odebrać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
odechcieć się: perf: controller{np(dat)} + controllee{infp(_)}
odechcieć się: perf: {np(dat)} + {np(gen)}
odegrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odegrać się: perf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(za,acc)}
odegrać się: perf: subj{np(str)} + {xp(locat)}
odejmować: imperf: {np(dat)} + {np(str)}
odejmować: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,pl,'rok',natr)}
odejmować: imperf: subj{np(str)} + {np(dat)} + {np(gen)}
odejmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odejmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odejść: perf: {np(dat)} + {np(str)}
odejść: perf: subj{np(str)} + {prepnp(do,gen)}
odejść: perf: subj{np(str)} + {prepnp(na,acc)}
odejść: perf: subj{np(str)} + {prepnp(od,gen)}
odejść: perf: subj{np(str)} + {prepnp(z,gen)}
odejść: perf: subj{np(str)} + {prepnp(z,inst)}
odepchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {xp(adl)}
odepchnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {xp(adl)}
odeprzeć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
odeprzeć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
odeprzeć: perf: subj{np(str)} + {np(dat)} + {or}
odeprzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
oderwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
oderwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
oderwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)}
oderwać się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
oderwać się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)} + {lexnp(inst,_,'myśl',natr)}
odesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odesłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odesłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
odesłać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odetchnąć: perf: subj{np(str)} + {np(inst)}
odetchnąć: perf: subj{np(str)} + {prepnp(po,loc)}
odetchnąć: perf: subj{np(str)} + {prepnp(przed,inst)}
odezwać się: perf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)} + {or}
odezwać się: perf: subj{np(str)} + controller{prepnp(o,loc)} + controllee{xp(mod)}
odezwać się: perf: subj{np(str)} + {cp(że)}
odezwać się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
odezwać się: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
odezwać się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)}
odezwać się: perf: subj{np(str)} + {prepnp(o,loc)} + {or}
odezwać się: perf: subj{np(str)} + {prepnp(przeciw,dat)}
odezwać się: perf: subj{np(str)} + {prepnp(w,loc)}
odgadnąć: perf: subj{np(str)} + {cp(int)}
odgadnąć: perf: subj{np(str)} + {cp(że)}
odgadnąć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
odgadywać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,gen)}
odgadywać: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(int)}
odgadywać: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
odganiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odganiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odganiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
odganiać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odgarnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
odgarniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
odgradzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odgradzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odgrażać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
odgrażać się: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
odgrażać się: imperf: subj{np(str)} + {np(dat)} + {or}
odgrodzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odgrodzić się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odgrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odgrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odgrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
odgrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
odgrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
odgrywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odgrywać się: imperf: subj{np(str)}
odgrywać się: imperf: subj{np(str)} + {np(dat)}
odgrywać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepncp(za,acc,int)}
odgrywać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(za,acc); prepncp(za,acc,że)}
odgrywać się: imperf: subj{np(str)} + {xp(locat)}
odgryźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odgryźć się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc)}
odgryźć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {prepnp(za,acc)}
odizolować: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {cp(żeby)}
odizolować: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {xp(locat)}
odizolować się: perf: subj{np(str)} + {prepnp(od,gen)} + {xp(locat)}
odjąć: perf: {np(dat)} + {np(str)}
odjąć: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,pl,'rok',natr)}
odjąć: perf: subj{np(str)} + {np(dat)} + {np(gen)}
odjąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odjąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odjechać: perf: subj{np(str)} + {np(inst)}
odjechać: perf: subj{np(str)} + {xp(abl)}
odjechać: perf: subj{np(str)} + {xp(adl)}
odjechać: perf: subj{np(str)} + {xp(temp)}
odjeżdżać: imperf: subj{np(str)} + {np(inst)}
odjeżdżać: imperf: subj{np(str)} + {xp(abl)}
odjeżdżać: imperf: subj{np(str)} + {xp(adl)}
odjeżdżać: imperf: subj{np(str)} + {xp(temp)}
odkleić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odkleić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
odkleić się: perf: subj{np(str)} + {prepnp(od,gen)}
odkleić się: perf: subj{np(str)} + {xp(abl)}
odkładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
odkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
odkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
odkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
odkładać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
odkopać: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {refl}
odkopać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
odkręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
odkręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
odkręcać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odkręcać się: imperf: subj{np(str)} + {prepnp(przez,acc)} + {cp(żeby)}
odkręcać się: imperf: subj{np(str)} + {xp(adl)}
odkręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
odkręcić się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odkręcić się: perf: subj{np(str)} + {prepnp(do,gen)}
odkręcić się: perf: subj{np(str)} + {xp(adl)}
odkryć: perf: subj{np(str)} + {ncp(str,int)}
odkryć: perf: subj{np(str)} + {ncp(str,że)}
odkryć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odkryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
odkryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
odkryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
odkryć: perf: subj{np(str)} + {or}
odkryć: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
odkryć: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
odkryć się: perf: subj{np(str)} + {prepnp(przed,inst)}
odkrywać: imperf: subj{np(str)} + {ncp(str,int)}
odkrywać: imperf: subj{np(str)} + {ncp(str,że)}
odkrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odkrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
odkrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
odkrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
odkrywać: imperf: subj{np(str)} + {or}
odkrywać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
odkrywać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
odkrywać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
odkupić: perf: subj{np(str)} + obj{np(str)} + {ncp(inst,że)}
odkupić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odkupić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odkupić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
odkupić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); xp(abl)} + {prepnp(za,acc)}
odkupić się: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)}
odkurzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odkurzyć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,loc,sg,'pamięć',natr)}
odkurzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odkurzyć: perf: subj{np(str)} + {xp(locat)}
odkurzyć się: perf: subj{np(str)}
odlać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(z,gen)}
odlać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odlać się: perf: subj{np(str)} + {xp(locat)}
odlatywać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
odlatywać: imperf: subj{np(str)} + {prepnp(na,loc)}
odlatywać: imperf: subj{np(str)} + {prepnp(od,gen)}
odlatywać: imperf: subj{np(str)} + {prepnp(z,gen)}
odlecieć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
odlecieć: perf: subj{np(str)} + {prepnp(na,loc)}
odlecieć: perf: subj{np(str)} + {prepnp(od,gen)}
odlecieć: perf: subj{np(str)} + {prepnp(z,gen)}
odliczać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(od,gen)}
odliczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odliczać: imperf: subj{np(str)} + {prepnp(do,gen)}
odliczać się: imperf: subj{np(str)} + {xp(locat)}
odliczyć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(od,gen)}
odliczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odliczyć: perf: subj{np(str)} + {prepnp(do,gen)}
odliczyć się: perf: subj{np(str)} + {xp(locat)}
odłączać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odłączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odłączać się: imperf: subj{np(str)} + {prepnp(od,gen)}
odłączyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odłączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odłączyć się: perf: subj{np(str)} + {prepnp(od,gen)}
odłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
odłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
odłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
odłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
odłożyć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
odmalować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(pred)} + {xp(locat)}
odmalować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)} + {xp(locat)}
odmalować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
odmalować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odmalować się: perf: subj{np(str)} + {preplexnp(na,loc,sg,'twarz',ratr)}
odmalować się: perf: subj{np(str)} + {preplexnp(w,loc,pl,'oko',ratr)}
odmawiać: imperf: subj{np(str)} + {np(dat)} + {np(gen); ncp(gen,że)}
odmawiać: imperf: subj{np(str)} + {np(str)} + {prepnp(od,gen)}
odmawiać: imperf: subj{np(str)} + obj{np(str)}
odmieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
odmieniać się: imperf: subj{np(str)} + {prepnp(przez,acc)}
odmienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
odmienić się: perf: {np(dat)}
odmienić się: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
odmówić: perf: subj{np(str)} + obj{np(gen); ncp(gen,że)} + {np(dat)}
odmówić: perf: subj{np(str)} + obj{np(str)}
odnajdywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen); xp(locat)}
odnajdywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
odnajdywać się: imperf: subj{np(str)} + {prepnp(u,gen)}
odnajdywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
odnajdywać się: imperf: subj{np(str)} + {xp(locat)}
odnaleźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen); xp(locat)}
odnaleźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); prepnp(w,loc); prepncp(w,loc,że)}
odnaleźć się: perf: subj{np(str)} + {prepnp(u,gen)}
odnaleźć się: perf: subj{np(str)} + {prepnp(w,loc)}
odnaleźć się: perf: subj{np(str)} + {xp(locat)}
odnawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odnawiać się: imperf: subj{np(str)} + {np(dat)}
odnawiać się: imperf: subj{np(str)} + {prepnp(u,gen)}
odnieść: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odnieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odnieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odnieść się: perf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)}
odnosić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odnosić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odnosić się: imperf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)}
odnotować: perf: subj{np(str)} + obj{cp(int)}
odnotować: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {xp(locat)}
odnotować: perf: subj{np(str)} + {or}
odnotowywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
odnotowywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
odnotowywać: imperf: subj{np(str)} + obj{cp(int)}
odnotowywać: imperf: subj{np(str)} + obj{cp(że)}
odnotowywać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {xp(locat)}
odnotowywać: imperf: subj{np(str)} + {or}
odnowić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odnowić się: perf: subj{np(str)} + {np(dat)}
odnowić się: perf: subj{np(str)} + {prepnp(u,gen)}
odpadać: imperf: subj{np(dat)} + {np(str)}
odpadać: imperf: subj{np(str)}
odpadać: imperf: subj{np(str)} + {prepnp(od,gen)}
odpadać: imperf: subj{np(str)} + {prepnp(z,gen)}
odpalać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
odpalać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(żeby)}
odpalać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
odpalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odpalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odpalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odpalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odpalać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
odpalać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odpalać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odpalić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
odpalić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(żeby)}
odpalić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
odpalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odpalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odpalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odpalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odpalić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
odpalić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odpalić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odparować: perf: subj{np(str)} + {np(dat)} + {cp(że)}
odparować: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
odparować: perf: subj{np(str)} + {np(dat)} + {or}
odparować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
odparować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
odparować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
odparować: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
odparować: perf: subj{np(str)} + {xp(abl)}
odparować: perf: subj{np(str)} + {xp(adl)}
odpaść: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odpaść: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odpędzać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odpędzać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
odpędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odpędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
odpiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odpiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
odpiąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odpiąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
odpiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odpiąć: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
odpiąć: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
odpiąć się: perf: subj{np(str)} + {np(dat)}
odpiąć się: perf: subj{np(str)} + {prepnp(od,gen)}
odpiąć się: perf: subj{np(str)} + {prepnp(z,gen)}
odpierać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
odpierać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
odpierać: imperf: subj{np(str)} + {np(dat)} + {or}
odpierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
odpisać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
odpisać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
odpisać: perf: subj{np(str)} + {np(dat)} + {or}
odpisać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(int)}
odpisać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
odpisać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)}
odpisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odpisać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
odpisać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
odpisywać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
odpisywać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
odpisywać: imperf: subj{np(str)} + {np(dat)} + {or}
odpisywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(int)}
odpisywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
odpisywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)}
odpisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odpisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
odpisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
odpisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
odpłacać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
odpłacać: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
odpłacać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
odpłacać się: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
odpłacić: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
odpłacić: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
odpłacić się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
odpłacić się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
odpłynąć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
odpłynąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odpłynąć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
odpływać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
odpływać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odpływać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
odpocząć: perf: subj{np(str)} + {prepnp(od,gen)}
odpocząć: perf: subj{np(str)} + {prepnp(po,loc); prepnp(przed,inst)}
odpoczywać: imperf: subj{np(str)} + {preplexnp(w,loc,sg,'pokój',atr)}
odpoczywać: imperf: subj{np(str)} + {prepnp(od,gen)}
odpoczywać: imperf: subj{np(str)} + {prepnp(po,loc); prepnp(przed,inst)}
odpokutować: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
odpokutować: perf: subj{np(str)} + obj{np(str)}
odpowiadać: imperf: subj,controllee{infp(_)} + controller{np(dat)}
odpowiadać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(na,acc)}
odpowiadać: imperf: subj{cp(że)} + {np(dat)}
odpowiadać: imperf: subj{np(str)} + {ncp(dat,żeby)}
odpowiadać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
odpowiadać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
odpowiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(int)}
odpowiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
odpowiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(żeby)}
odpowiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
odpowiadać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)}
odpowiadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
odpowiadać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że); prepncp(za,acc,żeby)}
odpowiadać: imperf: subj{np(str)} + {prepnp(wobec,gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że); prepncp(za,acc,żeby)}
odpowiadać: imperf: subj{np(str)} + {prepnp(z,gen)}
odpowiedzieć: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(na,acc)}
odpowiedzieć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
odpowiedzieć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(int)}
odpowiedzieć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
odpowiedzieć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(żeby)}
odpowiedzieć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
odpowiedzieć: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)}
odpowiedzieć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
odpowiedzieć: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
odpowiedzieć: perf: subj{np(str)} + {prepnp(wobec,gen)} + {prepnp(za,acc)}
odpowiedzieć: perf: subj{np(str)} + {prepnp(z,gen)}
odpracować: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
odprawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(abl)} + {xp(adl)}
odprawiać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przez,acc)}
odprawiać się: imperf: subj{np(str)} + {xp(locat)}
odprawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(abl)} + {xp(adl)}
odprawić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przez,acc)}
odprawić się: perf: subj{np(str)} + {xp(locat)}
odprężać: imperf: subj{np(str)} + {advp(misc)} + {refl}
odprężać: imperf: subj{np(str)} + {np(inst)} + {refl}
odprężać: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
odprężać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
odprężać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
odprężać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
odprężać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odprężać: imperf: subj{np(str)} + {prepnp(przy,loc)} + {refl}
odprężać: imperf: subj{np(str)} + {xp(locat)} + {refl}
odprężyć: perf: subj{np(str)} + obj{np(str)}
odprężyć się: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,jak)}
odprężyć się: perf: subj{np(str)} + {prepnp(przed,inst); prepncp(przed,inst,jak)}
odprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); xp(adl)} + {xp(abl)}
odprowadzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); xp(adl)} + {xp(abl)}
odpuszczać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
odpuszczać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
odpuszczać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
odpuścić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
odpuścić: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
odpuścić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
odpychać: imperf: subj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)} + {np(str)}
odpychać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {preplexnp(od,gen,_,'siebie',natr)}
odpychać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {xp(adl)}
odpychać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {xp(adl)}
odrabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
odradzać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
odradzać: imperf: subj{np(str)} + {np(dat)} + {ncp(str,żeby)}
odradzać: imperf: subj{np(str)} + {np(dat)} + {or}
odradzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odradzać się: imperf: subj{np(str)} + {prepnp(w,loc)}
odremontować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odremontować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
odrestaurować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odrobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
odroczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
odrodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odrodzić się: perf: subj{np(str)} + {prepnp(w,loc)}
odróżniać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)} + {prepnp(od,gen)}
odróżniać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
odróżniać: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(int)}
odróżniać: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(że)}
odróżniać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(od,gen)}
odróżnić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)} + {prepnp(od,gen)}
odróżnić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
odróżnić: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(int)}
odróżnić: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(że)}
odróżnić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(od,gen)}
odrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
odrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
odrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)}
odrywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odrywać się: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)} + {lexnp(inst,_,'myśl',natr)}
odrzec: perf: subj{np(str)} + {np(dat)} + {np(str)} + {prepnp(na,acc)}
odrzec: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
odrzec: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(żeby)}
odrzec: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
odrzec się: perf: subj{np(str)} + {np(gen)}
odrzec się: perf: subj{np(str)} + {prepnp(od,gen)}
odrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odrzucać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {prepnp(od,gen)}
odrzucać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(od,gen)}
odrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odrzucać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odrzucić: perf: {np(str)} + {prepnp(od,gen)}
odrzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odrzucić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
odrzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odrzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odrzucić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odsiadywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odsiedzieć: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odskoczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {prepnp(z,gen)} + {xp(locat)}
odskoczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)} + {xp(locat)}
odskoczyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)} + {prepnp(z,gen)} + {xp(locat)}
odskoczyć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(od,gen)} + {prepnp(z,gen)} + {xp(locat)}
odskoczyć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
odsłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odsłaniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
odsłaniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
odsłaniać się: imperf: subj{np(str)} + {np(dat)}
odsłaniać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
odsłaniać się: imperf: subj{np(str)} + {prepnp(wobec,gen)}
odsłonić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odsłonić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
odsłonić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
odsłonić się: perf: subj{np(str)} + {np(dat)}
odsłonić się: perf: subj{np(str)} + {prepnp(przed,inst)}
odsłonić się: perf: subj{np(str)} + {prepnp(wobec,gen)}
odsprzedać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(po,loc)}
odsprzedać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
odsprzedać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
odstawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
odstawać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
odstawać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odstawać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(od,gen)}
odstawać: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(od,gen)}
odstawać: imperf: subj{np(str)} + {prepnp(od,gen)} + {prepnp(w,loc)}
odstawać: imperf: subj{np(str)} + {xp(adl)}
odstawać się: imperf: subj{np(str)}
odstawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
odstawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
odstawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odstawiać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
odstawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
odstawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
odstawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odstawić się: perf: subj,controller{np(str)} + controllee{xp(mod)}
odstawić się: perf: subj{np(str)} + {prepnp(w,acc)}
odstąpić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
odstąpić: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
odstępować: imperf: subj{np(str)} + obj{np(str)}
odstępować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
odstępować: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
odstraszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(od,gen)}
odstraszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
odstraszyć: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(od,gen)}
odstraszyć: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
odstręczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,żeby)}
odsunąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odsunąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odsunąć się: perf: subj{np(str)} + {prepnp(od,gen)}
odsunąć się: perf: subj{np(str)} + {xp(adl)}
odsuwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odsuwać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odsuwać się: imperf: subj{np(str)} + {prepnp(od,gen)}
odsuwać się: imperf: subj{np(str)} + {xp(adl)}
odsyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odsyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odsyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
odsyłać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odszukać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)} + {xp(locat)}
odszukać: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
odszukać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
odszukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
odszukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
odśnieżać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
odśpiewać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odśpiewać: perf: subj{np(str)} + {or}
odświeżyć: perf: subj{np(str)} + {np(inst)} + {refl}
odświeżyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odświeżyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
odświeżyć się: perf: subj{np(str)}
odtrącać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odtrącać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odtrącić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odtrącić: perf: subj{np(str)} + obj{np(str)} + {or}
odtrącić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odtwarzać: imperf: subj{np(str)} + {cp(int)}
odtwarzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odtworzyć: perf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int)}
odtworzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
odtworzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
odtworzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odtworzyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odtworzyć się: perf: subj{np(str)}
oduczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(imperf)} + {np(inst)}
oduczyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
oduczyć: perf: subj{np(str)} + obj{np(str)} + {np(gen); ncp(gen,że); ncp(gen,żeby)} + {np(inst)}
oduczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
oduczyć się: perf: subj,controller{np(str)} + controllee{infp(imperf)} + {np(inst)}
oduczyć się: perf: subj{np(str)} + {cp(że)}
oduczyć się: perf: subj{np(str)} + {np(gen); ncp(gen,że); ncp(gen,żeby)} + {np(inst)}
oduczyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
odwalić: perf: {np(dat)} + {comprepnp(z powodu)}
odwalić: perf: {np(dat)} + {preplexnp(na,loc,sg,'punkt',atr)}
odwalić: perf: {np(dat)} + {prepnp(od,gen)}
odwalić: perf: {np(dat)} + {prepnp(z,gen)}
odwalić: perf: subj{np(str)} + {lexnp(acc,sg,'kita',natr)}
odwalić: perf: subj{np(str)} + {np(dat)}
odwalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odwalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
odwalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
odwalić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
odwalić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odwalić się: perf: subj,controller{np(str)} + controllee{xp(mod)}
odwalić się: perf: subj{np(str)} + {prepnp(od,gen)}
odwalić się: perf: subj{np(str)} + {prepnp(w,acc)}
odważyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odważyć się: perf: subj,controller{np(str)} + controllee{infp(_)}
odważyć się: perf: subj{np(str)} + {cp(żeby)}
odważyć się: perf: subj{np(str)} + {or}
odważyć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
odwdzięczyć się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
odwdzięczyć się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
odwiedzać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odwiedzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
odwieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odwieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odwieźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
odwieźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odwieźć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odwinąć: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
odwinąć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
odwinąć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
odwinąć: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
odwinąć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
odwlec: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odwlec: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
odwlec: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odwlec: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odwlec się: perf: subj{np(str)} + {prepnp(do,gen)}
odwlec się: perf: subj{np(str)} + {prepnp(o,acc)}
odwlekać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odwlekać: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
odwlekać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odwlekać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odwlekać: perf: subj{np(str)} + obj{np(str)} + {xp(dur)}
odwlekać się: perf: subj{np(str)} + {prepnp(do,gen)}
odwlekać się: perf: subj{np(str)} + {prepnp(o,acc)}
odwlekać się: perf: subj{np(str)} + {xp(dur)}
odwodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); prepncp(od,gen,żeby)}
odwodzić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odwołać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odwołać się: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
odwołać się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
odwołać się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
odwołać się: perf: subj{np(str)} + {prepnp(od,gen)} + {prepncp(od,gen,że)}
odwoływać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odwoływać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
odwoływać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
odwozić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
odwozić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
odwozić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
odwracać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
odwracać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
odwracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
odwracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odwracać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
odwracać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odwracać się: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
odwracać się: imperf: subj{np(str)} + {prepnp(na,loc)}
odwrócić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
odwrócić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odwrócić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
odwrócić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
odwrócić się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
odwrócić się: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
odwrócić się: perf: subj{np(str)} + {prepnp(na,loc)}
odwzajemniać: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
odwzajemniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
odwzajemniać się: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
odwzajemnić: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
odwzajemnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
odwzajemnić się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
odwzajemnić się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
odziać: perf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
odziać: perf: subj{np(str)} + {np(inst)} + {refl}
odziać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
odziać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
odziać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
odziać: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
odziedziczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
odznaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
odznaczać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
odznaczać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {xp(locat)}
odznaczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
odznaczyć się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
odznaczyć się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {xp(locat)}
odzwierciedlać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
odzwierciedlać się: imperf: subj{np(str)} + {prepnp(w,loc)}
odzwyczaić: perf: subj,controller{np(str)} + controllee{infp(imperf)} + {np(inst)} + {refl}
odzwyczaić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)} + {refl}
odzwyczaić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(imperf)} + {np(inst)}
odzwyczaić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)}
odzwyczajać: imperf: subj,controller{np(str)} + controllee{infp(_)} + {np(inst)} + {refl}
odzwyczajać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że)} + {refl}
odzwyczajać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(_)} + {np(inst)}
odzwyczajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że)}
odzyskać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odzyskać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odzyskiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
odzyskiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
odzywać się: imperf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)} + {or}
odzywać się: imperf: subj{np(str)} + controller{prepnp(o,loc)} + controllee{xp(mod)}
odzywać się: imperf: subj{np(str)} + {cp(że)}
odzywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
odzywać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
odzywać się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
odzywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
odzywać się: imperf: subj{np(str)} + {xp(locat)} + {or}
odżegnywać się: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,jakoby); prepncp(od,gen,że); prepncp(od,gen,żeby)}
odżyć: perf: subj{np(str)}
odżywać: imperf: subj{np(str)} + {np(inst)}
odżywiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
odżywiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
odżywiać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
odżywiać się: imperf: subj{np(str)} + {np(inst)}
oferować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
oferować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
oferować się: imperf: subj,controller{np(str)} + controllee{infp(_)}
oferować się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
oferować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
ofiarować: _: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {refl}
ofiarować: _: subj{np(str)} + {np(dat)} + {prepnp(za,acc)} + {refl}
ofiarować: _: subj{np(str)} + obj{np(str)} + {comprepnp(na rzecz)}
ofiarować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
ofiarować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
ofiarować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
ofiarować: _: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
ofiarować się: _: subj,controller{np(str)} + controllee{infp(_)}
ofiarować się: _: subj{np(str)} + {cp(że)}
ofiarować się: _: subj{np(str)} + {or}
ofiarować się: _: subj{np(str)} + {prepnp(z,inst)}
ofiarowywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {refl}
ofiarowywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc)} + {refl}
ofiarowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
ofiarowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
ofiarowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
ofiarowywać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
ofiarowywać się: imperf: subj{np(str)} + {cp(że)}
ofiarowywać się: imperf: subj{np(str)} + {or}
ofiarowywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
ogarnąć: perf: subj{np(str)} + obj{np(str)}
ogarnąć się: perf: subj{np(str)} + {prepnp(z,gen)}
ogarnąć się: perf: subj{np(str)} + {prepnp(z,inst)}
ogarniać: imperf: subj{np(str)} + {np(inst)} + {refl}
ogarniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ogarniać się: imperf: subj{np(str)}
oglądać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
oglądać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(w roli)}
oglądać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
oglądać: imperf: subj{np(str)} + obj{np(str)} + {cp(jak)}
oglądać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
oglądać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
oglądać: imperf: subj{np(str)} + {xp(locat)} + {refl}
oglądać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
oglądać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
oglądać się: imperf: subj{np(str)} + {prepnp(za,inst)}
ogłaszać: imperf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
ogłaszać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
ogłaszać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
ogłaszać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(za,acc)}
ogłaszać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
ogłaszać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)}
ogłaszać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
ogłaszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ogłaszać: imperf: subj{np(str)} + {or}
ogłaszać: imperf: subj{np(str)} + {prepnp(o,loc)}
ogłaszać się: imperf: subj{np(str)} + {or}
ogłosić: perf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
ogłosić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
ogłosić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
ogłosić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(za,acc)}
ogłosić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
ogłosić: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
ogłosić: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
ogłosić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ogłosić: perf: subj{np(str)} + {or}
ogłosić: perf: subj{np(str)} + {prepnp(o,loc)}
ogolić: perf: subj{np(str)} + {np(inst)} + {advp(misc)} + {refl}
ogolić: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
ogolić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {advp(misc)}
ogolić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ogolić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
ogolić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ograbić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ograbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ograć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ograć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ograć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ograć się: perf: subj{np(str)} + {prepnp(w,loc)}
ograć się: perf: subj{np(str)} + {prepnp(z,inst)}
ograniczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ograniczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ograniczać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(do,gen,żeby)}
ograniczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
ograniczać się: imperf: subj{np(str)} + {np(inst)}
ograniczać się: imperf: subj{np(str)} + {prepncp(do,gen,że)}
ograniczać się: imperf: subj{np(str)} + {prepncp(do,gen,żeby)}
ograniczać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
ograniczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ograniczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ograniczyć: perf: subj{np(str)} + obj{np(str)} + {prepncp(do,gen,żeby)}
ograniczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
ograniczyć się: perf: subj{np(str)} + {np(inst)}
ograniczyć się: perf: subj{np(str)} + {prepncp(do,gen,że)}
ograniczyć się: perf: subj{np(str)} + {prepncp(do,gen,żeby)}
ograniczyć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
ogrodzić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
ogrodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ogrodzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
ogrodzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
ogrodzić: perf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
ogrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ogrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ogrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ogrywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
ogrywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
ogrzać: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
ogrzać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
ogrzać się: perf: subj{np(str)} + {prepnp(od,gen)}
ogrzewać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
ogrzewać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
ogrzewać się: imperf: subj{np(str)} + {prepnp(od,gen)}
okaleczyć: perf: subj{np(str)} + {np(inst)} + {refl}
okaleczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
okazać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
okazać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
okazać się: perf: subj,controller{np(str)} + controllee{adjp(pred)}
okazać się: perf: subj,controller{np(str)} + controllee{infp(_)}
okazać się: perf: subj,controller{np(str)} + controllee{np(inst)}
okazać się: perf: subj{cp(int)}
okazać się: perf: subj{cp(że)}
okazywać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
okazywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
okazywać się: imperf: subj,controller{np(str)} + controllee{adjp(pred)}
okazywać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
okazywać się: imperf: subj,controller{np(str)} + controllee{np(inst)}
okazywać się: imperf: subj{cp(int)}
okazywać się: imperf: subj{cp(że)}
okiełznać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
okiełznać: perf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
oklaskiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
okładać: imperf: subj{np(str)} + {np(inst)} + {refl}
okładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
okładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
okładać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
okładać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
okłamać: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
okłamać: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
okłamywać: imperf: subj{np(str)} + {cp(że)} + {refl}
okłamywać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
okradać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
okradać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
okraść: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
okraść: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
okrążać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
okrążać: imperf: subj{np(str)} + obj{np(str)} + {xp(dur)}
okrążać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
okrążyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
okrążyć: perf: subj{np(str)} + obj{np(str)} + {xp(dur)}
okrążyć: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
określać: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {refl}
określać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
określać: imperf: subj{np(str)} + {cp(int)}
określać: imperf: subj{np(str)} + {cp(że)}
określać: imperf: subj{np(str)} + {np(inst)} + {refl}
określać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
określać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
określać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
określać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
określić: perf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {refl}
określić: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
określić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
określić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
określić: perf: subj{np(str)} + obj{cp(int)}
określić: perf: subj{np(str)} + obj{cp(że)}
określić się: perf: subj{np(str)} + {cp(int)}
określić się: perf: subj{np(str)} + {cp(że)}
okręcić: perf: {np(str)}
okręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
okręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
okręcić się: perf: subj{np(str)} + {prepnp(w,acc)}
okręcić się: perf: subj{np(str)} + {prepnp(wokół,gen)}
okryć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(od,gen)} + {refl}
okryć: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {prepnp(po,acc)} + {refl}
okryć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
okryć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(od,gen)}
okryć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {prepnp(po,acc)}
okryć się: perf: subj{np(str)} + {np(inst)}
okrywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(od,gen)} + {refl}
okrywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {prepnp(po,acc)} + {refl}
okrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
okrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(od,gen)}
okrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {prepnp(po,acc)}
okrywać się: imperf: subj{np(str)} + {np(inst)}
okrzepnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
okrzyknąć: perf: subj{np(str)} + controller{refl} + controllee{adjp(inst)}
okrzyknąć: perf: subj{np(str)} + controller{refl} + controllee{np(inst)}
okrzyknąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
okrzyknąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
okrzyknąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(za,acc)}
okrzyknąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
okupić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
okupić: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
okupić się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
okupować: imperf: subj{np(str)} + obj{np(str)}
olśnić: perf: subj{cp(int); cp(że)} + {np(str)} + {cp(gdy); cp(kiedy)}
olśnić: perf: subj{np(str)} + obj{np(str)} + {cp(gdy); cp(kiedy)}
olśnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
omawiać: imperf: subj{np(str)} + obj{np(str)}
omijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
omijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
omijać się: imperf: subj{np(str)} + {prepnp(z,inst)}
ominąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ominąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
ominąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
omotać: perf: subj{np(str)} + {np(inst)} + {refl}
omotać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
omotać: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
omotać: perf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
omotać się: perf: subj{np(str)} + {prepnp(o,acc)}
omotać się: perf: subj{np(str)} + {prepnp(wokół,gen)}
omówić: perf: subj{np(str)} + obj{np(str)}
omylić: perf: subj{np(str)} + obj{np(str)}
omylić się: perf: subj{np(str)} + {prepnp(co do,gen)}
omylić się: perf: subj{np(str)} + {prepnp(w,loc)}
onieśmielać: imperf: subj{cp(że)} + obj{np(str)}
onieśmielać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen)}
onieśmielać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
opadać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
opadać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
opadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
opadać: imperf: subj{np(str)} + {prepnp(o,acc)}
opalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
opalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
opalać się: imperf: subj{np(str)}
opalić: perf: subj{np(str)} + obj{np(str)}
opalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
opalić się: perf: subj{np(str)}
opamiętać się: imperf: subj{np(str)} + {cp(że)}
opanować: perf: subj{np(str)} + obj{np(str)}
opanować się: perf: subj{np(str)}
opanowywać: imperf: subj{np(str)} + obj{np(str)}
opanowywać się: imperf: subj{np(str)}
opaść: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
opaść: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
opaść: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
opaść: perf: subj{np(str)} + {prepnp(o,acc)}
opatentować: perf: subj{np(str)} + obj{cp(int)}
opatentować: perf: subj{np(str)} + obj{cp(że)}
opatentować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
opatrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
opatrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
opatrzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
opatrzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
opatrzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
opatrzyć się: perf: subj{np(str)} + {np(dat)}
operować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
operować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
operować: imperf: subj{np(str)} + {prepnp(na,loc)}
operować: imperf: subj{np(str)} + {xp(locat)}
opędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
opędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
opędzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
opędzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
opędzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
opędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
opędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
opędzić się: perf: subj{np(str)} + {np(dat)}
opędzić się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
opędzić się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
opiec: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); prepnp(na,loc); prepnp(nad,inst); prepnp(przy,loc); prepnp(w,loc)} + {advp(misc)}
opiec się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc); prepnp(nad,inst); prepnp(przy,loc); prepnp(w,loc)} + {advp(misc)}
opiec się: perf: subj{np(str)} + {np(gen)}
opiekować się: imperf: subj{np(str)} + {np(inst)}
opierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
opierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
opierać się: imperf: subj{np(str)} + {np(dat); ncp(dat,żeby)}
opierać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
opierać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
opierać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
opierać się: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że); prepncp(na,loc,żeby)}
opierać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
opierać się: imperf: subj{np(str)} + {xp(locat)}
opiewać: imperf: subj{np(str)} + obj{np(str)}
opiewać: imperf: subj{np(str)} + {prepnp(na,acc)}
opiniować: imperf: subj{np(str)} + {cp(int)}
opiniować: imperf: subj{np(str)} + {cp(że)}
opiniować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
opiniować: imperf: subj{np(str)} + {or}
opisać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
opisać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
opisać: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
opisać: perf: subj{np(str)} + obj{ncp(str,int)} + {np(dat)}
opisać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
opisać: perf: subj{np(str)} + {or}
opisywać: imperf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int); ncp(str,że)} + {np(dat)}
oplatać: imperf: subj{np(str)} + {np(inst)} + {refl}
oplatać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
oplatać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
oplatać się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
opłacać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
opłacać się: imperf: subj,controllee{infp(_)} + controller{np(dat)}
opłacać się: imperf: subj{cp(żeby)} + {np(dat)}
opłacać się: imperf: subj{np(str)} + {np(dat)}
opłacić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
opłacić się: perf: subj,controllee{infp(_)} + controller{np(dat)}
opłacić się: perf: subj{cp(żeby)} + {np(dat)}
opłacić się: perf: subj{np(str)} + {np(dat)}
opłakiwać: imperf: subj{np(str)} + obj{np(str)}
opłukać: perf: subj{np(str)} + {np(inst)} + {refl}
opłukać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
opłukać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
opłukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
opłukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
opłukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
opłukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
opłukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
opłukać: perf: subj{np(str)} + {prepnp(pod,inst)} + {refl}
opłukać: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
opłukać: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
opływać: imperf: subj{np(str)} + {np(inst)}
opływać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
opływać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
opływać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
opływać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
opływać: imperf: subj{np(str)} + {prepnp(w,acc)}
opływać: imperf: subj{np(str)} + {prepnp(w,loc)}
oponować: imperf: subj{np(str)} + {cp(jakoby)}
oponować: imperf: subj{np(str)} + {cp(że)}
oponować: imperf: subj{np(str)} + {cp(żeby)}
oponować: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
oponować: imperf: subj{np(str)} + {or}
oponować: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,jakoby); prepncp(przeciw,dat,że); prepncp(przeciw,dat,żeby)}
opowiadać: imperf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)} + {nonch}
opowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
opowiadać: imperf: subj{np(str)} + {np(dat)} + {or}
opowiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); cp(że); prepncp(o,loc,int); prepncp(o,loc,że)}
opowiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {nonch}
opowiadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
opowiadać: imperf: subj{np(str)} + {prepnp(o,loc)} + {cp(że)}
opowiedzieć: perf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)} + {nonch}
opowiedzieć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
opowiedzieć: perf: subj{np(str)} + {np(dat)} + {or}
opowiedzieć: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); cp(że); prepncp(o,loc,int); prepncp(o,loc,że)}
opowiedzieć: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {nonch}
opowiedzieć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
opowiedzieć: perf: subj{np(str)} + {prepnp(o,loc)} + {cp(że)}
opóźniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
opóźniać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
opóźniać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {comprepnp(z powodu)}
opóźniać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
opóźniać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
opóźnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
opóźnić się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
opóźnić się: perf: subj{np(str)} + {prepnp(o,acc)} + {comprepnp(z powodu)}
opóźnić się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
opóźnić się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
opracować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
opracować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
opracowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
oprawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
oprawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
oprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
oprowadzać: imperf: subj{np(str)} + {xp(mod)}
opróżniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
opróżniać się: imperf: subj{np(str)} + {prepnp(z,gen)}
opróżnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
opróżnić: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
opróżnić się: perf: subj{np(str)} + {prepnp(z,gen)}
oprzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
oprzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
oprzeć się: perf: subj{np(str)} + {np(dat); ncp(dat,żeby)}
oprzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
oprzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
oprzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
oprzeć się: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że); prepncp(na,loc,żeby)}
oprzeć się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
oprzeć się: perf: subj{np(str)} + {xp(locat)}
opublikować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
opuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
opuszczać: imperf: subj{np(str)} + {xp(adl)} + {refl}
opuszczać się: imperf: subj{np(str)} + {prepnp(w,loc)}
opuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
opuścić: perf: subj{np(str)} + {xp(adl)} + {refl}
opuścić się: perf: subj{np(str)} + {prepnp(w,loc)}
orać: imperf: subj,controller{np(str)} + controllee{xp(mod)}
orać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
orać: imperf: subj{np(str)} + {prepnp(w,acc)}
organizować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
organizować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
organizować się: imperf: subj{np(str)} + {cp(żeby)}
organizować się: imperf: subj{np(str)} + {prepnp(do,gen)}
organizować się: imperf: subj{np(str)} + {prepnp(w,acc)}
organizować się: imperf: subj{np(str)} + {prepnp(wobec,gen)}
orientować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
orientować: imperf: subj{np(str)} + {prepnp(na,acc)}
orientować: imperf: subj{np(str)} + {prepnp(według,gen)}
orientować się: imperf: subj{np(str)} + {cp(int)}
orientować się: imperf: subj{np(str)} + {cp(że)}
orientować się: imperf: subj{np(str)} + {prepnp(na,acc)}
orientować się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
orzec: perf: subj{np(str)} + {comprepnp(w sprawie)}
orzec: perf: subj{np(str)} + {cp(int)}
orzec: perf: subj{np(str)} + {cp(że)}
orzec: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
orzec: perf: subj{np(str)} + {or}
orzec: perf: subj{np(str)} + {prepnp(co do,gen)}
orzec: perf: subj{np(str)} + {prepnp(na,acc)}
orzec: perf: subj{np(str)} + {prepnp(o,loc)}
orzekać: imperf: subj{np(str)} + {comprepnp(w sprawie)}
orzekać: imperf: subj{np(str)} + {cp(int)}
orzekać: imperf: subj{np(str)} + {cp(że)}
orzekać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
orzekać: imperf: subj{np(str)} + {or}
orzekać: imperf: subj{np(str)} + {prepnp(co do,gen)}
orzekać: imperf: subj{np(str)} + {prepnp(na,acc)}
orzekać: imperf: subj{np(str)} + {prepnp(o,loc)}
osadzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
osadzać się: imperf: subj{np(str)} + {xp(locat)}
osadzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
osadzić: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
osadzić się: perf: subj{np(str)} + {xp(locat)}
osądzać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
osądzać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
osądzać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
osądzać: imperf: subj{np(str)} + {cp(int)}
osądzać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
osądzać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
osądzać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
osądzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
osądzać: imperf: subj{np(str)} + {or}
osądzić: perf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
osądzić: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
osądzić: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
osądzić: perf: subj{np(str)} + {cp(int)}
osądzić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
osądzić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
osądzić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
osądzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
osądzić: perf: subj{np(str)} + {or}
osiadać: imperf: subj{np(str)} + {xp(locat)}
osiągać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
osiągnąć: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
osiąść: imperf: subj{np(str)} + {xp(locat)}
osiedlać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
osiedlać się: imperf: subj{np(str)} + {xp(locat)}
osiedlić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
osiedlić się: perf: subj{np(str)} + {xp(locat)}
oskarżać: imperf: subj{np(str)} + {cp(że)} + {refl}
oskarżać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
oskarżać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(wobec,gen)}
oskarżać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepnp(za,acc); prepncp(o,acc,że)} + {prepnp(przed,inst)} + {or}
oskarżać: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {prepnp(przed,inst)} + {or} + {refl}
oskarżyć: perf: subj{np(str)} + {cp(że)} + {refl}
oskarżyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
oskarżyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(wobec,gen)}
oskarżyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepnp(za,acc); prepncp(o,acc,że)} + {prepnp(przed,inst)} + {or}
oskarżyć: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {prepnp(przed,inst)} + {or} + {refl}
osłabiać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {refl}
osłabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
osłabić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {refl}
osłabić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
osłabnąć: perf: subj{np(str)} + {prepnp(w,loc)}
osłabnąć: perf: subj{np(str)} + {prepnp(z,gen)}
osłaniać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
osłaniać: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)} + {refl}
osłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
osłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
osłodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
osłonić: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
osłonić: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)} + {refl}
osłonić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
osłonić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
ostrzec: perf: subj{np(str)} + obj{np(str)} + {cp(że); cp(żeby)}
ostrzec: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepnp(przed,inst); prepncp(o,loc,że); prepncp(przed,inst,że)}
ostrzec: perf: subj{np(str)} + {or}
ostrzegać: imperf: subj{np(str)} + obj{np(str)} + {cp(że); cp(żeby)}
ostrzegać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepnp(przed,inst); prepncp(o,loc,że); prepncp(przed,inst,że)}
ostrzegać: imperf: subj{np(str)} + {or}
ostrzeliwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ostrzeliwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ostrzeliwać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
ostrzeliwać się: imperf: subj{np(str)}
ostrzyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
ostrzyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ostrzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
ostudzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ostudzić: perf: subj{np(str)} + obj{np(str)} + {or}
ostygnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ostygnąć: perf: subj{np(str)} + {prepnp(na,loc)}
ostygnąć: perf: subj{np(str)} + {prepnp(od,gen)}
ostygnąć: perf: subj{np(str)} + {prepnp(w,loc)}
osunąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
osunąć się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
osunąć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
osunąć się: perf: subj{np(str)} + {prepnp(na,acc)}
osunąć się: perf: subj{np(str)} + {prepnp(w,acc)}
osuszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)} + {xp(mod)}
osuszyć się: perf: subj{np(str)} + {xp(mod)}
osuwać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
osuwać się: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
osuwać się: imperf: subj{np(str)} + {prepnp(na,acc)}
osuwać się: imperf: subj{np(str)} + {prepnp(z,gen)}
osuwać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
oswajać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(z,inst,int)}
oswajać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(z,inst,że)}
oswajać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
oswajać się: imperf: subj{np(str)} + {prepncp(z,inst,int)}
oswajać się: imperf: subj{np(str)} + {prepncp(z,inst,że)}
oswajać się: imperf: subj{np(str)} + {prepnp(z,inst)}
oswoić: perf: subj{np(str)} + obj{np(str)} + {prepncp(z,inst,int)}
oswoić: perf: subj{np(str)} + obj{np(str)} + {prepncp(z,inst,że)}
oswoić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
oswoić się: perf: subj{np(str)} + {prepncp(z,inst,int)}
oswoić się: perf: subj{np(str)} + {prepncp(z,inst,że)}
oswoić się: perf: subj{np(str)} + {prepnp(z,inst)}
oszacować: perf: subj{np(str)} + {cp(że)}
oszacować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
oszaleć: perf: subj{np(str)} + {preplexnp(na,loc,sg,'punkt',ratr)}
oszaleć: perf: subj{np(str)} + {prepnp(dla,gen)}
oszaleć: perf: subj{np(str)} + {prepnp(od,gen)}
oszaleć: perf: subj{np(str)} + {prepnp(za,inst)}
oszaleć: perf: subj{np(str)} + {prepnp(z,gen)}
oszczędzać: imperf: subj{np(str)} + obj{np(part); ncp(part,że)} + {np(dat)}
oszczędzać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(na,acc)}
oszczędzać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(na,loc); prepncp(na,loc,że)}
oszczędzać: imperf: subj{np(str)} + {refl}
oszczędzić: perf: subj{np(str)} + obj{np(part); ncp(part,że)} + {np(dat)}
oszczędzić: perf: subj{np(str)} + obj{np(part)} + {prepnp(na,acc)}
oszczędzić: perf: subj{np(str)} + obj{np(part)} + {prepnp(na,loc); prepncp(na,loc,że)}
oszczędzić: perf: subj{np(str)} + {refl}
oszołomić: perf: subj{cp(int)} + obj{np(str)}
oszołomić: perf: subj{cp(że)} + obj{np(str)}
oszołomić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
oszołomić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
oszukać: perf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
oszukać: perf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
oszukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
oszukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
oszukać się: perf: subj{np(str)} + {prepnp(na,loc)}
oszukiwać: imperf: subj{np(str)} + {cp(że)} + {refl}
oszukiwać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
oszukiwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
oszukiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
oszukiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
oszukiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
oszukiwać się: imperf: subj{np(str)} + {prepnp(na,loc)}
oślepić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
oślepić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
oślepić: perf: subj{np(str)} + {prepnp(na,acc)} + {refl}
oślepnąć: perf: subj{np(str)} + {prepnp(od,gen)}
oślepnąć: perf: subj{np(str)} + {prepnp(wskutek,gen)}
oślepnąć: perf: subj{np(str)} + {prepnp(z,gen)}
ośmielać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
ośmielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ośmielać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
ośmielać się: imperf: subj{np(str)} + {prepnp(na,acc)}
ośmielić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
ośmielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ośmielić się: perf: subj,controller{np(str)} + controllee{infp(_)}
ośmielić się: perf: subj{np(str)} + {prepnp(na,acc)}
ośmieszać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {prepnp(przed,inst)}
ośmieszać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {prepnp(wobec,gen)}
ośmieszać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(przed,inst)}
ośmieszać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(wobec,gen)}
ośmieszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
ośmieszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(wobec,gen)}
ośmieszać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(przed,inst)}
ośmieszać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(wobec,gen)}
ośmieszać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
ośmieszać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(wobec,gen)}
ośmieszyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {prepnp(przed,inst)}
ośmieszyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {prepnp(wobec,gen)}
ośmieszyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(przed,inst)}
ośmieszyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(wobec,gen)}
ośmieszyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
ośmieszyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(wobec,gen)}
ośmieszyć się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(przed,inst)}
ośmieszyć się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(wobec,gen)}
ośmieszyć się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
ośmieszyć się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(wobec,gen)}
oświadczać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
oświadczać: imperf: subj{np(str)} + {np(dat)} + {or}
oświadczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
oświadczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
oświadczać: imperf: subj{np(str)} + {prepnp(wobec,gen)} + {cp(że)}
oświadczać się: imperf: subj{np(str)} + {np(dat)}
oświadczyć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
oświadczyć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
oświadczyć: perf: subj{np(str)} + {np(dat)} + {or}
oświadczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
oświadczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc)}
oświadczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
oświadczyć: perf: subj{np(str)} + {prepnp(wobec,gen)} + {cp(że)}
oświadczyć: perf: subj{np(str)} + {prepnp(wobec,gen)} + {cp(żeby)}
oświadczyć: perf: subj{np(str)} + {prepnp(wobec,gen)} + {or}
oświadczyć się: perf: subj{np(str)} + {np(dat)}
oświadczyć się: perf: subj{np(str)} + {prepnp(o,acc)}
oświecić: perf: subj{cp(że)} + {np(str)}
oświecić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(co do)}
oświecić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
oświecić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w kwestii)}
oświecić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
oświecić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
oświecić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
oświetlać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
oświetlić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
otaczać: imperf: subj{np(str)} + {np(inst)} + {refl}
otaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
otoczyć: perf: subj{np(str)} + {np(inst)} + {refl}
otoczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
otruć: perf: subj{np(str)} + {np(inst)} + {refl}
otruć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
otrząsać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
otrząsać się: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int)}
otrząsać się: imperf: subj{np(str)} + {prepnp(z,gen)}
otrząsnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
otrząsnąć się: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
otrzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
otrzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
otrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
otrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
otrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
otrzeć się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
otrzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
otrzeć się: perf: subj{np(str)} + {xp(locat)}
otrzepać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
otrzepać: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
otrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
otrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
otrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
otrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
otrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
otrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
otulać: perf: subj{np(str)} + {np(inst)} + {refl}
otulać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
otulać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
otulać: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
otulić: perf: subj{np(str)} + {np(inst)} + {refl}
otulić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
otulić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
otulić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
otulić: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
otwierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
otwierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
otwierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
otwierać się: imperf: subj{np(str)} + {np(dat)}
otwierać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
otworzyć: perf: subj,controller{np(str)} + controllee{xp(mod)}
otworzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
otworzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
otworzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
otworzyć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
otworzyć się: perf: subj{np(str)} + {np(dat)}
owijać: imperf: subj{np(str)} + {np(inst)} + {refl}
owijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
owijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(koło,gen)}
owijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
owijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
owijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(wokół,gen)}
owijać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
owijać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(koło,gen)}
owijać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
owijać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(wokół,gen)}
owinąć: perf: subj{np(str)} + {np(inst)} + {refl}
owinąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
owinąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(koło,gen)}
owinąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
owinąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
owinąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(wokół,gen)}
owinąć: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
owinąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(koło,gen)}
owinąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
owinąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(wokół,gen)}
owładnąć: perf: subj{np(str)} + {np(inst)}
owładnąć: perf: subj{np(str)} + obj{np(str)}
owocować: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
ozdabiać: imperf: subj{np(str)} + {np(inst)} + {refl}
ozdabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ozdabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
ozdabiać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
ozdobić: perf: subj{np(str)} + {np(inst)} + {refl}
ozdobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ozdobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
ozdobić: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
oznaczać: imperf: subj{infp(_)} + {infp(_)}
oznaczać: imperf: subj{np(str)} + {cp(int)}
oznaczać: imperf: subj{np(str)} + {np(str); ncp(str,że)} + {prepnp(dla,gen)}
oznaczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
oznaczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
oznaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
oznaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
oznaczać: imperf: subj{np(str)} + {or}
oznaczać: imperf: subj{np(str)} + {prepnp(dla,gen)} + {cp(że)}
oznaczyć: perf: subj{np(str)} + {cp(że)}
oznaczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
oznaczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
oznaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
oznaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
oznajmiać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
oznajmiać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że); cp(żeby)}
oznajmiać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {or}
oznajmiać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
oznajmiać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
oznajmić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
oznajmić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że); cp(żeby)}
oznajmić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {or}
oznajmić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
oznajmić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
oznakować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
oznakować: _: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
ożenić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
ożenić się: perf: subj{np(str)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
ożenić się: perf: subj{np(str)} + {prepnp(z,gen)} + {prepnp(z,inst)}
ożyć: perf: subj{np(str)}
ożywać: imperf: subj{np(str)} + {prepnp(w,loc)}
ożywać: imperf: subj{np(str)} + {xp(locat)}
ożywiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ożywiać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
ożywić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ożywić się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
pachnąć: imperf: controller{np(dat)} + controllee{infp(_)}
pachnąć: imperf: controller{xp(locat)} + controllee{xp(mod)}
pachnąć: imperf: {np(inst)} + {xp(locat)}
pachnąć: imperf: {prepnp(od,gen)} + {xp(locat)}
pachnąć: imperf: subj,controller{np(str)} + controllee{xp(mod)}
pachnąć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
pachnąć: imperf: subj{np(str)} + {prepnp(od,gen)}
pachnieć: imperf: controller{np(dat)} + controllee{infp(_)}
pachnieć: imperf: controller{xp(locat)} + controllee{xp(mod)}
pachnieć: imperf: {np(inst)} + {xp(locat)}
pachnieć: imperf: {prepnp(od,gen)} + {xp(locat)}
pachnieć: imperf: subj,controller{np(str)} + controllee{xp(mod)}
pachnieć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
pachnieć: imperf: subj{np(str)} + {prepnp(od,gen)}
padać: imperf: subj{E}
padać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
padać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
padać: imperf: subj{np(str)} + {prepnp(na,acc)}
padać: imperf: subj{np(str)} + {prepnp(z,gen)}
pakować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pakować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pakować: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
pakować się: imperf: subj{np(str)} + {prepnp(w,acc)}
pakować się: imperf: subj{np(str)} + {xp(adl)}
palić: imperf: {np(str)} + {xp(locat)}
palić: imperf: subj{cp(żeby)} + {np(str)}
palić: imperf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
palić: imperf: subj{np(str)} + {np(str)} + {xp(locat)}
palić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
palić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'popiół',natr)}
palić się: imperf: {np(dat)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
palić się: imperf: subj,controller{np(str)} + controllee{infp(_)}
palić się: imperf: subj{np(str)} + {cp(żeby)}
palić się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(pod,inst,pl,'noga',natr)}
palić się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(pod,inst,pl,'stopa',natr)}
palić się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,pl,'ręka',natr)}
palić się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
palić się: imperf: subj{np(str)} + {prepnp(z,gen)}
palnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
palnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
palnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
palnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
palnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
palnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
palnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
palnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
palnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
palnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
palnąć: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)}
palnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
palnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pałać: imperf: subj{np(str)} + {np(dat)}
pałać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
pałać: imperf: subj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
pałać: imperf: subj{np(str)} + {prepnp(w,loc)}
pałać: imperf: subj{np(str)} + {prepnp(z,gen)}
pamiętać: imperf: subj,controller{np(str)} + controllee{infp(_)}
pamiętać: imperf: subj{np(str)} + {cp(żeby)}
pamiętać: imperf: subj{np(str)} + {np(str); cp(int); cp(jak); cp(że); ncp(str,int); ncp(str,jak); ncp(str,że); ncp(str,żeby2)}
pamiętać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(pred)}
pamiętać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
pamiętać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
pamiętać: imperf: subj{np(str)} + obj{np(str)}
pamiętać: imperf: subj{np(str)} + {prepnp(o,loc); cp(int); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
panować: imperf: subj{np(str)} + {np(dat)}
panować: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że); prepncp(nad,inst,żeby)}
panować: imperf: subj{np(str)} + {xp(locat)}
panować: imperf: subj{np(str)} + {xp(temp)}
parać się: imperf: subj{np(str)} + {np(inst)}
paradować: imperf: subj{np(str)} + {xp(locat)}
paradować: imperf: subj{np(str)} + {xp(perl)}
paraliżować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)}
paraliżować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
parkować: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
parkować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
parować: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(perl)}
parować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
parować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
parować się: imperf: subj{np(str)} + {prepnp(z,inst)}
parskać: imperf: subj{np(str)} + {advp(misc)} + {or}
parskać: imperf: subj{np(str)} + {cp(aż)}
parskać: imperf: subj{np(str)} + {cp(że)}
parskać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
parsknąć: perf: subj{np(str)} + {np(inst)}
parsknąć: perf: subj{np(str)} + {or}
parzyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
parzyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
parzyć się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
parzyć się: imperf: subj{np(str)} + {prepnp(z,inst)}
pasać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pasjonować: imperf: subj{cp(int)} + {np(str)} + {prepnp(w,loc)}
pasjonować: imperf: subj{cp(że)} + {np(str)} + {prepnp(w,loc)}
pasjonować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)} + {prepnp(w,loc)}
pasjonować się: imperf: subj{np(str)} + {cp(int)}
pasjonować się: imperf: subj{np(str)} + {cp(że)}
pasjonować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
pasować: imperf: subj,controllee{infp(_)} + controller{np(dat)}
pasować: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
pasować: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(do,gen)}
pasować: imperf: subj{cp(int)} + {np(dat)}
pasować: imperf: subj{cp(żeby)} + {np(dat)}
pasować: imperf: subj{cp(że)} + {np(dat)}
pasować: imperf: subj{np(str); ncp(str,że)} + {np(dat)}
pasować: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
pasować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(na,acc)} + {np(inst)}
pastwić się: imperf: subj{np(str)} + {prepnp(nad,inst)}
paść: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
paść: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
paść: perf: {np(dat)} + {prepnp(na,acc)}
paść: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
paść: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
paść: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
paść: perf: subj{np(str)} + {or}
paść: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)}
paść: perf: subj{np(str)} + {prepnp(pod,inst)}
paść: perf: subj{np(str)} + {prepnp(z,gen)}
paść się: imperf: subj{np(str)} + {np(inst)}
paść się: imperf: subj{np(str)} + {prepnp(na,loc)}
patrolować: imperf: subj{np(str)} + {cp(czy)}
patrolować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
patronować: imperf: subj{np(str)} + {np(dat)}
patrzeć: imperf: {np(dat)} + {advp(misc)} + {preplexnp(z,gen,pl,'oko',atr)}
patrzeć: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
patrzeć: imperf: subj{np(str)} + {cp(int)}
patrzeć: imperf: subj{np(str)} + {cp(jak)}
patrzeć: imperf: subj{np(str)} + {cp(że)}
patrzeć: imperf: subj{np(str)} + {cp(żeby)}
patrzeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepnp(w,acc)}
patrzeć: imperf: subj{np(str)} + {np(gen)}
patrzeć: imperf: subj{np(str)} + {prepncp(na,acc,żeby)}
patrzeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(czy)}
patrzeć: imperf: subj{np(str)} + {prepnp(na,acc); cp(czy); cp(jak); prepncp(na,acc,int); prepncp(na,acc,jak); prepncp(na,acc,że)}
patrzeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {lexnp(inst,sg,'wilk',natr)}
patrzeć: imperf: subj{np(str)} + {prepnp(po,loc)}
patrzeć: imperf: subj{np(str)} + {prepnp(przez,acc)}
patrzeć: imperf: subj{np(str)} + {prepnp(za,inst)}
patrzeć się: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
patrzeć się: imperf: subj{np(str)} + {cp(int)}
patrzeć się: imperf: subj{np(str)} + {cp(jak); cp(że)}
patrzeć się: imperf: subj{np(str)} + {cp(żeby)}
patrzeć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
patrzeć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
patrzeć się: imperf: subj{np(str)} + {prepncp(na,acc,int)}
patrzeć się: imperf: subj{np(str)} + {prepncp(na,acc,jak)}
patrzeć się: imperf: subj{np(str)} + {prepnp(po,loc)}
patrzeć się: imperf: subj{np(str)} + {prepnp(przez,acc)}
patrzyć: imperf: {np(dat)} + {advp(misc)} + {preplexnp(z,gen,pl,'oko',atr)}
patrzyć: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
patrzyć: imperf: subj{np(str)} + {cp(int)}
patrzyć: imperf: subj{np(str)} + {cp(jak); cp(że)}
patrzyć: imperf: subj{np(str)} + {cp(żeby)}
patrzyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepnp(w,acc)}
patrzyć: imperf: subj{np(str)} + {np(gen)}
patrzyć: imperf: subj{np(str)} + {prepncp(na,acc,żeby)}
patrzyć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(czy)}
patrzyć: imperf: subj{np(str)} + {prepnp(na,acc); cp(czy); cp(jak); prepncp(na,acc,int); prepncp(na,acc,jak); prepncp(na,acc,że)}
patrzyć: imperf: subj{np(str)} + {prepnp(na,acc)} + {lexnp(inst,sg,'wilk',natr)}
patrzyć: imperf: subj{np(str)} + {prepnp(po,loc)}
patrzyć: imperf: subj{np(str)} + {prepnp(przez,acc)}
patrzyć: imperf: subj{np(str)} + {prepnp(za,inst)}
patrzyć się: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
patrzyć się: imperf: subj{np(str)} + {cp(int)}
patrzyć się: imperf: subj{np(str)} + {cp(jak)}
patrzyć się: imperf: subj{np(str)} + {cp(że)}
patrzyć się: imperf: subj{np(str)} + {cp(żeby)}
patrzyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
patrzyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
patrzyć się: imperf: subj{np(str)} + {prepncp(na,acc,int)}
patrzyć się: imperf: subj{np(str)} + {prepncp(na,acc,jak)}
patrzyć się: imperf: subj{np(str)} + {prepnp(po,loc)}
patrzyć się: imperf: subj{np(str)} + {prepnp(przez,acc)}
pauzować: imperf: subj{np(str)}
pauzować: imperf: subj{np(str)} + obj{np(str)}
pchać: imperf: subj{np(str)} + {np(str)} + {cp(żeby)}
pchać: imperf: subj{np(str)} + {np(str)} + {prepncp(do,gen,żeby)}
pchać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
pchać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pchać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pchać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
pchać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
pchać się: imperf: subj{np(str)} + {cp(żeby)}
pchać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
pchać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
pchać się: imperf: subj{np(str)} + {prepncp(do,gen,żeby)}
pchać się: imperf: subj{np(str)} + {prepnp(między,acc)}
pchać się: imperf: subj{np(str)} + {prepnp(na,acc)}
pchać się: imperf: subj{np(str)} + {xp(adl)}
pchnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
pchnąć: perf: subj{np(str)} + {np(str)} + {cp(żeby)}
pchnąć: perf: subj{np(str)} + {np(str)} + {prepncp(do,gen,żeby)}
pchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pchnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pchnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
pedałować: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
pedałować: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
pedałować: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(adl)} + {xp(perl)}
pełnić: imperf: subj{np(str)} + obj{np(str)}
pełzać: imperf: subj{np(str)} + {cp(aż)}
pełzać: imperf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
pełzać: imperf: subj{np(str)} + {xp(locat)} + {xp(mod)}
pełznąć: imperf: subj{np(str)} + {cp(aż)}
pełznąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
pełznąć: imperf: subj{np(str)} + {xp(locat)} + {xp(mod)}
penetrować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
perorować: imperf: subj{np(str)} + {comprepnp(na temat)}
perorować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
perorować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
perorować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {nonch}
perorować: imperf: subj{np(str)} + {np(dat)} + {or}
perorować: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
perorować: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
perorować: imperf: subj{np(str)} + {prepnp(z,inst)}
perswadować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
perswadować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
perswadować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
perswadować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {or}
perswadować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
pertraktować: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
pertraktować: imperf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(z,inst)}
peszyć: imperf: subj{cp(gdy)} + {np(str)}
peszyć: imperf: subj{cp(int)} + {np(str)}
peszyć: imperf: subj{cp(jak)} + {np(str)}
peszyć: imperf: subj{cp(jeśli)} + {np(str)}
peszyć: imperf: subj{cp(kiedy)} + {np(str)}
peszyć: imperf: subj{cp(że)} + {np(str)}
peszyć: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(str)}
peszyć: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
peszyć się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
pęcznieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
pęcznieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)} + {xp(locat)}
pęcznieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
pęcznieć: imperf: subj{np(str)} + {preplexnp(pod,inst,sg,'wpływ',ratr)}
pęcznieć: imperf: subj{np(str)} + {prepnp(wskutek,gen)}
pęcznieć: imperf: subj{np(str)} + {xp(mod)}
pędzić: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
pędzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
pędzić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,loc)}
pędzić: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(adl)}
pędzić: imperf: subj{np(str)} + {prepnp(po,acc)}
pędzić: imperf: subj{np(str)} + {prepnp(za,inst)}
pędzić: imperf: subj{np(str)} + {xp(perl)}
pękać: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
pękać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
pękać: imperf: subj{np(str)} + {prepnp(na,acc)}
pękać: imperf: subj{np(str)} + {prepnp(od,gen)} + {preplexnp(w,loc,pl,'szew',natr)}
pęknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
pęknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
pęknąć: perf: subj{np(str)} + {prepnp(na,acc)}
pęknąć: perf: subj{np(str)} + {prepnp(od,gen)} + {preplexnp(w,loc,pl,'szew',natr)}
pętać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pętać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pętać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
pętać się: imperf: subj{np(str)} + {xp(perl)}
piać: imperf: subj{np(str)} + {cp(że)}
piać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
piać: imperf: subj{np(str)} + {or}
piać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {xp(locat)}
piać: imperf: subj{np(str)} + {prepnp(z,gen)}
piastować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
piąć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,loc)}
piąć się: imperf: subj{np(str)} + {prepnp(ku,dat)}
piąć się: imperf: subj{np(str)} + {prepnp(na,loc)}
piąć się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
pić: imperf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
pić: imperf: subj{np(str)} + {np(str)} + {xp(locat)}
pić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
pić: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,jak); prepncp(do,gen,że); prepncp(do,gen,żeby)}
pić: imperf: subj{np(str)} + {prepnp(na,acc)}
pić: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
piec: imperf: {np(str)} + {xp(locat)}
piec: imperf: subj{np(str)} + {np(str)} + {prepnp(od,gen)}
piec: imperf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
piec: imperf: subj{np(str)} + obj{np(str)}
piec się: imperf: subj{np(str)}
pieklić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
pieklić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(int); cp(że)}
pieklić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
pieklić się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
pieklić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
pieklić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,str,int)}
pielęgnować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
pielęgnować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pielgrzymować: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
pienić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
pienić się: imperf: subj{np(str)} + {cp(że)}
pienić się: imperf: subj{np(str)} + {or}
pienić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
pienić się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
pienić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
pierzchać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(abl)} + {xp(adl)} + {xp(mod)}
pierzchać: imperf: subj{np(str)} + {xp(mod)} + {advp(misc)}
pieścić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
pieścić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
pieścić się: imperf: subj{np(str)} + {np(inst)}
pieścić się: imperf: subj{np(str)} + {prepnp(z,inst)}
piętnować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
piętnować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
piętrzyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
piętrzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
piętrzyć: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
piętrzyć się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
piętrzyć się: imperf: subj{np(str)} + {np(inst)}
piętrzyć się: imperf: subj{np(str)} + {prepnp(przed,inst)}
piętrzyć się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
piętrzyć się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
pijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
pijać: imperf: subj{np(str)} + {prepnp(na,acc)}
pijać: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
pilnować: imperf: subj{np(str)} + obj{np(gen)} + {cp(int); cp(żeby)}
pilnować: imperf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,że); ncp(gen,żeby)}
pilnować: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(przed,inst)}
pilnować się: imperf: subj{np(str)} + {cp(int)}
pilnować się: imperf: subj{np(str)} + {cp(żeby)}
pilnować się: imperf: subj{np(str)} + {np(gen)}
pilotować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)} + {xp(mod)}
pisać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{np(nom)}
pisać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
pisać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
pisać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
pisać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
pisać: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {prepnp(o,loc)}
pisać: imperf: subj{np(str)} + {np(dat)} + {or}
pisać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {cp(że)}
pisać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
pisać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
pisać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
pisać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
pisać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
pisać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
pisać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
pisać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
pisać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
pisać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
pisać: imperf: subj{np(str)} + {prepnp(o,loc)} + {or}
pisać się: imperf: subj,controller{np(str)} + controllee{np(nom)}
pisać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
pisać się: imperf: subj{np(str)} + {xp(dur)}
pisnąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
pisnąć: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',natr)} + {or}
pisnąć: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'ucho',natr)} + {or}
pisnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {comprepnp(na temat)}
pisnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,loc)}
pisnąć: perf: subj{np(str)} + {prepnp(z,gen)}
pisywać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {or}
pisywać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
pisywać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
pisywać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
pisywać: imperf: subj{np(str)} + {np(dat)} + {or}
pisywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {cp(że)}
pisywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
pisywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
pisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
pisywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
pisywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
pisywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
pisywać: imperf: subj{np(str)} + obj{np(str)} + {prepadjp(po,postp)}
pisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(o,loc); comprepnp(na temat); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
pisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
pisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
pisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
pisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
pisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); comprepnp(na temat); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
pisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)} + {cp(że)}
pisywać: imperf: subj{np(str)} + {prepnp(o,loc)} + {or}
piszczeć: imperf: subj,controller{np(str)} + controllee{adjp(str)}
piszczeć: imperf: subj{np(str)} + {cp(żeby)}
piszczeć: imperf: subj{np(str)} + {prepnp(nad,inst)} + {prepnp(z,gen)} + {or}
piszczeć: imperf: subj{np(str)} + {xp(locat)}
piszczeć: imperf: subj{np(str)} + {xp(mod)}
planować: imperf: subj,controller{np(str)} + controllee{infp(_)}
planować: imperf: subj{np(str)} + {cp(int)}
planować: imperf: subj{np(str)} + {cp(żeby)}
planować: imperf: subj{np(str)} + obj{cp(że)}
planować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(na,acc)}
planować: imperf: subj{np(str)} + {or}
plasować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
plasować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
plasować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
plasować się: imperf: subj{np(str)} + {prepnp(przed,inst)}
plasować się: imperf: subj{np(str)} + {prepnp(za,inst)}
plasować się: imperf: subj{np(str)} + {xp(locat)}
plątać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
plątać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
plątać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
plątać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
plątać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
plątać się: imperf: subj{cp(że)} + {np(dat)} + {xp(locat)}
plątać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
plątać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
plątać się: imperf: subj{np(str)} + {np(dat)} + {xp(perl)}
plątać się: imperf: subj{np(str)} + {prepnp(w,acc)}
plątać się: imperf: subj{np(str)} + {prepnp(w,loc)}
plenić się: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
plenić się: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'potęga',natr)}
plenić się: imperf: subj{np(str)} + {xp(mod)}
pleść: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
pleść: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
pleść: imperf: subj{np(str)} + {np(dat)} + {or}
pleść: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
pleść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
pleść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
pleść się: imperf: subj{np(str)}
pleść się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
plotkować: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)} + {prepnp(z,inst)}
plotkować: imperf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(z,inst)} + {cp(że)}
plotkować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
plotkować: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
pluć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
pluć: imperf: subj{np(str)} + {prepnp(na,acc)}
pluć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
pluć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,że)}
pluskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pluskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
pluskać: imperf: subj{np(str)} + {prepnp(o,acc)}
pluskać: imperf: subj{np(str)} + {xp(locat)}
pluskać się: imperf: subj{np(str)} + {prepnp(w,loc)}
pluskać się: imperf: subj{np(str)} + {xp(locat)}
płacić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
płacić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
płakać: imperf: subj{np(str)} + {cp(int)}
płakać: imperf: subj{np(str)} + {cp(że)}
płakać: imperf: subj{np(str)} + {or}
płakać: imperf: subj{np(str)} + {prepncp(nad,inst,że)}
płakać: imperf: subj{np(str)} + {prepnp(na,acc)}
płakać: imperf: subj{np(str)} + {prepnp(nad,inst)}
płakać: imperf: subj{np(str)} + {prepnp(po,loc)}
płakać: imperf: subj{np(str)} + {prepnp(za,inst)}
pławić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pławić się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
płonąć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
płonąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
płonąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
płonąć: imperf: subj{np(str)} + {prepnp(w,loc)}
płoszyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
płoszyć się: imperf: subj{np(str)} + {np(inst)}
płoszyć się: imperf: subj{np(str)} + {xp(temp)}
płukać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
płukać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
płukać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
płynąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
płynąć: imperf: subj{np(str)} + {np(inst)}
płynąć: imperf: subj{np(str)} + {prepnp(na,loc)}
płynąć: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
płynąć: imperf: subj{np(str)} + {xp(perl)}
pływać: imperf: subj{np(str)} + {np(inst)}
pływać: imperf: subj{np(str)} + {prepnp(na,loc)}
pływać: imperf: subj{np(str)} + {prepnp(w,loc)}
pływać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
pływać: imperf: subj{np(str)} + {xp(locat)}
pływać: imperf: subj{np(str)} + {xp(perl)}
pobawić: perf: subj{np(str)} + {np(str)}
pobawić się: perf: subj{np(str)} + {cp(że)}
pobawić się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
pobawić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
pobić: perf: subj{np(str)} + obj{np(str)} + {fixed('na kwaśne jabłko')}
pobić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
pobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
pobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pobić się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
pobiec: perf: subj,controller{np(str)} + controllee{infp(_)} + {prepnp(do,gen)}
pobiec: perf: subj,controller{np(str)} + controllee{infp(_)} + {xp(adl)}
pobiec: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
pobiec: perf: subj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
pobiec: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pobiec: perf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
pobiec: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
pobierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
pobierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
pobierać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
pobierać się: imperf: subj{np(str)} + {prepnp(z,gen)}
pobierać się: imperf: subj{np(str)} + {prepnp(z,inst)}
pobłogosławić: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
pobłogosławić: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
pobłogosławić: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
pobłogosławić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
pobłogosławić: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {refl}
pobrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pobrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
pobrać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
pobrać się: perf: subj{np(str)} + {prepnp(z,gen)}
pobrać się: perf: subj{np(str)} + {prepnp(z,inst)}
pobrzmiewać: imperf: subj{np(str)} + {np(inst)}
pobrzmiewać: imperf: subj{np(str)} + {xp(locat)}
pobudować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pobudować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pobudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
pobudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
pobudować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pobudować się: perf: subj{np(str)} + {xp(locat)}
pobudzać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
pobudzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
pobudzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
pobudzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
pobudzać się: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
pobudzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
pobudzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
pobudzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
pobudzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przeciw,dat)} + {or}
pobudzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
pobudzić się: imperf: subj{np(str)} + {advp(misc)}
pocałować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pocałować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pocałować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
pocałować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {preplexnp(z,gen,sg,'dubeltówka',natr)}
pocałować: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
pocałować: perf: subj{np(str)} + {xp(locat)} + {refl}
pocałować się: perf: subj{np(str)} + {prepnp(z,inst)}
pochlebiać: imperf: subj{cp(że)} + {np(dat)}
pochlebiać: imperf: subj{ncp(str,że)} + {np(dat)}
pochlebiać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
pochlebiać: imperf: subj{np(str)} + {np(dat)} + {or}
pochłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pochłonąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pochodzić: imperf: subj{np(str)} + {prepnp(od,gen)}
pochodzić: imperf: subj{np(str)} + {xp(abl)}
pochodzić: perf: subj{np(str)} + {prepnp(koło,gen)}
pochodzić: perf: subj{np(str)} + {prepnp(w,loc)}
pochodzić: perf: subj{np(str)} + {prepnp(za,inst)}
pochować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
pochować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
pochować się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
pochować się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
pochwalać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(za,acc); prepncp(za,acc,że)}
pochwalić: perf: subj{np(str)} + {np(str)} + {or}
pochwalić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
pochwalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
pochwalić się: perf: subj{np(str)} + {np(dat)} + {cp(int)}
pochwalić się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
pochwalić się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
pochwalić się: perf: subj{np(str)} + {np(dat)} + {or}
pochwalić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
pochwalić się: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
pochwalić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
pochwalić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
pochwycić: perf: subj{np(str)} + {cp(int)}
pochwycić: perf: subj{np(str)} + {cp(że)}
pochwycić: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
pochwycić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
pochwycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
pochwycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pochwycić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
pochwycić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pochwycić: perf: subj{np(str)} + {or}
pochylać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
pochylać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
pochylać się: imperf: subj{np(str)} + {prepnp(ku,dat)}
pochylać się: imperf: subj{np(str)} + {prepnp(nad,inst)}
pochylać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
pochylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
pochylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
pochylić się: perf: subj{np(str)} + {prepnp(nad,inst)}
pochylić się: perf: subj{np(str)} + {prepnp(przed,inst)}
pociąć: perf: subj{np(str)} + {np(inst)} + {refl}
pociąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc); prepnp(w,acc)}
pociąć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
pociągać: imperf: {np(inst)} + {xp(adl)}
pociągać: imperf: subj{cp(żeby)} + {np(str)}
pociągać: imperf: subj{np(str)} + {cp(że)} + {lexnp(inst,sg,'nos',natr)}
pociągać: imperf: subj{np(str)} + {lexnp(inst,sg,'nos',natr)} + {or}
pociągać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(u,gen)}
pociągać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(w,loc)}
pociągać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
pociągać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
pociągać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
pociągać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(z,gen)}
pociągać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)} + {preplexnp(z,inst,_,'siebie',natr)}
pociągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
pociągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
pociągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
pociągać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(do,gen,sg,'odpowiedzialność',atr)}
pociągać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,acc,sg,'język',natr)}
pociągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
pociągnąć: perf: {np(inst)} + {xp(abl)}
pociągnąć: perf: subj{np(str)} + {cp(że)} + {lexnp(inst,sg,'nos',natr)}
pociągnąć: perf: subj{np(str)} + {lexnp(inst,sg,'nos',natr)} + {or}
pociągnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
pociągnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
pociągnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
pociągnąć: perf: subj{np(str)} + obj{np(part)} + {prepnp(z,gen)}
pociągnąć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)} + {preplexnp(za,acc,sg,'język',natr)}
pociągnąć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)} + {preplexnp(za,acc,sg,'język',natr)}
pociągnąć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)} + {preplexnp(za,inst,_,'siebie',natr)}
pociągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pociągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
pociągnąć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(do,gen,sg,'odpowiedzialność',atr)}
pociągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
pociągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {xp(adl)}
pociągnąć: perf: subj{np(str)} + {xp(dur)}
pocić się: imperf: subj{np(str)} + {cp(żeby)}
pocić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
pocić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
pocić się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,żeby)}
pocić się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)}
pociemnieć: perf: {np(dat)} + {prepnp(od,gen)} + {preplexnp(przed,inst,pl,'oko',natr)}
pociemnieć: perf: {np(dat)} + {prepnp(od,gen)} + {preplexnp(w,loc,pl,'oko',natr)}
pociemnieć: perf: {np(dat)} + {prepnp(z,gen)} + {preplexnp(przed,inst,pl,'oko',natr)}
pociemnieć: perf: {np(dat)} + {prepnp(z,gen)} + {preplexnp(w,loc,pl,'oko',natr)}
pociemnieć: perf: {prepnp(od,gen)} + {xp(locat)}
pociemnieć: perf: subj{np(str)} + {np(dat)} + {np(inst)}
pociemnieć: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
pociemnieć: perf: subj{np(str)} + {prepnp(z,gen)}
pocierać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
pocierać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)} + {refl}
pocierać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
pocierać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
pocierać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
pocierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pocierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
pocierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pocierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
pocierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
pocierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pocieszać: imperf: subj{cp(że)} + {np(str)}
pocieszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)}
pocieszać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
pocieszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
pocieszać: imperf: subj{np(str)} + obj{np(str)} + {or}
pocieszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pocieszać się: imperf: subj{np(str)} + {cp(że)}
pocieszać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
pocieszać się: imperf: subj{np(str)} + {or}
pocieszyć: perf: subj{np(str)} + obj{np(str)}
pocieszyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
pocieszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
pocieszyć: perf: subj{np(str)} + obj{np(str)} + {or}
pocieszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pocieszyć się: perf: subj{np(str)} + {cp(że)}
pocieszyć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
pocieszyć się: perf: subj{np(str)} + {or}
począć: perf: subj,controller{E} + controllee{infp(imperf)}
począć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
począć: perf: subj{np(str)} + {prepnp(z,inst)} + {nonch}
począć się: perf: subj{np(str)} + {prepnp(w,loc)}
począć się: perf: subj{np(str)} + {prepnp(z,gen)}
poczekać: perf: subj{np(str)} + {np(gen)}
poczekać: perf: subj{np(str)} + {prepnp(na,acc); cp(aż); cp(int); cp(jak); cp(kiedy); cp(że); cp(żeby); prepncp(na,acc,aż); prepncp(na,acc,int); prepncp(na,acc,jak); prepncp(na,acc,że); prepncp(na,acc,żeby)} + {prepnp(z,inst)} + {xp(dur)}
poczekać: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(aż)} + {xp(dur)}
poczekać: perf: subj{np(str)} + {xp(dur)} + {xp(locat)}
poczerwienieć: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
poczerwienieć: perf: subj{np(str)} + {prepnp(z,gen)}
poczęstować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
poczęstować się: perf: subj{np(str)} + {np(inst)}
poczłapać: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
poczłapać: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
poczuć: perf: subj{np(str)} + {cp(int)}
poczuć: perf: subj{np(str)} + {cp(jak)}
poczuć: perf: subj{np(str)} + {cp(że)} + {lexnp(inst,sg,'nos',atr)} + {lexnp(str,sg,'pismo',natr)}
poczuć: perf: subj{np(str)} + {np(str); cp(że); ncp(str,int); ncp(str,jak); ncp(str,że)}
poczuć: perf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
poczuć: perf: subj{np(str)} + {np(str)} + {prepnp(na,loc); prepnp(w,loc)}
poczuć: perf: subj{np(str)} + {np(str)} + {prepnp(od,gen)}
poczuć się: perf: subj,controller{np(str)} + controllee{adjp(pred)}
poczuć się: perf: subj,controller{np(str)} + controllee{infp(_)} + {preplexnp(na,loc,pl,'siła',natr)}
poczuć się: perf: subj,controller{np(str)} + controllee{infp(_)} + {preplexnp(w,loc,sg,'obowiązek',natr)}
poczuć się: perf: subj,controller{np(str)} + controllee{np(inst)}
poczuć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
poczuć się: perf: subj{np(str)} + {cp(żeby)} + {preplexnp(w,loc,sg,'obowiązek',natr)}
poczuć się: perf: subj{np(str)} + {np(gen)} + {preplexnp(w,loc,sg,'obowiązek',natr)}
poczuć się: perf: subj{np(str)} + {prepnp(do,gen)}
poczuwać: perf: subj{np(str)} + {prepnp(nad,inst)} + {xp(dur)}
poczuwać: perf: subj{np(str)} + {prepnp(przy,loc)} + {xp(dur)}
poczuwać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
poczuwać się: imperf: subj{np(str)} + {cp(żeby)}
poczuwać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
poczynać: perf: controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)} + {lexnp(dat,_,'siebie',natr)}
poczynać: perf: subj,controller{E} + controllee{infp(imperf)}
poczynać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
poczynać się: perf: subj{np(str)} + {prepnp(w,loc)}
poczynać się: perf: subj{np(str)} + {prepnp(z,gen)}
poczynić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
poczytać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
poczytać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
poczytać: perf: subj{np(str)} + obj,controller{cp(że)} + controllee{prepnp(za,acc)} + {np(dat)}
poczytać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
poczytać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(za,acc)} + {np(dat)}
poczytać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
poczytać: perf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepnp(za,acc)} + {np(dat)}
poczytać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
poczytać: perf: subj{np(str)} + {prepnp(w,loc)}
poczytać: perf: subj{np(str)} + {prepnp(z,gen)}
poczytywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(za,acc)} + {np(dat)}
poczytywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
poczytywać: imperf: subj{np(str)} + {prepnp(za,acc)} + {infp(_)} + {lexnp(dat,_,'siebie',natr)}
poćwiczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
podać: perf: subj{np(str)} + {advp(pron)}
podać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
podać: perf: subj{np(str)} + obj{cp(int)}
podać: perf: subj{np(str)} + obj{cp(że)}
podać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
podać: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'wątpliwość',natr)}
podać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,że)}
podać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
podać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
podać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
podać: perf: subj{np(str)} + {or}
podać się: perf: subj,controller{np(str)} + controllee{prepadjp(za,acc)}
podać się: perf: subj,controller{np(str)} + controllee{prepnp(za,acc)}
podać się: perf: subj{np(str)} + {prepnp(do,gen)}
podarować: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
podawać: imperf: subj{np(str)} + {advp(pron)}
podawać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
podawać: imperf: subj{np(str)} + obj{cp(int)}
podawać: imperf: subj{np(str)} + obj{cp(że)}
podawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
podawać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'wątpliwość',natr)}
podawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,że)}
podawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
podawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
podawać: imperf: subj{np(str)} + {or}
podawać się: imperf: subj,controller{np(str)} + controllee{prepadjp(za,acc)}
podawać się: imperf: subj,controller{np(str)} + controllee{prepnp(za,acc)}
podawać się: imperf: subj{np(str)} + {prepnp(do,gen)}
podążać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,inst); prepncp(za,inst,int)}
podążać: imperf: subj{np(str)} + {prepnp(do,gen)}
podążać: imperf: subj{np(str)} + {prepnp(ku,dat)}
podążać: imperf: subj{np(str)} + {xp(adl)}
podążyć: perf: subj{np(str)} + {np(inst)}
podążyć: perf: subj{np(str)} + {prepnp(za,inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
podbić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(o,acc)}
podbić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podbić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
podbić: perf: subj{np(str)} + {prepnp(do,gen)}
podbić: perf: subj{np(str)} + {xp(adl)}
podbić się: perf: subj{np(str)} + {prepnp(na,loc)}
podbiec: perf: subj{np(str)} + {infp(_)}
podbiec: perf: subj{np(str)} + {np(inst)}
podbiec: perf: subj{np(str)} + {prepnp(do,gen)}
podbiec: perf: subj{np(str)} + {prepnp(na,acc)}
podbiec: perf: subj{np(str)} + {prepnp(pod,acc)}
podbiegać: imperf: subj{np(str)} + {infp(_)}
podbiegać: imperf: subj{np(str)} + {np(inst)}
podbiegać: imperf: subj{np(str)} + {prepnp(do,gen)}
podbiegać: imperf: subj{np(str)} + {prepnp(na,acc)}
podbiegać: imperf: subj{np(str)} + {prepnp(pod,acc)}
podbierać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(abl)}
podbijać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(o,acc)}
podbijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podbijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
podbijać: imperf: subj{np(str)} + {prepnp(do,gen)}
podbijać: imperf: subj{np(str)} + {xp(adl)}
podbijać się: imperf: subj{np(str)} + {prepnp(na,loc)}
podbudować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
podbudować się: perf: subj{np(str)} + {cp(że)}
podbudować się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
podbudować się: perf: subj{np(str)} + {xp(mod)}
podchodzić: imperf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)}
podchodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
podchodzić: imperf: subj{np(str)} + {np(inst)}
podchodzić: imperf: subj{np(str)} + obj{np(str)} + {or}
podchodzić: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
podchodzić: imperf: subj{np(str)} + {prepnp(pod,acc)}
podchodzić: imperf: subj{np(str)} + {xp(adl)}
podchwycić: perf: subj{np(str)} + {cp(int)}
podchwycić: perf: subj{np(str)} + {cp(że)}
podchwycić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
podchwycić: perf: subj{np(str)} + {or}
podciąć: perf: {np(dat)} + {lexnp(str,pl,'noga',natr)}
podciąć: perf: subj{cp(gdy)} + {np(dat)} + {lexnp(str,pl,'skrzydło',natr)}
podciąć: perf: subj{cp(jak)} + {np(dat)} + {lexnp(str,pl,'skrzydło',natr)}
podciąć: perf: subj{cp(kiedy)} + {np(dat)} + {lexnp(str,pl,'skrzydło',natr)}
podciąć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {lexnp(str,pl,'skrzydło',natr)}
podciąć: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {lexnp(str,pl,'skrzydło',natr)}
podciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
podciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
podciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
podciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
podciągnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
podciągnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
podciągnąć: perf: subj{np(str)} + {prepnp(ku,dat)} + {refl}
podciągnąć: perf: subj{np(str)} + {prepnp(na,loc)} + {refl}
podciągnąć: perf: subj{np(str)} + {xp(adl)} + {refl}
podciągnąć: perf: subj{np(str)} + {xp(locat)} + {refl}
podciągnąć się: perf: subj{np(str)} + {np(dat)}
podciągnąć się: perf: subj{np(str)} + {prepnp(w,loc)}
podciągnąć się: perf: subj{np(str)} + {prepnp(z,gen)}
podcinać: imperf: {np(dat)} + {lexnp(str,pl,'noga',natr)}
podcinać: imperf: subj{cp(gdy)} + {np(dat)} + {lexnp(str,pl,'skrzydło',natr)}
podcinać: imperf: subj{cp(jak)} + {np(dat)} + {lexnp(str,pl,'skrzydło',natr)}
podcinać: imperf: subj{cp(kiedy)} + {np(dat)} + {lexnp(str,pl,'skrzydło',natr)}
podcinać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {lexnp(str,pl,'skrzydło',natr)}
podcinać: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {lexnp(str,pl,'skrzydło',natr)}
podcinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
poddać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
poddać: perf: subj{np(str)} + {or}
poddać się: perf: subj{np(str)} + {np(dat)}
poddawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
poddawać: imperf: subj{np(str)} + {or}
poddawać się: imperf: subj{np(str)} + {np(dat)}
podejmować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
podejmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
podejmować: imperf: subj{np(str)} + {or}
podejmować się: imperf: subj,controller{np(str)} + controllee{infp(_)}
podejmować się: imperf: subj{np(str)} + {cp(że)}
podejmować się: imperf: subj{np(str)} + {cp(żeby)}
podejmować się: imperf: subj{np(str)} + {np(gen)}
podejrzewać: imperf: subj{np(str)} + obj{cp(int)}
podejrzewać: imperf: subj{np(str)} + obj{cp(że)}
podejrzewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
podejść: perf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)}
podejść: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
podejść: perf: subj{np(str)} + {np(inst)}
podejść: perf: subj{np(str)} + {np(str)}
podejść: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
podejść: perf: subj{np(str)} + {prepnp(pod,acc)}
podejść: perf: subj{np(str)} + {xp(adl)}
podeprzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podeprzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
podeprzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
podeprzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
podeprzeć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
podeprzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
podeprzeć się: perf: subj{np(str)} + {prepnp(na,loc)}
poderwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
poderwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
poderwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
poderwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
poderwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
poderwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
poderwać się: perf: subj{np(str)} + {prepnp(do,gen)}
poderwać się: perf: subj{np(str)} + {prepnp(z,gen)}
poderwać się: perf: subj{np(str)} + {xp(abl)}
poderwać się: perf: subj{np(str)} + {xp(adl)}
poderżnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
podesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
podesłać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
podesłać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
podesłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)} + {xp(adl)}
podglądać: imperf: subj{np(str)} + {cp(int)}
podglądać: imperf: subj{np(str)} + {cp(jak)}
podglądać: imperf: subj{np(str)} + obj{np(str)}
podgrzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podgrzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
podgrzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
podgrzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
podgrzać się: perf: subj{np(str)} + {prepnp(na,loc)}
podgrzać się: perf: subj{np(str)} + {prepnp(w,loc)}
podgrzewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podgrzewać się: imperf: subj{np(str)}
podjąć: perf: subj{np(str)} + obj{lexnp(str,sg,'rękawica',atr)}
podjąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
podjąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
podjąć: perf: subj{np(str)} + {or}
podjąć się: imperf: subj,controller{np(str)} + controllee{infp(_)}
podjąć się: imperf: subj{np(str)} + {cp(że)}
podjąć się: imperf: subj{np(str)} + {cp(żeby)}
podjąć się: imperf: subj{np(str)} + {np(gen)}
podjechać: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
podjechać: perf: subj{np(str)} + {np(inst)} + {np(str)}
podjechać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
podjechać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,acc)}
podjechać: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
podjechać: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
podjechać: perf: subj{np(str)} + {prepnp(ku,dat)}
podjechać: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
podjeżdżać: perf: subj{np(str)} + {np(dat)} + {np(inst)}
podjeżdżać: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
podjeżdżać: perf: subj{np(str)} + {np(inst)} + {np(str)}
podjeżdżać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
podjeżdżać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,acc)}
podjeżdżać: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
podjeżdżać: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
podjeżdżać: perf: subj{np(str)} + {prepnp(ku,dat)}
podjeżdżać: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
podkładać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(do,gen)}
podkładać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(pod,acc)}
podkładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
podkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
podkładać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
podkładać się: imperf: subj{np(str)} + {np(dat)}
podkreślać: imperf: subj{np(str)} + {cp(że)}
podkreślać: imperf: subj{np(str)} + obj{ncp(str,int)} + {np(inst)}
podkreślać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
podkreślać: imperf: subj{np(str)} + {or}
podkreślić: perf: subj{np(str)} + {cp(że)}
podkreślić: perf: subj{np(str)} + obj{ncp(str,int)} + {np(inst)}
podkreślić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
podkreślić: perf: subj{np(str)} + {or}
podkręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podkręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
podlać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podlać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
podlegać: imperf: subj{cp(int)} + {lexnp(dat,sg,'dyskusja',atr)}
podlegać: imperf: subj{cp(że)} + {lexnp(dat,sg,'dyskusja',atr)}
podlegać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {lexnp(dat,sg,'dyskusja',atr)}
podlegać: imperf: subj{np(str)} + {np(dat)}
podlewać: imperf: subj{np(str)} + {np(inst)} + {refl}
podlewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podlewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
podliczyć: perf: subj{np(str)} + {cp(int)}
podliczyć: perf: subj{np(str)} + {cp(że)}
podliczyć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
podliczyć: perf: subj{np(str)} + {or}
podlizywać się: imperf: subj{np(str)} + {np(dat)}
podłączać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podłączać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
podłączać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
podłączać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
podłączać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
podłączyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podłączyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
podłączyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
podłączyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
podłączyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
podłożyć: perf: subj{np(str)} + obj{np(part)} + {prepnp(do,gen)}
podłożyć: perf: subj{np(str)} + obj{np(part)} + {prepnp(pod,acc)}
podłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
podłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
podłożyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
podłożyć się: perf: subj{np(str)} + {np(dat)}
podniecać: imperf: subj{cp(int); ncp(str,int)} + obj{np(str)} + {prepnp(do,gen)}
podniecać: imperf: subj{cp(jak); ncp(str,jak)} + obj{np(str)} + {prepnp(do,gen)}
podniecać: imperf: subj{np(str); cp(że); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
podniecać: imperf: subj{np(str); cp(że); ncp(str,że)} + obj{np(str)} + {prepnp(do,gen)}
podniecać się: imperf: subj{np(str)} + {cp(int); ncp(inst,int)}
podniecać się: imperf: subj{np(str)} + {np(inst); cp(że); ncp(inst,że)}
podniecać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
podnieść: perf: subj{np(str)} + {cp(że)}
podnieść: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,sg,'duch',natr)}
podnieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
podnieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
podnieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
podnieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
podnieść: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
podnieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
podnieść się: perf: subj{np(str)} + {prepnp(na,acc)}
podnieść się: perf: subj{np(str)} + {prepnp(o,acc)}
podnieść się: perf: subj{np(str)} + {prepnp(z,gen)}
podnieść się: perf: subj{np(str)} + {xp(abl)}
podnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
podnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
podnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
podnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
podnosić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)} + {xp(locat)}
podnosić: imperf: subj{np(str)} + {prepnp(w,loc)} + {or}
podnosić się: imperf: subj{np(str)} + {or}
podnosić się: imperf: subj{np(str)} + {prepnp(z,gen)}
podobać się: imperf: controller{np(dat)} + controllee{infp(_)}
podobać się: imperf: {np(dat)} + {xp(locat)}
podobać się: imperf: subj{cp(gdy); ncp(str,gdy)} + {np(dat)}
podobać się: imperf: subj{cp(jak); ncp(str,jak); xp(locat)} + {np(dat)}
podobać się: imperf: subj{np(str); cp(jak); cp(że); ncp(str,jak); ncp(str,że)} + {np(dat)}
podołać: perf: subj{np(str)} + {np(dat); ncp(dat,żeby)}
podpadać: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
podpadać: imperf: subj{np(str)} + {prepnp(pod,acc)}
podpadać: imperf: subj{np(str)} + {prepnp(u,gen)}
podpalać: imperf: subj{np(str)} + {np(inst)} + {refl}
podpalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podpalić: perf: subj{np(str)} + {np(inst)} + {refl}
podpalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podpaść: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
podpaść: perf: subj{np(str)} + {np(inst)} + {refl}
podpaść: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
podpaść: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
podpaść: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
podpaść: perf: subj{np(str)} + {prepnp(na,loc)} + {refl}
podpaść: perf: subj{np(str)} + {prepnp(pod,acc)}
podpaść: perf: subj{np(str)} + {prepnp(u,gen)}
podpaść: perf: subj{np(str)} + {xp(locat)} + {refl}
podpatrywać: imperf: subj{np(str)} + {cp(int)}
podpatrywać: imperf: subj{np(str)} + {cp(że)}
podpatrywać: imperf: subj{np(str)} + obj{np(str)} + {cp(jak)}
podpatrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
podpatrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
podpatrzyć: perf: subj{np(str)} + {cp(int)}
podpatrzyć: perf: subj{np(str)} + {cp(jak)}
podpatrzyć: perf: subj{np(str)} + {cp(że)}
podpatrzyć: perf: subj{np(str)} + obj{np(str)}
podpierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podpierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
podpierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
podpierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
podpierać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
podpierać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
podpierać się: imperf: subj{np(str)} + {prepnp(na,loc)}
podpisać: perf: subj,controller{np(str)} + obj{np(str)} + controllee{np(str)}
podpisać: perf: subj,controller{np(str)} + obj{np(str)} + controllee{prepnp(jako,str)} + {np(inst)}
podpisać: perf: subj{np(str)} + obj{cp(że)}
podpisać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
podpisać się: perf: subj,controller{np(str)} + controllee{np(str)} + {prepnp(na,loc)}
podpisać się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(na,loc)}
podpisać się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
podpisać się: perf: subj{np(str)} + {np(inst)} + {prepnp(pod,inst); prepncp(pod,inst,że); prepncp(pod,inst,żeby)}
podpisać się: perf: subj{np(str)} + {prepnp(na,loc)} + {cp(że)}
podpisywać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{np(str)}
podpisywać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{prepnp(jako,str)} + {np(inst)}
podpisywać: imperf: subj{np(str)} + obj{cp(że)}
podpisywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
podpisywać się: imperf: subj,controller{np(str)} + controllee{np(str)} + {prepnp(na,loc)}
podpisywać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {prepnp(na,loc)}
podpisywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
podpisywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(pod,inst); prepncp(pod,inst,że); prepncp(pod,inst,żeby)}
podpisywać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {cp(że)}
podpłynąć: perf: subj{np(str)} + {advp(misc)}
podpłynąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
podpłynąć: perf: subj{np(str)} + {prepnp(na,loc)} + {xp(adl)} + {xp(perl)}
podpłynąć: perf: subj{np(str)} + {xp(adl)} + {xp(mod)}
podpływać: imperf: subj{np(str)} + {advp(misc)}
podpływać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
podpływać: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(adl)} + {xp(perl)}
podpływać: imperf: subj{np(str)} + {xp(adl)} + {xp(mod)}
podporządkować: perf: subj{np(str)} + obj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)}
podporządkować się: perf: subj{np(str)} + {np(dat)} + {comprepnp(w kwestii)}
podporządkować się: perf: subj{np(str)} + {np(dat)} + {comprepnp(w sprawie)}
podporządkować się: perf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)}
podporządkowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)}
podporządkowywać się: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w kwestii)}
podporządkowywać się: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w sprawie)}
podporządkowywać się: imperf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)}
podpowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
podpowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
podpowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
podpowiadać: imperf: subj{np(str)} + {np(dat)} + {or}
podpowiadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
podpowiedzieć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
podpowiedzieć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
podpowiedzieć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
podpowiedzieć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
podprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
podprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
podprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
podrabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podrapać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
podrapać: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
podrapać: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
podrapać: perf: subj{np(str)} + {np(str)} + {prepnp(o,acc)} + {lexnp(dat,_,'siebie',natr)}
podrapać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podrapać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
podrapać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
podrapać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
podrapać się: perf: subj{np(str)} + {prepnp(o,acc)}
podreperować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podreperować się: imperf: subj{np(str)} + {advp(misc)}
podreperować się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
podreperować się: imperf: subj{np(str)} + {prepnp(na,loc)}
podrobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podrosnąć: perf: subj{np(str)}
podrożeć: perf: subj{np(str)} + {advp(misc)}
podrożeć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,acc)}
podrożeć: perf: subj{np(str)} + {prepnp(o,acc)}
podrożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
podróżować: imperf: subj,controller{np(str)} + controllee{xp(mod)}
podróżować: imperf: subj{np(str)} + {np(inst)}
podróżować: imperf: subj{np(str)} + {prepnp(między,inst)}
podróżować: imperf: subj{np(str)} + {prepnp(na,acc)}
podróżować: imperf: subj{np(str)} + {xp(abl); xp(adl)}
podróżować: imperf: subj{np(str)} + {xp(perl)}
podróżować: perf: subj{np(str)} + obj{np(str)}
podrygiwać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
podrygiwać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {prepnp(z,inst)}
podrygiwać: imperf: subj{np(str)} + {prepnp(w,acc)}
podrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
podrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
podrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
podrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
podrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
podrywać się: imperf: subj{np(str)} + {prepnp(do,gen)}
podrywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
podrywać się: imperf: subj{np(str)} + {xp(abl)}
podrywać się: imperf: subj{np(str)} + {xp(adl)}
podrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
podrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
podrzeć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
podrzeć się: perf: subj{np(str)} + {xp(dur)}
podrzucać: imperf: subj{E} + {np(str)} + {xp(adl)}
podrzucać: imperf: subj{np(str)} + {cp(że)}
podrzucać: imperf: subj{np(str)} + obj{np(inst)}
podrzucać: imperf: subj{np(str)} + obj{np(part)} + {xp(adl)}
podrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
podrzucić: perf: subj{E} + {np(str)} + {xp(adl)}
podrzucić: perf: subj{np(str)} + {cp(że)}
podrzucić: perf: subj{np(str)} + obj{np(inst)}
podrzucić: perf: subj{np(str)} + obj{np(part)} + {xp(adl)}
podrzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
podskakiwać: imperf: subj{np(str)} + {np(dat)}
podskakiwać: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
podskakiwać: imperf: subj{np(str)} + {prepnp(do,gen)}
podskakiwać: imperf: subj{np(str)} + {prepnp(o,acc)}
podskoczyć: perf: subj{np(str)} + {np(dat)}
podskoczyć: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
podskoczyć: perf: subj{np(str)} + {prepnp(do,gen)}
podskoczyć: perf: subj{np(str)} + {prepnp(o,acc)}
podsłuchać: imperf: subj{np(str)} + {cp(że)}
podsłuchać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
podsłuchać: imperf: subj{np(str)} + obj{np(str)} + {cp(jak)}
podsłuchiwać: imperf: subj{np(str)} + {cp(że)}
podsłuchiwać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
podsłuchiwać: imperf: subj{np(str)} + obj{np(str)} + {cp(jak)}
podstawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
podstawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
podstawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
podstawiać się: imperf: subj{np(str)} + {np(dat)}
podstawiać się: imperf: subj{np(str)} + {prepnp(za,acc)}
podstawić: perf: subj{np(str)} + {np(dat)} + {refl}
podstawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
podstawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
podstawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
podsumować: perf: subj{np(str)} + {cp(int)}
podsumować: perf: subj{np(str)} + {cp(że)}
podsumować: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)}
podsumować: perf: subj{np(str)} + {or}
podsumowywać: imperf: subj{np(str)} + {cp(int)}
podsumowywać: imperf: subj{np(str)} + {cp(że)}
podsumowywać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)}
podsumowywać: imperf: subj{np(str)} + {or}
podsunąć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
podsunąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
podsunąć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
podsunąć: perf: subj{np(str)} + {np(dat)} + {or}
podsunąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
podsunąć się: perf: subj{np(str)} + {prepnp(do,gen)}
podsunąć się: perf: subj{np(str)} + {xp(adl)}
podsuwać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
podsuwać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
podsuwać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
podsuwać: imperf: subj{np(str)} + {np(dat)} + {or}
podsuwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
podsuwać się: imperf: subj{np(str)} + {prepnp(do,gen)}
podsuwać się: imperf: subj{np(str)} + {xp(adl)}
podsycać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(w,loc)}
podsycać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(w,loc)}
podsycać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
podszywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podszywać się: imperf: subj{np(str)} + {prepnp(pod,acc)}
podtrzymać: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
podtrzymać: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,sg,'duch',natr)}
podtrzymać: perf: subj{np(str)} + {or}
podtrzymywać: imperf: subj{np(str)} + {np(inst)} + {refl}
podtrzymywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {or}
podtrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {or}
podtrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
podtrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
podtrzymywać: imperf: subj{np(str)} + {prepnp(na,loc)} + {refl}
podtrzymywać: imperf: subj{np(str)} + {prepnp(przy,loc)} + {refl}
podtrzymywać: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
podupaść: perf: subj{np(str)} + {prepnp(na,loc)}
podwajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {advp(misc)}
podwajać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {xp(temp)}
podwajać się: imperf: subj{np(str)} + {advp(misc)}
podwajać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
podwajać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {xp(temp)}
podważać: imperf: subj{np(str); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)}
podważać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podważyć: perf: subj{np(str); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)}
podważyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
podwieźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
podwoić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
podwoić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {xp(temp)}
podwoić się: perf: subj{np(str)} + {prepnp(o,acc)} + {xp(temp)}
podwyższać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
podwyższać się: imperf: subj{np(str)} + {prepnp(o,acc)}
podwyższyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
podwyższyć się: perf: subj{np(str)} + {prepnp(o,acc)}
podyktować: perf: subj{np(str)} + {np(dat)} + {or}
podyktować: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
podyktować: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
podyktować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
podyskutować: perf: subj{np(str)} + {prepnp(nad,inst); prepnp(o,loc); comprepnp(na temat); cp(int); prepncp(nad,inst,int); prepncp(nad,inst,że); prepncp(nad,inst,żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(z,inst)}
podyskutować: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
podyskutować: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
podyskutować: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
podziać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
podziać się: perf: subj{np(str)} + {advp(misc)}
podziać się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
podziać się: perf: {xp(locat)} + {advp(misc)}
podziałać: perf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)} + {np(inst)}
podziałać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
podzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
podzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
podzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
podzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
podzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
podzielić się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)} + {or}
podzielić się: perf: subj{np(str)} + {prepnp(na,acc)}
podziękować: perf: subj{np(str)} + {np(dat)} + {or}
podziękować: perf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); cp(że); prepncp(za,acc,że)}
podziwiać: imperf: subj{np(str)} + {cp(jak)}
podziwiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
podziwiać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
podziwiać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(w,loc)}
podziwiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
podziwiać: imperf: subj{np(str)} + {xp(locat)} + {refl}
podźwignąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
podźwignąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
podźwignąć: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
podźwignąć: perf: subj{np(str)} + {xp(abl)} + {refl}
pofatygować: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
pofatygować się: perf: subj,controller{np(str)} + controllee{infp(_)}
pofatygować się: perf: subj{np(str)} + {cp(żeby)}
pofatygować się: perf: subj{np(str)} + {np(inst)}
pofatygować się: perf: subj{np(str)} + {prepnp(do,gen)}
pofatygować się: perf: subj{np(str)} + {prepnp(na,acc)}
pofatygować się: perf: subj{np(str)} + {prepnp(z,inst)}
pofatygować się: perf: subj{np(str)} + {xp(adl)}
pofrunąć: perf: subj{np(str)} + {np(str)} + {prepnp(nad,inst)}
pofrunąć: perf: subj{np(str)} + {np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
pofrunąć: perf: subj{np(str)} + {prepnp(na,acc)}
pofrunąć: perf: subj{np(str)} + {prepnp(na,loc)}
pogadać: perf: subj,controller{np(str)} + controllee{xp(mod)}
pogadać: perf: subj{np(str)} + {prepnp(do,gen)}
pogadać: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(z,inst)}
pogadać: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
pogadać: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
pogadać: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
pogadać: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
poganiać: imperf: subj{np(str)} + {np(dat)} + {lexnp(acc,sg,'kot',natr)}
poganiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
poganiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
poganiać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
poganiać: imperf: subj{np(str)} + {prepnp(za,inst)}
pogardzać: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
pogarszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
pogarszać się: imperf: {np(dat)}
pogarszać się: imperf: subj{np(str)} + {np(dat)}
pogładzić: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
pogładzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pogładzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
pogłaskać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
pogłaskać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pogłaskać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
pogłębiać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(w,loc)}
pogłębiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pogłębiać się: imperf: subj{np(str)} + {np(dat)}
pogłębiać się: imperf: subj{np(str)} + {prepnp(w,loc)}
pogłębić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(w,loc)}
pogłębić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pogłębić się: perf: subj{np(str)} + {np(dat)}
pogłębić się: perf: subj{np(str)} + {prepnp(w,loc)}
pognać: perf: {np(str)} + {prepnp(do,gen)}
pognać: perf: {np(str)} + {xp(abl)} + {xp(adl)}
pognać: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
pognać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
pognać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
pogniewać się: perf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
pogniewać się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
pogniewać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
pogniewać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
pogniewać się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {prepnp(z,inst)}
pogniewać się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
pogniewać się: perf: subj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
pogodzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
pogodzić się: perf: subj{np(str)} + {cp(że)}
pogodzić się: perf: subj{np(str)} + {prepncp(z,inst,żeby2)}
pogodzić się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
pogonić: perf: {np(str)} + {xp(adl)}
pogonić: perf: subj{np(str)} + {np(dat)} + {lexnp(acc,sg,'kot',natr)}
pogonić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
pogonić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pogonić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pogonić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
pogonić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
pogonić: perf: subj{np(str)} + {prepnp(za,inst)}
pogorszyć: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
pogorszyć się: perf: {np(dat)}
pogorszyć się: perf: subj{np(str)} + {np(dat)}
pograć: perf: subj{np(str)} + {prepnp(na,loc)}
pograć: perf: subj{np(str)} + {prepnp(w,acc)}
pograć: perf: subj{np(str)} + {xp(mod)}
pogratulować: perf: subj{np(str)} + {np(dat)} + {np(gen); cp(że); ncp(gen,że)}
pogrążać: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {refl}
pogrążać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
pogrążać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
pogrążać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pogrążać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
pogrążać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
pogrążyć: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {refl}
pogrążyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
pogrążyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
pogrążyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pogrążyć: perf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
pogrążyć się: perf: subj{np(str)} + {prepnp(w,loc)}
pogrozić: perf: subj{np(str)} + {np(dat)} + {np(inst); cp(że); ncp(inst,że)} + {or}
pogrozić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
pogryźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pogryźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
pogryźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
pogryźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pogryźć: perf: subj{np(str)} + {prepnp(po,loc)} + {refl}
pogryźć: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
pogryźć się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {prepnp(z,inst)}
pogrzebać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
pogrzebać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
pogrzebać: perf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
pogrzebać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pogrzebać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)} + {xp(locat)}
pogrzebać: perf: subj{np(str)} + {prepnp(w,loc)} + {xp(locat)} + {refl}
pogrzebać się: perf: subj{np(str)} + {prepnp(przy,loc)}
pogrzebać się: perf: subj{np(str)} + {prepnp(w,loc)}
pogubić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pogubić się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
pogubić się: perf: subj{np(str)} + {prepnp(w,loc)}
pohamować: perf: subj{np(str)} + {cp(żeby)} + {refl}
pohamować: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
pohamować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pohamować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pohamować: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
poić: imperf: subj{np(str)} + {np(inst)} + {refl}
poić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
poić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
poić: imperf: subj{np(str)} + {xp(locat)} + {refl}
poinformować: perf: subj{np(str)} + obj{np(str)} + {cp(jakoby)}
poinformować: perf: subj{np(str)} + obj{np(str)} + {or}
poinformować: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); cp(int); cp(że); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
poinformować się: perf: subj{np(str)} + {comprepnp(na temat)} + {xp(locat)}
poinformować się: perf: subj{np(str)} + {cp(int)}
poinformować się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int)} + {prepnp(u,gen)}
poinformować się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int)} + {xp(locat)}
pojawiać się: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
pojawiać się: imperf: subj{np(str)} + {xp(abl)}
pojawić się: perf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
pojawić się: perf: subj{np(str)} + {xp(abl)}
pojąć: perf: subj{np(str)} + {cp(int); cp(że)}
pojąć: perf: subj{np(str)} + {ncp(str,int)}
pojąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
pojąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
pojechać: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
pojechać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); xp(adl)} + {xp(perl)}
pojechać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
pojednać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(mod)}
pojednać się: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(mod)}
pojeść: imperf: subj{np(str)} + {advp(misc)}
pojeść: imperf: subj{np(str)} + {cp(żeby)}
pojeść: imperf: subj{np(str)} + {np(inst)}
pojeść: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(z,gen)}
pojmować: imperf: subj{np(str)} + {cp(int); cp(że)}
pojmować: imperf: subj{np(str)} + {ncp(str,int)}
pojmować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
pojmować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
pojmować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
pokazać: perf: subj{np(str)} + controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {np(inst)}
pokazać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str); cp(int); cp(że); cp(żeby); ncp(str,int); ncp(str,że)}
pokazać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
pokazać: perf: subj{np(str)} + {np(str)} + {preplexnp(po,loc,_,'siebie',natr)}
pokazać się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
pokazać się: perf: subj{np(str)} + {cp(że)}
pokazać się: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,pl,'oko',natr)}
pokazać się: perf: subj{np(str)} + {np(dat)} + {preplexnp(od,gen,sg,'strona',ratr)}
pokazać się: perf: subj{np(str)} + {np(dat)} + {preplexnp(z,gen,sg,'strona',ratr)}
pokazać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
pokazać się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
pokazać się: perf: subj{np(str)} + {prepnp(z,inst)}
pokazywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
pokazywać: imperf: subj{np(str)} + {np(str)} + {preplexnp(po,loc,_,'siebie',natr)}
pokazywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {np(inst)}
pokazywać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); cp(żeby); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
pokazywać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
pokazywać się: imperf: subj{cp(że)}
pokazywać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,pl,'oko',natr)}
pokazywać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(od,gen,sg,'strona',ratr)}
pokazywać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(z,gen,sg,'strona',ratr)}
pokazywać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
pokazywać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
pokazywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
pokierować: perf: subj{np(str)} + obj{np(inst)}
pokierować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); xp(adl)}
pokierować: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
pokierować się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że); ncp(inst,żeby)}
pokiwać: perf: subj{np(str)} + {np(dat)} + {np(inst)}
pokiwać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {cp(żeby)}
pokiwać: perf: subj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
pokiwać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(żeby)}
pokiwać się: perf: subj{np(str)}
poklepać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
poklepać: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
poklepać: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
poklepać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
poklepać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
poklepać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
poklepywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
poklepywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
poklepywać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
poklepywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
poklepywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
poklepywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
pokładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
pokładać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pokładać się: imperf: subj{np(str)} + {xp(locat)}
pokłócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
pokłócić się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
pokłócić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
pokłócić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
pokłócić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
pokłócić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
pokłócić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(z powodu)}
pokłócić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
pokłócić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
pokłócić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
pokochać: perf: subj,controller{np(str)} + controllee{infp(_)}
pokochać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
pokochać się: perf: subj{np(str)} + {prepnp(z,inst)}
pokonać: perf: subj{np(str)} + obj{np(str)}
pokonywać: imperf: subj{np(str)} + obj{np(str)}
pokpiwać: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)} + {lexnp(dat,_,'sobie',natr)}
pokpiwać: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)} + {lexnp(dat,_,'sobie',natr)} + {or}
pokręcić: perf: {np(str)}
pokręcić: perf: subj{np(str)} + {np(inst)}
pokręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
pokręcić się: perf: {np(dat)} + {prepnp(od,gen)} + {prepnp(w,loc)}
pokręcić się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
pokręcić się: perf: subj{np(str)} + {prepnp(koło,gen)}
pokręcić się: perf: subj{np(str)} + {prepnp(na,loc)}
pokręcić się: perf: subj{np(str)} + {prepnp(wokół,gen)}
pokręcić się: perf: subj{np(str)} + {xp(locat)}
pokroić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
pokroić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
pokryć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pokryć się: perf: subj{np(str)} + {np(inst)}
pokrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
pokrywać się: imperf: subj{np(str)} + {np(inst)}
pokrzykiwać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
pokrzykiwać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
pokrzykiwać: imperf: subj{np(str)} + {np(dat)} + {np(str)}
pokrzykiwać: imperf: subj{np(str)} + {np(str); cp(że); cp(żeby)} + {prepnp(do,gen)}
pokrzykiwać: imperf: subj{np(str)} + {np(str)} + {prepnp(za,inst)}
pokrzykiwać: imperf: subj{np(str)} + obj{or} + {np(dat)}
pokrzykiwać: imperf: subj{np(str)} + obj{or} + {prepnp(do,gen)}
pokrzykiwać: imperf: subj{np(str)} + {prepncp(o,loc,żeby)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {nonch}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(o,acc)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(za,inst)} + {cp(że)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(za,inst)} + {cp(żeby)}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(za,inst)} + {or}
pokrzykiwać: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
pokrzyżować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pokrzyżować się: perf: subj{np(str)} + {np(dat)}
pokrzyżować się: perf: subj{np(str)} + {prepnp(z,inst)}
pokusić: perf: subj{cp(żeby)} + {np(str)}
pokusić: perf: subj{infp(_)} + {np(str)}
pokusić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
pokusić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pokusić się: perf: subj,controller{np(str)} + controllee{infp(_)}
pokusić się: perf: subj{np(str)} + {cp(żeby)}
pokusić się: perf: subj{np(str)} + {prepnp(do,gen)}
pokusić się: perf: subj{np(str)} + {prepnp(na,acc)}
pokusić się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
pokutować: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
pokutować: imperf: subj{np(str)} + {prepnp(u,gen)}
pokutować: imperf: subj{np(str)} + {prepnp(w,loc)}
pokutować: imperf: subj{np(str)} + {prepnp(wśród,gen)}
pokutować: imperf: subj{np(str)} + {xp(locat)}
pokwitować: perf: subj{np(str)} + {np(inst)} + {cp(że)}
pokwitować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
polać: perf: subj{np(str)} + {np(inst)} + {refl}
polać: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
polać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
polać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
polec: perf: subj{np(str)} + {prepnp(od,gen)}
polec: perf: subj{np(str)} + {prepnp(za,acc)}
polecać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {refl}
polecać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
polecać: imperf: subj{np(str)} + {np(dat)} + {or}
polecać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {refl}
polecać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {refl}
polecać: imperf: subj{np(str)} + obj,controllee{np(str); cp(żeby); ncp(str,że); infp(_)} + controller{np(dat)}
polecać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
polecać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
polecać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
polecać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
polecać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {preplexnp(na,acc,sg,'przyszłość',natr)}
polecić: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {refl}
polecić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
polecić: imperf: subj{np(str)} + {np(dat)} + {or}
polecić: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {refl}
polecić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {refl}
polecić: imperf: subj{np(str)} + obj,controllee{np(str); cp(żeby); ncp(str,że); infp(_)} + controller{np(dat)}
polecić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
polecić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
polecić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
polecić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
polecić się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {preplexnp(na,acc,sg,'przyszłość',natr)}
polecieć: perf: subj,controller{np(str)} + controllee{infp(_)}
polecieć: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
polecieć: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
polecieć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {or}
polecieć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
polecieć: perf: subj{np(str)} + {prepnp(na,acc)}
polecieć: perf: subj{np(str)} + {prepnp(po,acc)}
polecieć: perf: subj{np(str)} + {prepnp(za,inst)}
polegać: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że); prepncp(na,loc,żeby)}
polemizować: imperf: subj{np(str)} + {cp(int)}
polemizować: imperf: subj{np(str)} + {cp(że)}
polemizować: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
polemizować: imperf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(z,inst)}
polemizować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
polemizować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
polemizować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
polemizować: imperf: subj{np(str)} + {prepnp(z,inst)} + {or}
polepszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
polepszać się: imperf: {np(dat)}
polepszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
polepszyć się: perf: {np(dat)}
polewać: imperf: subj{np(str)} + {np(inst)} + {refl}
polewać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)}
polewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
polewać: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,jak); prepncp(z,gen,że)}
poleźć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
poleźć: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)} + {xp(perl)}
poleżeć: perf: subj{np(str)} + {xp(dur)} + {lexnp(dat,_,'siebie',natr)}
poleżeć: perf: subj{np(str)} + {xp(locat)} + {lexnp(dat,_,'siebie',natr)}
policzyć: perf: subj{np(str)} + {np(dat)} + {np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
policzyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
policzyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)} + {np(dat)}
policzyć: perf: subj{np(str)} + obj{cp(int)}
policzyć: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
policzyć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
policzyć: perf: subj{np(str)} + {prepnp(do,gen)}
policzyć się: perf: subj{np(str)} + {prepnp(z,inst)}
polować: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
polubić: perf: subj,controller{np(str)} + controllee{infp(_)}
polubić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
polubić się: perf: subj{np(str)} + {prepnp(z,inst)}
połamać: perf: {np(str)} + {prepnp(w,loc)}
połamać: perf: subj{np(str)} + {cp(int)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,_,'głowa',natr)}
połamać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
połamać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
połamać: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,_,'głowa',natr)}
połamać: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,pl,'ząb',atr)}
połamać się: perf: subj{np(str)} + {np(dat)}
połamać się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
połapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
połapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
połapać się: perf: subj{np(str)} + {cp(int)}
połapać się: perf: subj{np(str)} + {cp(że)}
połapać się: perf: subj{np(str)} + {prepnp(na,loc)}
połapać się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
połączyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,inst)}
połączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
połączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
połączyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
połączyć się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
połączyć się: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
połknąć: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
połknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
położyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(imperf)}
położyć: perf: subj{np(str)} + obj{lexnp(str,pl,'ucho',natr)} + {preplexnp(po,loc,_,'siebie',natr)}
położyć: perf: subj{np(str)} + obj{lexnp(str,sg,'kres',natr)} + {np(dat)}
położyć: perf: subj{np(str)} + obj{lexnp(str,sg,'krzyżyk',natr)} + {prepnp(na,loc)}
położyć: perf: subj{np(str)} + obj{lexnp(str,sg,'łapa',natr)} + {prepnp(na,loc)}
położyć: perf: subj{np(str)} + obj{lexnp(str,sg,'ręka',natr)} + {prepnp(na,loc)}
położyć: perf: subj{np(str)} + obj{lexnp(str,sg,'tama',natr)} + {np(dat)}
położyć: perf: subj{np(str)} + obj{np(str)} + {lexnp(inst,sg,'trup',natr)}
położyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
położyć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
położyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
położyć się: perf: subj,controller{np(str)} + controllee{infp(imperf)}
położyć się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
położyć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
położyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
położyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
połykać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
połyskiwać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
pomacać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
pomacać: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
pomacać: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
pomacać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pomacać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
pomacać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pomacać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
pomacać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pomacać: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
pomacać: perf: subj{np(str)} + {prepnp(za,inst)}
pomacać: perf: subj{np(str)} + {xp(locat)} + {refl}
pomacać się: perf: subj{np(str)} + {prepnp(z,inst)}
pomachać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
pomachać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
pomachać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
pomachać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
pomachać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
pomachać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {cp(że)}
pomachać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {cp(żeby)}
pomachać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(że)}
pomachać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(żeby)}
pomagać: imperf: subj{cp(że)} + {np(dat)}
pomagać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
pomagać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(w,loc)}
pomagać: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
pomagać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
pomagać: imperf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
pomagać: imperf: subj{np(str)} + {prepnp(na,acc)}
pomalować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pomarzyć: perf: subj{np(str)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
pomarzyć: perf: subj{np(str)} + {prepnp(o,loc); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {lexnp(dat,_,'siebie',natr)}
pomaszerować: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
pomaszerować: perf: subj{np(str)} + {xp(perl)}
pomiatać: imperf: subj{np(str)} + {np(inst)}
pomieszać: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',atr)}
pomieszać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pomieszać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pomieszać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
pomieszać się: perf: {np(dat)} + {preplexnp(w,loc,_,'głowa',atr)}
pomieszać się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
pomieszkać: perf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(dur)}
pomieszkać: perf: subj{np(str)} + {prepnp(u,gen); xp(locat)} + {xp(dur)}
pomieszkać: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(dur)}
pomieścić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pomieścić się: perf: subj{cp(int)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
pomieścić się: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
pomieścić się: perf: subj{cp(że)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
pomieścić się: perf: subj{ncp(str,int)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
pomieścić się: perf: subj{ncp(str,żeby)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
pomieścić się: perf: subj{ncp(str,że)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
pomieścić się: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
pomieścić się: perf: subj{np(str)} + {xp(locat)}
pomijać: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,int); ncp(str,że)} + {lexnp(inst,sg,'milczenie',atr)}
pomijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
pomijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pominąć: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,int); ncp(str,że)} + {lexnp(inst,sg,'milczenie',atr)}
pominąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
pominąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
pomknąć: perf: subj{np(str)} + {prepnp(do,gen)}
pomknąć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
pomnożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
pomnożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
pomnożyć się: perf: subj{np(str)} + {np(dat)}
pomodlić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(o,acc); prepnp(za,acc); cp(żeby); prepncp(o,acc,że); prepncp(o,acc,żeby); prepncp(za,acc,że); prepncp(za,acc,żeby)} + {or}
pomodlić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(za,acc)} + {cp(żeby)}
pomodlić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(za,inst)} + {cp(żeby)}
pomóc: perf: subj{cp(że)} + {np(dat)}
pomóc: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
pomóc: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(w,loc)}
pomóc: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
pomóc: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
pomóc: perf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
pomóc: perf: subj{np(str)} + {prepnp(na,acc)}
pomówić: perf: subj,controller{np(str)} + controllee{xp(mod)}
pomówić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)}
pomówić: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
pomówić: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
pomówić: perf: subj{np(str)} + {prepnp(z,inst)} + {prepadjp(po,postp)}
pompować: imperf: subj{np(str)} + {np(inst)} + {refl}
pompować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
pompować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
pompować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pompować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pompować: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
pompować: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)} + {xp(perl)}
pomścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
pomścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
pomścić się: perf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(za,acc)}
pomykać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
pomykać: imperf: subj{np(str)} + {prepnp(do,gen)}
pomykać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(mod)}
pomylić: perf: subj{np(str)} + {np(dat)} + {np(str)}
pomylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
pomylić się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
pomylić się: perf: subj{np(str)} + {prepnp(co do,gen)}
pomylić się: perf: subj{np(str)} + {prepnp(w,loc)}
pomyśleć: perf: subj{np(str)} + {cp(żeby)}
pomyśleć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
pomyśleć: perf: subj{np(str)} + {or}
pomyśleć: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że); prepncp(nad,inst,żeby)}
pomyśleć: perf: subj{np(str)} + {prepnp(o,loc); cp(int); cp(że); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
pomyśleć: perf: subj{np(str)} + {prepnp(o,loc)} + {nonch}
ponaglać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
ponaglać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {or}
ponaglać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
ponarzekać: perf: subj{np(str)} + {cp(int)} + {lexnp(dat,_,'sobie',natr)}
ponarzekać: perf: subj{np(str)} + {cp(że)} + {lexnp(dat,_,'sobie',natr)}
ponarzekać: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {lexnp(dat,_,'sobie',natr)} + {or}
ponawiać: imperf: subj{np(str)} + obj{np(str)}
ponawiać się: imperf: subj{np(str)}
poniechać: perf: subj{np(str)} + {np(gen)}
ponieść: perf: {np(str)} + {xp(adl)}
ponieść: perf: subj{np(str)} + {np(str)}
ponieść: perf: subj{np(str)} + {np(str)} + {preplexnp(z,gen,_,'ręka',ratr)}
ponieść: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
ponieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)} + {xp(perl)}
poniewierać: imperf: subj{np(str)} + {xp(locat)}
poniewierać się: imperf: subj{np(str)} + {np(inst)}
poniżać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
poniżać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
poniżyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
poniżyć się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
poniżyć się: perf: subj{np(str)} + {prepnp(przed,inst)}
poniżyć się: perf: subj{np(str)} + {prepnp(wobec,gen)}
ponosić: imperf: subj{np(str)} + obj{np(str)}
ponowić: perf: subj{np(str)} + obj{np(str)}
ponowić się: perf: subj{np(str)}
pooglądać: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
pooglądać: perf: subj{np(str)} + obj{np(str)} + {cp(jak)}
pooglądać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
pooglądać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pooglądać: perf: subj{np(str)} + {xp(locat)} + {refl}
pooglądać się: perf: subj{np(str)} + {prepnp(za,inst)}
popadać: imperf: subj{np(str)} + {prepnp(u,gen)} + {preplexnp(w,acc,sg,'niełaska',natr)}
popadać: imperf: subj{np(str)} + {prepnp(w,acc)}
popadać: perf: subj{E}
popadać: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
popadać: perf: subj{np(str)} + {prepnp(od,gen)}
popadać: perf: subj{np(str)} + {prepnp(z,gen)}
popadać: perf: subj{np(str)} + {xp(adl)}
popaść: perf: subj{np(str)} + {np(dat)}
popaść: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
popaść: perf: subj{np(str)} + {prepnp(u,gen)} + {preplexnp(w,acc,sg,'niełaska',natr)}
popaść: perf: subj{np(str)} + {prepnp(w,acc)}
popaść się: perf: subj{np(str)} + {np(inst)}
popaść się: perf: subj{np(str)} + {prepnp(na,loc)}
popatrywać: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
popatrywać: imperf: subj{np(str)} + {cp(jak)}
popatrywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
popatrywać: imperf: subj{np(str)} + {prepnp(na,acc)}
popatrywać: imperf: subj{np(str)} + {prepnp(po,loc)}
popatrywać: imperf: subj{np(str)} + {prepnp(przez,acc)}
popatrzeć: perf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
popatrzeć: perf: subj{np(str)} + {cp(jak)}
popatrzeć: perf: subj{np(str)} + {cp(że)}
popatrzeć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
popatrzeć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
popatrzeć: perf: subj{np(str)} + {prepnp(na,acc); prepnp(po,loc); prepnp(w,acc); cp(int); prepncp(na,acc,int); prepncp(na,acc,jak); prepncp(na,acc,że); xp(locat)}
popatrzeć: perf: subj{np(str)} + {prepnp(przez,acc)}
popatrzeć się: perf: subj{np(str)} + {cp(int)}
popatrzeć się: perf: subj{np(str)} + {cp(jak)}
popatrzeć się: perf: subj{np(str)} + {cp(że)}
popatrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
popatrzeć się: perf: subj{np(str)} + {prepnp(na,acc)}
popatrzeć się: perf: subj{np(str)} + {prepnp(po,loc)}
popatrzeć się: perf: subj{np(str)} + {prepnp(przez,acc)}
popatrzyć: perf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
popatrzyć: perf: subj{np(str)} + {cp(jak)}
popatrzyć: perf: subj{np(str)} + {cp(że)}
popatrzyć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
popatrzyć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
popatrzyć: perf: subj{np(str)} + {prepnp(na,acc); prepnp(po,loc); prepnp(w,acc); cp(int); prepncp(na,acc,int); prepncp(na,acc,jak); prepncp(na,acc,że); xp(locat)}
popatrzyć: perf: subj{np(str)} + {prepnp(przez,acc)}
popatrzyć się: perf: subj{np(str)} + {cp(int)}
popatrzyć się: perf: subj{np(str)} + {cp(jak)}
popatrzyć się: perf: subj{np(str)} + {cp(że)}
popatrzyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
popatrzyć się: perf: subj{np(str)} + {prepnp(na,acc)}
popatrzyć się: perf: subj{np(str)} + {prepnp(po,loc)}
popatrzyć się: perf: subj{np(str)} + {prepnp(przez,acc)}
popełniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
popełnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
popędzić: perf: subj,controller{np(str)} + controllee{infp(_)}
popędzić: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
popędzić: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
popędzić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
popędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
popędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
popędzić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,loc)}
popędzić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
popędzić: perf: subj{np(str)} + {prepnp(na,loc)} + {xp(adl)}
popędzić: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
popędzić: perf: subj{np(str)} + {prepnp(za,inst)}
popić: perf: subj{np(str)}
popić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
popić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
popierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
popierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
popijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
popijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
popisać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
popisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
popisać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
popisać: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)}
popisać: perf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(z,inst)} + {xp(locat)}
popisać się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(przed,inst)}
popisać się: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)} + {or}
popisać się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
popisać się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
popisywać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(przed,inst)}
popisywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)} + {or}
popisywać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
popisywać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
popłakać: perf: subj{np(str)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
popłakać: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)} + {lexnp(dat,_,'siebie',natr)}
popłakać: perf: subj{np(str)} + {prepnp(w,acc)} + {lexnp(dat,_,'siebie',natr)}
popłakać się: perf: subj{np(str)} + {cp(że)}
popłakać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
popłakać się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
popłynąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
popłynąć: perf: subj{np(str)} + {np(inst)}
popłynąć: perf: subj{np(str)} + {prepnp(na,loc)}
popłynąć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
popłynąć: perf: subj{np(str)} + {xp(perl)}
popływać: imperf: subj{np(str)} + {np(dat)} + {prepnp(pod,acc); prepnp(z,inst)}
popływać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
popływać: imperf: subj{np(str)} + {xp(locat)}
popływać: imperf: subj{np(str)} + {xp(mod)}
popracować: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {xp(dur)}
popracować: perf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(dur)}
popracować: perf: subj{np(str)} + {comprepnp(na rzecz)} + {xp(dur)}
popracować: perf: subj{np(str)} + {prepnp(dla,gen)} + {xp(dur)}
popracować: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)} + {xp(dur)}
popracować: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,że); prepncp(nad,inst,żeby)} + {xp(dur)}
popracować: perf: subj{np(str)} + {prepnp(na,loc)} + {xp(dur)}
popracować: perf: subj{np(str)} + {prepnp(przy,loc)} + {xp(dur)}
popracować: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(dur)} + {xp(locat)}
poprawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
poprawiać się: imperf: subj{np(str)} + {np(dat)}
poprawiać się: imperf: subj{np(str)} + {prepnp(w,loc)}
poprawiać się: imperf: subj{np(str)} + {prepnp(z,gen)}
poprawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
poprawić się: perf: subj{np(str)} + {np(dat)}
poprawić się: perf: subj{np(str)} + {prepnp(w,loc)}
poprawić się: perf: subj{np(str)} + {prepnp(z,gen)}
poprosić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
poprosić: perf: subj{np(str)} + obj{np(str)} + {or}
poprosić: perf: subj{np(str)} + obj{np(str)} + {prepncp(o,acc,żeby)}
poprosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
poprosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
poprosić: perf: subj{np(str)} + {prepnp(z,inst)}
poprowadzić: perf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
poprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
poprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
poprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
poprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
poprzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
poprzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
poprzedzać: imperf: subj{ncp(str,że)} + obj{np(str)}
poprzedzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
poprzedzić: perf: subj{ncp(str,że)} + obj{np(str)}
poprzedzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
poprzestać: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
poprzestawać: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że); prepncp(na,loc,żeby)}
popsuć: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
popsuć się: perf: {np(dat)} + {prepnp(od,gen)} + {preplexnp(w,loc,_,'głowa',natr)}
popsuć się: perf: subj{np(str)} + {np(dat)} + {comprepnp(z powodu)}
popsuć się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
popularyzować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
popularyzować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
popularyzować się: imperf: subj{np(str)} + {xp(locat)}
popuścić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
popuścić się: perf: subj{np(str)} + {np(dat)} + {comprepnp(z powodu)}
popuścić się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen); prepncp(od,gen,że)}
popychać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
popychać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
popychać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
popychać się: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
popytać: imperf: subj{np(str)} + {np(gen)} + {comprepnp(na temat)}
popytać: imperf: subj{np(str)} + {np(gen)} + {cp(int)}
popytać: imperf: subj{np(str)} + {np(gen)} + {prepnp(o,acc); prepncp(o,acc,int)}
popytać: imperf: subj{np(str)} + {np(str)} + {comprepnp(na temat)}
popytać: imperf: subj{np(str)} + {np(str)} + {cp(int)}
popytać: imperf: subj{np(str)} + {np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
popytać się: imperf: subj{np(str)} + {np(gen)} + {comprepnp(na temat)}
popytać się: imperf: subj{np(str)} + {np(gen)} + {cp(int)}
popytać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(o,acc); prepncp(o,acc,int)}
pora: imperf: controller{np(dat)} + controllee{infp(_)}
pora: imperf: {cp(żeby)}
pora: imperf: {prepnp(na,acc); prepncp(na,acc,żeby)}
pora: imperf: {xp(adl)}
porabiać: imperf: subj{np(str)} + {nonch} + {xp(dur)}
porabiać: imperf: subj{np(str)} + {nonch} + {xp(locat)}
poradzić: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
poradzić: perf: subj{np(str)} + {np(dat)} + {cp(int)}
poradzić: perf: subj{np(str)} + {np(dat)} + {or}
poradzić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)} + {nonch}
poradzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
poradzić: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że); prepncp(z,inst,żeby)} + {lexnp(dat,_,'siebie',natr)}
poradzić się: perf: subj{np(str)} + {np(gen)} + {comprepnp(na temat)}
poradzić się: perf: subj{np(str)} + {np(gen)} + {comprepnp(w kwestii)}
poradzić się: perf: subj{np(str)} + {np(gen)} + {comprepnp(w sprawie)}
poradzić się: perf: subj{np(str)} + {np(gen)} + {cp(int)}
poradzić się: perf: subj{np(str)} + {np(gen)} + {preplexnp(w,loc,sg,'temat',atr)}
porastać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
porastać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
porastać: imperf: subj{np(str)} + {prepnp(w,acc)}
porazić: perf: {np(dat)} + {np(str)}
porazić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(mod)}
porazić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(temp)}
porazić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
porażać: imperf: subj{cp(int)} + obj{np(str)}
porażać: imperf: subj{cp(że)} + obj{np(str)}
porażać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
porąbać: perf: {np(str)}
porąbać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
porąbać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
poręczyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc)} + {cp(że)}
poręczyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
poręczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
porobić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
porobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
porobić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
porobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
porobić: perf: subj{np(str)} + {prepnp(w,acc)}
porobić się: perf: {np(dat)} + {advp(misc)}
porobić się: perf: {prepnp(z,inst)} + {advp(misc)}
porobić się: perf: subj,controller{np(str)} + controllee{adjp(pred)}
porobić się: perf: subj,controller{np(str)} + controllee{np(inst)}
porobić się: perf: subj{nonch} + {prepnp(z,inst)}
porobić się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
porobić się: perf: subj{np(str)} + {prepnp(z,gen)}
porobić się: perf: {xp(locat)} + {advp(misc)}
porozmawiać: perf: subj{np(str)} + {prepnp(o,loc); comprepnp(na temat); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
porozmawiać: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
porozmawiać: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
porozmawiać: perf: subj{np(str)} + {prepnp(z,inst)} + {prepncp(o,loc,żeby)}
porozumieć się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)}
porozumieć się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
porozumieć się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
porozumieć się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
porozumieć się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
porozumieć się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
porozumieć się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
porozumieć się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
porozumieć się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
porozumieć się: perf: subj{np(str)} + {prepnp(z,inst)} + {prepadjp(po,postp)}
porozumiewać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)}
porozumiewać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
porozumiewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
porozumiewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
porozumiewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
porozumiewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
porozumiewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
porozumiewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
porozumiewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
porozumiewać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepadjp(po,postp)}
porównać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int)}
porównać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
porównać: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
porównać: perf: subj{np(str)} + {prepnp(z,inst)} + {refl}
porównywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
porównywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
porównywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
porównywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {refl}
poróżnić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(z,inst)}
poróżnić się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {prepnp(z,inst)}
poruszać: imperf: subj{cp(że)} + {np(str)}
poruszać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
poruszać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)}
poruszać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
poruszać: perf: subj{np(str)} + {np(inst)} + {np(str)}
poruszać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(w,loc)}
poruszać się: imperf: subj{np(str)} + {np(inst)}
poruszać się: imperf: subj{np(str)} + {prepnp(na,loc)}
poruszać się: imperf: subj{np(str)} + {prepnp(o,loc)}
poruszać się: perf: subj{np(str)}
poruszyć: perf: subj{cp(że)} + {np(str)}
poruszyć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
poruszyć: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
poruszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
poruszyć się: perf: subj{np(str)}
porwać: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
porwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
porwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
porwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
porwać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
porwać się: perf: subj{np(str)} + {np(dat)}
porwać się: perf: subj{np(str)} + {prepnp(do,gen)}
porwać się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
porwać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
porwać się: perf: subj{np(str)} + {prepnp(za,acc)}
porwać się: perf: subj{np(str)} + {xp(abl)}
porywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
porywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
porywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
porywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
porywać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,_,'siebie',natr)}
porywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
porywać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
porywać się: imperf: subj{np(str)} + {np(dat)}
porywać się: imperf: subj{np(str)} + {prepnp(do,gen)}
porywać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
porywać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
porywać się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
porywać się: imperf: subj{np(str)} + {prepnp(za,acc)}
porywać się: imperf: subj{np(str)} + {xp(abl)}
porządkować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
porządkować się: imperf: subj{np(str)}
porzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
porzucać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
porzucać: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
porzucać: perf: subj{np(str)} + {np(str)} + {xp(adl)}
porzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
porzucić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
posadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
posadzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
posądzać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
posądzać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby2)}
posądzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że); prepncp(o,acc,żeby2)}
posądzać: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {refl}
posądzić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
posądzić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby2)}
posądzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że); prepncp(o,acc,żeby2)}
posądzić: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {refl}
posiać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
posiać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
posiać: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
posiać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
posiać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
posiać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
posiać się: perf: subj{np(str)} + {xp(locat)}
posiadać: imperf: subj{np(str)} + {np(str)}
posiadać: imperf: subj{np(str)} + obj{np(str)}
posiadać: perf: subj{np(str)} + {xp(locat)}
posiadać się: imperf: subj{np(str)} + {prepnp(z,inst)}
posiąść: perf: subj{np(str)} + {np(str)}
posiąść się: perf: subj{np(str)} + {prepnp(z,inst)}
posiedzieć: perf: subj{np(str)} + {np(dat)} + {xp(dur)} + {xp(locat)}
posiedzieć: perf: subj{np(str)} + {prepnp(nad,inst)} + {xp(dur)}
posiedzieć: perf: subj{np(str)} + {prepnp(na,loc)} + {xp(dur)}
posiedzieć: perf: subj{np(str)} + {prepnp(przy,loc)} + {xp(dur)}
posiedzieć: perf: subj{np(str)} + {prepnp(u,gen)} + {xp(dur)}
posiedzieć: perf: subj{np(str)} + {prepnp(w,loc)} + {xp(dur)}
posiedzieć: perf: subj{np(str)} + {prepnp(za,acc)} + {xp(dur)}
posiekać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
posiekać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
posiekać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
posiekać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
posilić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
posilić się: perf: subj{np(str)} + {np(inst)}
posilić się: perf: subj{np(str)} + {prepnp(u,gen)}
posilić się: perf: subj{np(str)} + {prepnp(w,loc)}
poskarżyć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(int)}
poskarżyć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
poskarżyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(int)}
poskarżyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(że)}
poskarżyć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)} + {cp(że)}
poskarżyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(int); cp(że)}
poskarżyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
poskarżyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
poskarżyć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(int); cp(że)}
poskarżyć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {or}
poskarżyć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
poskarżyć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {prepnp(przed,inst)}
poskarżyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)} + {cp(że)}
poskarżyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)} + {or}
poskąpić: perf: subj{np(str)} + {np(dat)} + {np(part)} + {prepnp(na,acc)}
poskąpić: perf: subj{np(str)} + {np(part)} + {prepnp(dla,gen)}
poskromić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
poskromić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
poskromić: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
poskutkować: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst); ncp(inst,że); ncp(inst,żeby)}
posłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
posłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
posłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)}
posłać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
posłuchać: imperf: subj{np(str)} + {cp(int)}
posłuchać: imperf: subj{np(str)} + {cp(że)}
posłuchać: imperf: subj{np(str)} + {np(gen); prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
posłuchać: imperf: subj{np(str)} + {np(inst)} + {cp(jak)}
posłuchać: imperf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,jak); ncp(gen,że)} + {np(inst)}
posłuchać się: imperf: subj{np(str)} + {np(gen)}
posługiwać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
posługiwać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
posługiwać: imperf: subj{np(str)} + {prepnp(na,loc)}
posługiwać: imperf: subj{np(str)} + {prepnp(u,gen)}
posługiwać się: imperf: subj{np(str)} + {np(inst)}
posłużyć: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
posłużyć: perf: subj,controller{np(str)} + controllee{prepnp(za,acc)} + {np(dat)}
posłużyć: perf: subj{np(str)} + {np(dat)} + {np(inst)}
posłużyć: perf: subj{np(str)} + {np(dat)} + {prepnp(dla,gen)}
posłużyć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
posłużyć: perf: subj{np(str)} + {prepnp(w,loc)}
posłużyć się: perf: subj{np(str)} + {np(inst)}
posłyszeć: perf: subj{np(str)} + {cp(int)}
posłyszeć: perf: subj{np(str)} + {cp(jak)}
posłyszeć: perf: subj{np(str)} + {cp(że)}
posłyszeć: perf: subj{np(str)} + obj{np(str)}
posłyszeć: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
posmakować: perf: subj{np(str)} + {cp(int)}
posmakować: perf: subj{np(str)} + {np(dat)}
posmakować: perf: subj{np(str)} + obj{np(gen); ncp(gen,int)}
posmarować: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
posmarować: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
posmarować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
posmarować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
posmarować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
posmarować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
posolić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
posolić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
posolić: perf: subj{np(str)} + {refl}
pospacerować: perf: subj{np(str)} + {xp(perl)}
pospać: perf: subj{np(str)} + {lexnp(inst,sg,'sen',atr)}
pospać: perf: subj{np(str)} + {np(dat)} + {prepadjp(na,loc)}
pospać: perf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
pospać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {prepnp(u,gen)}
pospać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)} + {advp(misc)}
pospać: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
pospać: perf: subj{np(str)} + {np(str)} + {prepnp(z,inst)}
pospać: perf: subj{np(str)} + {prepnp(do,gen)}
posprzątać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
posprzątać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
posprzątać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
posprzątać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
postać: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
postać: perf: subj{cp(że)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
postać: perf: subj{infp(_)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
postać: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'myśl',natr)}
postać: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
postać: perf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)} + {xp(dur)}
postać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {xp(dur)}
postać: perf: subj{np(str)} + {np(dat)} + {xp(dur)} + {xp(locat)}
postać: perf: subj{np(str)} + {prepnp(przed,inst)} + {xp(dur)}
postać: perf: subj{np(str)} + {prepnp(przy,loc)} + {xp(dur)}
postać: perf: subj{np(str)} + {prepnp(za,gen)} + {xp(dur)}
postanawiać: imperf: subj,controller{np(str)} + controllee{infp(_)}
postanawiać: imperf: subj{np(str)} + obj{cp(int)}
postanawiać: imperf: subj{np(str)} + obj{cp(że)}
postanawiać: imperf: subj{np(str)} + obj{cp(żeby)}
postanawiać: imperf: subj{np(str)} + obj{np(str)}
postanawiać: imperf: subj{np(str)} + {or}
postanawiać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
postanowić: perf: subj,controller{np(str)} + controllee{infp(_)}
postanowić: perf: subj{np(str)} + obj{cp(int)}
postanowić: perf: subj{np(str)} + obj{cp(że)}
postanowić: perf: subj{np(str)} + obj{cp(żeby)}
postanowić: perf: subj{np(str)} + obj{np(str)}
postanowić: perf: subj{np(str)} + {or}
postanowić: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
postarać się: perf: subj,controller{np(str)} + controllee{prepnp(o,acc); cp(żeby); prepncp(o,acc,żeby); infp(_)}
postarzać: imperf: subj{np(str)} + {np(inst)} + {refl}
postarzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
postarzać: imperf: subj{np(str)} + {refl}
postarzać się: perf: subj{np(str)} + {prepnp(o,acc)}
postawić: perf: subj{np(str)} + {np(dat)} + {prepnp(za,acc)} + {cp(że)}
postawić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
postawić: perf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(dat)} + {prepnp(za,acc)}
postawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
postawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,acc,sg,'pręgierz',ratr)}
postawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'pręgierz',ratr)}
postawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
postawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
postawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
postawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
postawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
postawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
postawić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
postawić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
postawić: perf: subj{np(str)} + {prepadjp(na,loc)}
postawić: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
postawić: perf: subj{np(str)} + {prepnp(za,acc)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)}
postawić: perf: subj{np(str)} + {prepnp(za,acc)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
postawić: perf: subj{np(str)} + {prepnp(za,acc)} + {infp(_)} + {lexnp(dat,_,'siebie',natr)}
postawić się: perf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'okoń',natr)}
postawić się: perf: subj{np(str)} + {prepnp(do,gen)} + {lexnp(inst,sg,'sztorc',natr)}
postawić się: perf: subj{np(str)} + {prepnp(w,loc)}
postawić się: perf: subj{np(str)} + {prepnp(wobec,gen)}
postąpić: perf: subj,controller{np(str)} + controllee{xp(mod)} + {comprepnp(w kwestii)}
postąpić: perf: subj,controller{np(str)} + controllee{xp(mod)} + {comprepnp(w sprawie)}
postąpić: perf: subj{np(str)} + controller{prepnp(z,inst)} + controllee{xp(mod)}
postąpić: perf: subj{np(str)} + {np(str)} + {xp(adl)}
postąpić: perf: subj{np(str)} + {prepnp(o,acc)} + {xp(adl)}
postępować: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(wobec,gen)}
postępować: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(względem,gen)}
postępować: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)}
postępować: imperf: subj{np(str)} + controller{prepnp(z,inst)} + controllee{xp(mod)}
postępować: imperf: subj{np(str)} + {np(inst)}
postępować: imperf: subj{np(str)} + {np(str)} + {prepnp(za,inst)}
postępować: imperf: subj{np(str)} + {np(str)} + {xp(adl)}
postępować: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(za,inst)}
postępować: imperf: subj{np(str)} + {prepnp(według,gen)}
postradać: perf: subj{np(str)} + obj{lexnp(str,pl,'zmysł',natr)}
postradać: perf: subj{np(str)} + obj{lexnp(str,sg,'rozum',natr)}
postradać: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na rzecz)}
postradać: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
postraszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
postraszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); cp(że); ncp(inst,że)}
postraszyć: perf: subj{np(str)} + obj{np(str)} + {or}
postrzegać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
postrzegać: imperf: subj{np(str)} + {cp(int)}
postrzegać: imperf: subj{np(str)} + {cp(że)}
postrzegać: imperf: subj{np(str)} + {ncp(str,int)}
postrzegać: imperf: subj{np(str)} + {ncp(str,że)}
postrzegać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
postrzegać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
postrzegać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
postrzelać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
postrzelać: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
postrzelać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {lexnp(dat,_,'sobie',natr)}
postrzelać: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {lexnp(str,_,'sobie',natr)}
postrzelać: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)} + {lexnp(dat,_,'sobie',natr)}
postrzelać: perf: subj{np(str)} + {prepnp(na,loc)} + {lexnp(dat,_,'sobie',natr)}
postrzelać się: perf: subj{np(str)} + {np(inst)}
postrzelać się: perf: subj{np(str)} + {prepnp(o,acc)}
postrzelać się: perf: subj{np(str)} + {prepnp(z,gen)}
postrzelać się: perf: subj{np(str)} + {prepnp(z,inst)}
postrzelić: perf: subj{np(str)} + {np(inst)} + {advp(misc)} + {refl}
postrzelić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
postrzelić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {advp(misc)}
postrzelić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
postrzelić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
postrzelić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {advp(misc)}
postrzelić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
postrzelić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {advp(misc)}
postrzelić: perf: subj{np(str)} + {prepnp(w,acc)} + {advp(misc)} + {refl}
postrzelić: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)} + {refl}
postrzelić: perf: subj{np(str)} + {prepnp(z,gen)} + {advp(misc)} + {refl}
postulować: imperf: subj{np(str)} + obj{cp(żeby)}
postulować: imperf: subj{np(str)} + obj{np(str); ncp(str,żeby)}
postulować: imperf: subj{np(str)} + {or}
posunąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)} + {xp(perl)}
posunąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
posunąć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
posunąć się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
posunąć się: perf: subj{np(str)} + {prepnp(ku,dat)}
posunąć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
posunąć się: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
posuwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)} + {xp(perl)}
posuwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
posuwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
posuwać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
posuwać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
posuwać się: imperf: subj{np(str)} + {prepnp(ku,dat)}
posuwać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
posuwać się: imperf: subj{np(str)} + {xp(adl)} + {xp(perl)}
posyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
posyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
posyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
posyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
posypać: perf: subj{np(str)} + {np(inst)} + {refl}
posypać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(adl)}
posypać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
posypać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
posypać się: perf: subj{np(str)} + {prepnp(na,acc)}
posypywać: imperf: subj{np(str)} + {np(inst)} + {refl}
posypywać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(adl)}
posypywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
poszaleć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
poszaleć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
poszaleć: perf: subj{np(str)} + {np(inst)}
poszaleć: perf: subj{np(str)} + {preplexnp(na,loc,sg,'punkt',ratr)}
poszaleć: perf: subj{np(str)} + {prepnp(na,loc)}
poszaleć: perf: subj{np(str)} + {prepnp(za,gen)}
poszaleć: perf: subj{np(str)} + {prepnp(z,gen)}
poszaleć: perf: subj{np(str)} + {xp(locat)}
poszczęścić: perf: subj{np(str)} + {np(dat)}
poszczęścić się: perf: {np(dat)} + {prepnp(z,inst)}
poszczęścić się: perf: {np(dat)} + {xp(locat)}
poszczycić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(przed,inst)}
poszczycić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
poszczycić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
poszerzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc); prepncp(o,acc,int)}
poszerzać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
poszerzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc); prepncp(o,acc,int)}
poszerzyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
poszukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
poszukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
poszukać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
poszukiwać: imperf: subj{np(str)} + obj{np(gen)} + {np(dat)} + {xp(locat)}
poszukiwać: imperf: subj{np(str)} + obj{np(gen)} + {np(inst)} + {prepnp(za,acc)}
poszukiwać: imperf: subj{np(str)} + {prepnp(za,inst)}
poszybować: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
poszybować: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
pośliznąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
poślubić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pośmiać się: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
pośmiać się: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,jak); prepncp(z,gen,że)}
pośpieszyć: perf: subj,controller{np(str)} + controllee{infp(_)}
pośpieszyć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
pośpieszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pośpieszyć: perf: subj{np(str)} + {prepnp(do,gen); prepnp(ku,dat); prepnp(na,acc); xp(adl)} + {xp(perl)}
pośpieszyć się: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)}
pośpieszyć się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)}
pośpiewać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
pośpiewać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
pośpiewać: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
pośpiewać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
pośpiewać: perf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)} + {prepnp(z,inst)}
pośpiewać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,inst)}
pośredniczyć: imperf: subj{np(str)} + {prepnp(między,inst)} + {prepnp(przy,loc)}
pośredniczyć: imperf: subj{np(str)} + {prepnp(między,inst)} + {prepnp(w,loc)}
pośredniczyć: imperf: subj{np(str)} + {prepnp(pomiędzy,inst)} + {prepnp(przy,loc)}
pośredniczyć: imperf: subj{np(str)} + {prepnp(pomiędzy,inst)} + {prepnp(w,loc)}
poświadczać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)} + {cp(że)}
poświadczać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
poświadczać: imperf: subj{np(str)} + obj{prepnp(o,loc); prepncp(o,loc,że)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
poświadczyć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)} + {cp(że)}
poświadczyć: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
poświadczyć: imperf: subj{np(str)} + obj{prepnp(o,loc); prepncp(o,loc,że)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
poświecić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
poświecić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
poświęcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)}
poświęcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen); prepncp(dla,gen,żeby)}
poświęcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
poświęcać się: imperf: subj{np(str)} + {np(dat); ncp(dat,żeby)}
poświęcać się: imperf: subj{np(str)} + {prepnp(dla,gen)}
poświęcić: perf: subj{np(str)} + obj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)}
poświęcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen); prepncp(dla,gen,żeby)}
poświęcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
poświęcić się: perf: subj{np(str)} + {np(dat); ncp(dat,żeby)} + {np(inst)}
poświęcić się: perf: subj{np(str)} + {prepnp(dla,gen)}
potakiwać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
potakiwać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
potakiwać: imperf: subj{np(str)} + {np(dat)} + {or}
potakiwać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
potańczyć: perf: subj{np(str)} + obj{np(str)}
potańczyć: perf: subj{np(str)} + {prepnp(do,gen)}
potańczyć: perf: subj{np(str)} + {prepnp(przy,loc)} + {prepnp(z,inst)}
potańczyć: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
potęgować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
potęgować się: imperf: subj{np(str)} + {prepnp(u,gen)}
potęgować się: imperf: subj{np(str)} + {prepnp(w,loc)}
potępiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {preplexnp(w,acc,sg,'czambuł',natr)}
potępiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
potępić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {preplexnp(w,acc,sg,'czambuł',natr)}
potępić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
potknąć się: perf: subj{np(str)} + {prepnp(na,loc)}
potknąć się: perf: subj{np(str)} + {prepnp(o,acc)}
potknąć się: perf: subj{np(str)} + {prepnp(w,loc)}
potłuc: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
potłuc: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
potłuc: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
potłuc się: perf: subj{np(str)} + {prepnp(o,acc)}
potoczyć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
potoczyć: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
potoczyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
potoczyć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
potoczyć się: perf: subj{np(str)} + {xp(mod)}
potrafić: imperf: subj,controller{np(str)} + controllee{infp(_)}
potrafić: imperf: subj{np(str)} + {nonch}
potraktować: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
potraktować: perf: subj,controller{np(str)} + controllee{xp(mod)}
potraktować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
potraktować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
potraktować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
potrącać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
potrącać: imperf: subj{np(str)} + obj{lexnp(str,sg,'struna',atr)} + {prepnp(u,gen)}
potrącać: imperf: subj{np(str)} + obj{lexnp(str,sg,'struna',atr)} + {prepnp(w,loc)}
potrącać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
potrącać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
potrącić: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
potrącić: perf: subj{np(str)} + obj{lexnp(str,sg,'struna',atr)} + {prepnp(u,gen)}
potrącić: perf: subj{np(str)} + obj{lexnp(str,sg,'struna',atr)} + {prepnp(w,loc)}
potrącić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
potrącić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
potrwać: perf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(dur)}
potrząsać: imperf: subj{np(str)} + {np(inst)}
potrząsać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
potrząsnąć: perf: subj{np(str)} + {np(inst)}
potrząsnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
potrzebować: imperf: subj,controller{np(str)} + controllee{infp(_)}
potrzebować: imperf: subj{np(str)} + {np(part)} + {prepnp(dla,gen); prepnp(do,gen); prepnp(na,acc); cp(żeby); prepncp(do,gen,żeby)}
potrzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
potrzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)} + {refl}
potrzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
potrzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
potrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
potrzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
potrzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
potrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
potrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
potrzymać: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
potrzymać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
potrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
potrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
potrzymać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
potrzymać: perf: subj{np(str)} + {prepnp(za,acc)} + {refl}
potrzymać: perf: subj{np(str)} + {xp(temp)}
potrzymać się: perf: subj{np(str)} + {np(gen)} + {np(inst)}
poturbować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
poturbować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
poturbować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
poturbować się: perf: subj{np(str)} + {advp(pron)}
poturbować się: perf: subj{np(str)} + {xp(locat)}
poturbować się: perf: subj{np(str)} + {xp(temp)}
potwierdzać: imperf: subj{np(str)} + {cp(jakoby)}
potwierdzać: imperf: subj{np(str)} + {np(inst)} + {cp(int)}
potwierdzać: imperf: subj{np(str)} + {np(inst)} + {cp(że)}
potwierdzać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
potwierdzać: imperf: subj{np(str)} + {or}
potwierdzać się: imperf: subj{cp(że)}
potwierdzać się: imperf: subj{np(str); ncp(str,że)}
potwierdzać się: imperf: subj{np(str)} + {prepnp(w,loc)}
potwierdzić: perf: subj{np(str)} + {cp(jakoby)}
potwierdzić: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,że)} + {np(inst); ncp(inst,że)}
potwierdzić: perf: subj{np(str)} + {or}
potwierdzić się: perf: subj{cp(że)}
potwierdzić się: perf: subj{np(str); ncp(str,że)}
potykać się: imperf: subj{np(str)} + {prepnp(na,loc)}
potykać się: imperf: subj{np(str)} + {prepnp(o,acc)}
potykać się: imperf: subj{np(str)} + {prepnp(w,loc)}
pouczać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
pouczać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(w kwestii)}
pouczać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
pouczać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
pouczać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
pouczać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
pouczać: imperf: subj{np(str)} + obj{np(str)} + {or}
pouczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
pouczyć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
pouczyć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w kwestii)}
pouczyć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
pouczyć: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
pouczyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
pouczyć: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
pouczyć: perf: subj{np(str)} + obj{np(str)} + {or}
pouczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
pouczyć się: perf: subj{np(str)} + {comprepnp(na temat)}
pouczyć się: perf: subj{np(str)} + {np(gen)} + {prepnp(do,gen)}
pouczyć się: perf: subj{np(str)} + {np(gen)} + {prepnp(z,gen)}
pouczyć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
pouczyć się: perf: subj{np(str)} + {prepnp(na,acc)}
pouczyć się: perf: subj{np(str)} + {prepnp(o,loc)}
poukładać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
poukładać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
poukładać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
poukładać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
poukładać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
poukładać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
poukładać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
poukładać się: perf: {np(dat)} + {prepnp(z,inst)}
poukładać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
poukładać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
poukładać się: perf: subj{np(str)} + {prepnp(do,gen)}
poukładać się: perf: subj{np(str)} + {prepnp(z,inst)}
poukładać się: perf: subj{np(str)} + {xp(locat)}
poustawiać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
poustawiać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
poustawiać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
poustawiać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
poustawiać: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
poustawiać się: perf: subj{np(str)} + {prepnp(w,loc)}
poustawiać się: perf: subj{np(str)} + {xp(locat)}
powalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
powalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
powalać się: imperf: subj{np(str)} + {prepnp(na,acc)}
powalać się: imperf: subj{np(str)} + {xp(mod)}
powalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
powalić się: perf: subj{np(str)} + {prepnp(na,acc)}
powalić się: perf: subj{np(str)} + {xp(adl)}
poważyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str)}
poważyć się: perf: subj,controller{np(str)} + controllee{infp(_)}
poważyć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
powąchać: perf: subj{np(str)} + {lexnp(str,pl,'kwiatek',natr)} + {preplexnp(od,gen,sg,'spód',natr)}
powąchać: perf: subj{np(str)} + obj{np(str); cp(int)} + {np(dat)}
powąchać: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
powątpiewać: imperf: subj{np(str)} + {cp(int)}
powątpiewać: imperf: subj{np(str)} + {cp(że)}
powątpiewać: imperf: subj{np(str)} + {or}
powątpiewać: imperf: subj{np(str)} + {prepnp(w,acc); prepncp(w,acc,int); prepncp(w,acc,że)}
powędrować: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
powędrować: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
powędrować: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
powędrować: perf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
powędrować: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
powędrować: perf: subj{np(str)} + {prepnp(za,inst)} + {xp(adl)}
powędrować: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
powiać: perf: {np(dat)} + {np(inst)} + {prepnp(na,acc)}
powiać: perf: {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
powiać: perf: {np(inst)} + {xp(locat)}
powiać: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
powiadać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {cp(że)}
powiadać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {cp(żeby)}
powiadać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {np(str)} + {or}
powiadać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(do,gen)} + {or}
powiadamiać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
powiadamiać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
powiadamiać: imperf: subj{np(str)} + obj{np(str)} + {or}
powiadamiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
powiadomić: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
powiadomić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
powiadomić: perf: subj{np(str)} + obj{np(str)} + {or}
powiadomić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
powiązać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
powiązać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
powiązać się: perf: subj{np(str)} + {prepnp(z,inst)}
powić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
powiedzieć: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{np(nom)}
powiedzieć: imperf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)} + {cp(że)}
powiedzieć: imperf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)} + {or}
powiedzieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {cp(że)}
powiedzieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {ncp(str,że)}
powiedzieć: imperf: subj{np(str)} + obj{cp(int)} + {prepnp(do,gen)}
powiedzieć: imperf: subj{np(str)} + obj{cp(żeby)} + {prepnp(do,gen)}
powiedzieć: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(do,gen)} + {prepnp(o,loc)}
powiedzieć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {comprepnp(na temat)}
powiedzieć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
powiedzieć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {comprepnp(na temat)}
powiedzieć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)}
powiedzieć: imperf: subj{np(str)} + obj{or} + {np(dat)} + {prepnp(o,loc)}
powiedzieć: imperf: subj{np(str)} + obj{or} + {prepnp(do,gen)} + {comprepnp(na temat)}
powiedzieć: imperf: subj{np(str)} + obj{or} + {prepnp(do,gen)} + {prepnp(o,loc)}
powiedzieć: imperf: subj{np(str)} + obj{prepnp(o,loc); cp(int); cp(że); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {np(dat)}
powiedzieć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepncp(o,loc,że)}
powielać: imperf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(inst)}
powielać się: imperf: subj{np(str)}
powielić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
powierzać: imperf: subj{np(str)} + {np(dat)} + {refl}
powierzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
powierzać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,pl,'ręka',ratr)}
powierzać: imperf: subj{np(str)} + {preplexnp(w,acc,pl,'ręka',ratr)} + {refl}
powierzyć: perf: subj{np(str)} + {np(dat)} + {refl}
powierzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
powierzyć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,pl,'ręka',ratr)}
powierzyć: perf: subj{np(str)} + {preplexnp(w,acc,pl,'ręka',ratr)} + {refl}
powiesić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
powiesić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
powiesić: perf: subj{np(str)} + {prepnp(na,loc)} + {refl}
powieść: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
powieść: perf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
powieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
powieść: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
powieść się: perf: controller{np(dat)} + controllee{xp(mod)} + {prepnp(w,loc)}
powieść się: perf: subj,controllee{infp(perf)} + controller{np(dat)}
powieść się: perf: subj{np(str)} + {np(dat)}
powiewać: imperf: {np(inst)} + {xp(locat)}
powiewać: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
powiewać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
powiewać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
powiewać: imperf: subj{np(str)} + {xp(locat)}
powiewać: imperf: {xp(abl)} + {xp(adl)} + {xp(perl)}
powiększać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
powiększać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
powiększać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
powiększyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
powiększyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
powiększyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
powinien: imperf: subj,controller{E} + controllee{infp(_)}
powitać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
powitać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
powitać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
powitać się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
powlec: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
powlec: perf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
powlec: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
powlec: perf: subj{np(str)} + obj{np(str)} + {xp(adl)} + {xp(perl)}
powlec się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
powlec się: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
powodować: imperf: subj{ncp(str,że)} + obj{np(str)}
powodować: imperf: subj{np(str)} + {cp(że)}
powodować: imperf: subj{np(str)} + {ncp(str,że)}
powodować: imperf: subj{np(str)} + {np(inst)}
powodować: imperf: subj{np(str)} + obj{np(str)}
powodować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(w,loc)}
powołać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
powołać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
powołać się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
powoływać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
powoływać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
powoływać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
powracać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
powracać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)}
powracać: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
powrócić: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
powrócić: perf: subj{np(str)} + {np(inst)} + {xp(abl)}
powrócić: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
powrócić: perf: subj{np(str)} + {prepnp(w,loc)} + {xp(abl)}
powstać: perf: subj{np(str)} + {np(dat)}
powstać: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
powstać: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
powstać: perf: subj{np(str)} + {prepnp(przeciw,dat)}
powstać: perf: subj{np(str)} + {prepnp(z,gen)}
powstawać: imperf: subj{np(str)} + {np(dat)}
powstawać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
powstawać: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
powstawać: imperf: subj{np(str)} + {prepnp(z,gen)}
powstawać: perf: subj{np(str)} + {prepnp(z,gen)}
powstrzymać: perf: subj{ncp(str,że)} + obj{np(str)}
powstrzymać: perf: subj{np(str)} + {cp(żeby)} + {refl}
powstrzymać: perf: subj{np(str)} + {np(inst)}
powstrzymać: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
powstrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
powstrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
powstrzymać: perf: subj{np(str)} + {or}
powstrzymać: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
powstrzymać: perf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
powstrzymywać: imperf: subj{np(str)} + {np(inst)}
powstrzymywać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
powstrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
powstrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
powstrzymywać: imperf: subj{np(str)} + {prepnp(od,gen)}
powstrzymywać: imperf: subj{np(str)} + {prepnp(przed,inst)}
powstrzymywać się: imperf: subj{np(str)} + {cp(żeby)}
powstydzić się: perf: subj,controller{np(str)} + controllee{infp(_)}
powstydzić się: perf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)} + {prepnp(przed,inst)}
powstydzić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
powstydzić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
powtarzać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
powtarzać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
powtarzać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
powtarzać: imperf: subj{np(str)} + {np(dat)} + {or}
powtarzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
powtarzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
powtarzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
powtarzać się: imperf: subj{np(str)}
powtórzyć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
powtórzyć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
powtórzyć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
powtórzyć: perf: subj{np(str)} + {np(dat)} + {or}
powtórzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
powtórzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
powtórzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
powtórzyć się: perf: subj{np(str)}
powziąć: perf: subj{np(str)} + obj{np(str)}
pozabijać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pozabijać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pozabijać się: perf: subj{np(str)} + {prepnp(o,acc)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(przed,inst,sg,'nos',natr)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
pozamykać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pozamykać: perf: subj{np(str)} + {prepnp(na,acc)} + {refl}
pozamykać: perf: subj{np(str)} + {xp(locat)} + {refl}
pozamykać się: perf: subj{np(str)} + {np(dat)}
pozamykać się: perf: subj{np(str)} + {preplexnp(przed,inst,_,'nos',ratr)}
pozamykać się: perf: subj{np(str)} + {prepnp(dla,gen)}
pozamykać się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(w,loc)}
pozamykać się: perf: subj{np(str)} + {prepnp(za,inst)}
pozazdrościć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
pozazdrościć: perf: subj{np(str)} + {np(dat)} + {np(gen); ncp(gen,int); ncp(gen,że)}
pozbawiać: imperf: subj{np(str)} + {np(gen)} + {refl}
pozbawiać: imperf: subj{np(str)} + obj{np(str)} + {np(gen)}
pozbawić: perf: subj{np(str)} + {np(gen)} + {refl}
pozbawić: perf: subj{np(str)} + obj{np(str)} + {np(gen)}
pozbawić się: perf: subj{np(str)} + {np(gen)}
pozbierać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
pozbierać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
pozbierać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
pozbierać się: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,jak)} + {advp(misc)}
pozbierać się: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,jak)} + {preplexnp(do,gen,sg,'kupa',natr)}
pozbierać się: perf: subj{np(str)} + {prepnp(w,acc)}
pozbyć się: perf: subj{np(str)} + {np(gen)} + {xp(abl)}
pozbywać się: imperf: subj{np(str)} + {np(gen)} + {xp(abl)}
pozdrawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
pozdrawiać: imperf: subj{np(str)} + obj{np(str)} + {or}
pozdrawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
pozdrawiać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
pozdrowić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
pozdrowić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pozdrowić: perf: subj{np(str)} + obj{np(str)} + {or}
pozdrowić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
pozdrowić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
pozdrowić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
pozmieniać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)}
pozmieniać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)}
pozmieniać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
pozmieniać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pozmieniać: perf: subj{np(str)} + {xp(locat)}
pozmieniać się: perf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + {prepadjp(z,gen)}
pozmieniać się: perf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + {prepadjp(z,gen)}
pozmieniać się: perf: subj{np(str)} + {np(dat)}
pozmieniać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
pozmieniać się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
pozmieniać się: perf: subj{np(str)} + {xp(locat)}
pozmieniać się: perf: subj{np(str)} + {xp(mod)}
poznać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
poznać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
poznać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
poznać: perf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
poznać: perf: subj{np(str)} + {prepnp(po,loc)} + {cp(że)}
poznać się: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
poznać się: perf: subj{np(str)} + {prepnp(z,inst)}
poznawać: imperf: subj{np(str)} + {cp(jeśli)}
poznawać: imperf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
poznawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
poznawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
poznawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
poznawać: imperf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
poznawać: imperf: subj{np(str)} + {prepnp(po,loc)} + {cp(że)}
poznawać się: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
poznawać się: imperf: subj{np(str)} + {prepnp(z,inst)}
pozorować: imperf: subj{np(str)} + obj{cp(że)}
pozorować: imperf: subj{np(str)} + obj{np(str)}
pozostać: perf: controller{np(dat)} + controllee{infp(_)}
pozostać: perf: subj,controller{np(str)} + controllee{adjp(pred)}
pozostać: perf: subj,controller{np(str)} + controllee{np(inst)}
pozostać: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
pozostać: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
pozostać: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {prepnp(z,gen)}
pozostać: perf: subj{np(str)} + {prepnp(bez,gen)}
pozostać: perf: subj{np(str)} + {prepnp(między,inst)}
pozostać: perf: subj{np(str)} + {prepnp(na,loc)}
pozostać: perf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,że)}
pozostać: perf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
pozostawać: imperf: subj,controllee{infp(_)} + controller{np(dat)}
pozostawać: imperf: subj,controller{np(str)} + controllee{adjp(pred)}
pozostawać: imperf: subj,controller{np(str)} + controllee{np(inst)}
pozostawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
pozostawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {prepnp(z,gen)}
pozostawać: imperf: subj{np(str)} + {prepnp(bez,gen)}
pozostawać: imperf: subj{np(str)} + {prepnp(między,inst)}
pozostawać: imperf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,że)}
pozostawać: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
pozostawać: imperf: subj{np(str)} + {prepnp(za,inst)} + {preplexnp(w,loc,sg,'tył',natr)}
pozostawać: imperf: subj{np(str)} + {prepnp(za,inst)} + {preplexnp(z,gen,sg,'tył',natr)}
pozostawać: perf: subj,controller{np(str)} + controllee{np(inst)}
pozostawiać: imperf: subj{np(str)} + {np(str)} + {preplexnp(za,inst,_,'siebie',natr)}
pozostawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
pozostawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
pozostawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(bez,gen,sg,'komentarz',atr)}
pozostawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,sg,'lód',natr)}
pozostawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(przy,loc,sg,'życie',natr)}
pozostawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,loc,sg,'spokój',natr)}
pozostawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {xp(locat)}
pozostawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {prepnp(w,loc)}
pozostawiać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
pozostawić: perf: subj{np(str)} + {np(str)} + {preplexnp(za,inst,_,'siebie',natr)}
pozostawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
pozostawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
pozostawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(bez,gen,sg,'komentarz',atr)}
pozostawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,sg,'lód',natr)}
pozostawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(przy,loc,sg,'życie',natr)}
pozostawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,loc,sg,'spokój',natr)}
pozostawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {xp(locat)}
pozostawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {prepnp(w,loc)}
pozować: imperf: subj,controller{np(str)} + controllee{prepadjp(na,acc)}
pozować: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
pozować: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
pozwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pozwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,acc)}
pozwalać: imperf: subj{np(str)} + controller{np(dat)} + controllee{prepnp(na,acc); cp(żeby); prepncp(na,acc,że); prepncp(na,acc,żeby); infp(_)}
pozwalać: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
pozwalać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
pozwalać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
pozwolić: perf: subj{np(str)} + controller{np(dat)} + controllee{prepnp(na,acc); cp(żeby); prepncp(na,acc,że); prepncp(na,acc,żeby); infp(_)}
pozwolić: perf: subj{np(str)} + {cp(że)}
pozwolić: perf: subj{np(str)} + {np(dat)} + {advp(misc)}
pozwolić: perf: subj{np(str)} + {np(gen)}
pozwolić: perf: subj{np(str)} + obj{np(str)}
pozwolić: perf: subj{np(str)} + {prepnp(do,gen)}
pozwolić: perf: subj{np(str)} + {prepnp(z,inst)}
pozyskać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
pozyskać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pozyskać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
pozyskiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
pozyskiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
pozyskiwać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
pożalić się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
pożalić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,że)}
pożałować: perf: subj{np(str)} + {np(dat)} + {np(gen)} + {prepnp(na,acc)}
pożałować: perf: subj{np(str)} + {np(gen); cp(że); ncp(gen,że)}
pożałować: perf: subj{np(str)} + {np(gen)} + {or}
pożądać: imperf: subj{np(str)} + obj{np(gen)}
pożegnać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
pożegnać się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
pożerać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pożółknąć: perf: subj,controller{np(str)} + controllee{xp(mod)}
pożółknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
pożreć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
pożreć się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {prepnp(z,inst)}
pożyczać: imperf: subj{np(str)} + {np(part)} + {prepnp(od,gen)} + {lexnp(dat,_,'siebie',natr)}
pożyczać: imperf: subj{np(str)} + {np(part)} + {prepnp(z,gen)} + {lexnp(dat,_,'siebie',natr)}
pożyczać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)}
pożyczać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(od,gen)}
pożyczać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(u,gen)}
pożyczać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(z,gen)}
pożyczyć: perf: subj{np(str)} + {np(dat)} + {np(gen)}
pożyczyć: perf: subj{np(str)} + {np(dat)} + {or}
pożyczyć: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
pożyczyć: perf: subj{np(str)} + obj{np(part)} + {prepnp(od,gen)}
pożyczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pożyczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {lexnp(dat,_,'siebie',natr)}
pożyczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
pożyczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {lexnp(dat,_,'siebie',natr)}
pójść: perf: controller{np(dat)} + controllee{xp(mod)}
pójść: perf: {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr); preplexnp(w,acc,pl,'noga',natr)}
pójść: perf: {np(dat)} + {preplexnp(w,acc,pl,'pięta',natr)}
pójść: perf: {np(dat)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
pójść: perf: subj,controller{np(str)} + controllee{infp(_)} + {xp(adl)}
pójść: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
pójść: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
pójść: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'ręka',natr)}
pójść: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'zdrowie',natr)}
pójść: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,acc,pl,'noga',natr)}
pójść: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,acc,pl,'pięta',natr)}
pójść: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
pójść: perf: subj{np(str)} + {preplexnp(w,acc,pl,'ślad',ratr)}
pójść: perf: subj{np(str)} + {preplexnp(z,inst,pl,'torba',natr)}
pójść: perf: subj{np(str)} + {preplexnp(z,inst,sg,'dym',natr)}
pójść: perf: subj{np(str)} + {prepnp(do,gen)}
pójść: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
pójść: perf: subj{np(str)} + {prepnp(po,acc)}
pójść: perf: subj{np(str)} + {prepnp(w,acc)}
pójść: perf: subj{np(str)} + {prepnp(za,acc)}
pójść: perf: subj{np(str)} + {prepnp(za,inst)}
pójść: perf: subj{np(str)} + {prepnp(za,inst)} + {preplexnp(w,acc,sg,'ogień',natr)}
pójść: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)} + {preplexnp(o,acc,sg,'zakład',natr)}
pójść: perf: subj{np(str)} + {prepnp(z,inst)} + {fixed('na udry')}
pójść: perf: subj{np(str)} + {prepnp(z,inst)} + {preplexnp(do,gen,sg,'łóżka',natr)}
pójść: perf: subj{np(str)} + {xp(adl)}
pójść: perf: subj{np(str)} + {xp(perl)}
pracować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
pracować: imperf: subj,controller{np(str)} + controllee{xp(mod)}
pracować: imperf: subj{np(str)} + {comprepnp(na rzecz)}
pracować: imperf: subj{np(str)} + {prepnp(dla,gen)}
pracować: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
pracować: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,że); prepncp(nad,inst,żeby)}
pracować: imperf: subj{np(str)} + {prepnp(na,loc)}
pracować: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
pracować: imperf: subj{np(str)} + {prepnp(przy,loc)}
pracować: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
prać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
prać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
prać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
prać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
prać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
prać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
prać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
prać się: imperf: subj{np(str)}
pragnąć: imperf: subj,controller{np(str)} + controllee{cp(żeby); infp(_)}
pragnąć: imperf: subj{np(str)} + {np(gen); ncp(gen,żeby)}
praktykować: imperf: subj{np(str)} + obj{np(str); ncp(str,że); ncp(str,żeby)}
praktykować: imperf: subj{np(str)} + {prepnp(u,gen)}
praktykować: imperf: subj{np(str)} + {prepnp(w,loc)}
praktykować: imperf: subj{np(str)} + {xp(locat)}
prasować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
prawić: imperf: subj,controller{np(str)} + controllee{xp(mod)}
prawić: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
prawić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
prawić: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
prawić: imperf: subj{np(str)} + {np(dat)} + {or}
prawić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)} + {nonch}
prawić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
prażyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
prażyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
prażyć: imperf: subj{np(str)} + {prepnp(nad,inst)}
prażyć się: imperf: subj{np(str)} + {prepnp(na,loc)}
prażyć się: imperf: subj{np(str)} + {prepnp(w,loc)}
precyzować: imperf: subj{np(str)} + obj{cp(int)}
precyzować: imperf: subj{np(str)} + obj{cp(że)}
precyzować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
precyzować: imperf: subj{np(str)} + {or}
precyzować się: imperf: subj{np(str)}
predestynować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
predestynować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
predestynować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
preferować: imperf: subj{np(str)} + obj{np(str)}
premiować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
prenumerować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
prenumerować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
preparować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
preparować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
preparować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
preparować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
preparować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
pretendować: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
prezentować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
prezentować się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
prezentować się: imperf: subj{np(str)} + {prepnp(w,loc)}
prężyć: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
prężyć się: imperf: subj{np(str)} + {xp(mod)} + {or}
procentować: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
procentować: imperf: subj{np(str)} + {prepnp(w,loc)}
procentować: imperf: subj{np(str)} + {prepnp(z,inst)}
procentować: imperf: subj{np(str)} + {xp(locat)}
procentować: imperf: subj{np(str)} + {xp(mod)}
procesować się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {prepnp(z,inst)}
procesować się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
procesować się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
produkować: imperf: subj{np(str)} + obj{np(str)}
produkować się: imperf: subj{np(str)} + {comprepnp(na temat)}
produkować się: imperf: subj{np(str)} + {or}
produkować się: imperf: subj{np(str)} + {xp(locat)}
prognozować: imperf: subj{np(str)} + obj{cp(int)}
prognozować: imperf: subj{np(str)} + obj{cp(że)}
prognozować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
programować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
programować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
programować: imperf: subj{np(str)} + {prepnp(na,inst)}
programować: imperf: subj{np(str)} + {prepnp(w,loc)}
projektować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
proklamować: _: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
proklamować: _: subj{np(str)} + obj{np(str)} + {np(inst)}
promieniować: imperf: subj{np(str)} + {np(inst)}
promieniować: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
promieniować: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(abl)}
promieniować: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
promieniować: imperf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)}
promieniować: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
promować: imperf: subj{np(str)} + {np(inst)} + {refl}
promować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
promować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
promować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
promować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
promować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
propagować: imperf: subj{np(str)} + obj{np(str)}
proponować: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
proponować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
proponować: imperf: subj{np(str)} + {np(dat)} + {or}
proponować: imperf: subj{np(str)} + obj{np(str); cp(że); cp(żeby); ncp(str,żeby)} + {np(dat)}
proponować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
proponować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
prorokować: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {xp(mod)}
prorokować: imperf: subj{np(str); ncp(str,że)} + {prepnp(na,acc)} + {xp(mod)}
prorokować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
prorokować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
prorokować: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
prorokować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
prorokować: imperf: subj{np(str)} + {or}
prorokować: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
prosić: imperf: {np(gen)}
prosić: imperf: subj,controller{np(str)} + controllee{infp(_)}
prosić: imperf: subj{np(str)} + obj{np(str)} + {or}
prosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
prosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
prosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepnp(za,acc); cp(żeby); prepncp(o,acc,żeby)}
prosić się: imperf: subj{np(str)} + {cp(żeby)}
prosić się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
prosperować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {advp(misc)}
prosperować: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
prostować: imperf: subj{np(str)} + {cp(że)}
prostować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
prostować: imperf: subj{np(str)} + obj{np(str)} + {or}
prostować się: imperf: subj{np(str)} + {np(dat)}
protestować: imperf: subj{np(str)} + {cp(że)}
protestować: imperf: subj{np(str)} + {cp(żeby)}
protestować: imperf: subj{np(str)} + {or}
protestować: imperf: subj{np(str)} + {prepncp(przeciw,dat,jakoby)}
protestować: imperf: subj{np(str)} + {prepncp(przeciw,dat,żeby)}
protestować: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,int); prepncp(przeciw,dat,że)}
prowadzić: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
prowadzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
prowadzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
prowadzić: imperf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
prowadzić: imperf: subj{np(str)} + {np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
prowadzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
prowadzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
prowadzić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,sg,'sznurek',natr)}
prowadzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
prowadzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
prowadzić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
prowadzić: imperf: subj{np(str)} + {prepnp(przed,inst)}
prowadzić: imperf: subj{np(str)} + {prepnp(w,loc)}
prowadzić: imperf: subj{np(str)} + {prepnp(z,inst)}
prowadzić się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
prowokować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
prowokować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {cp(żeby)}
próbować: imperf: subj,controller{np(str)} + controllee{infp(_)}
próbować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {lexnp(gen,pl,'siła',batr)}
próbować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {lexnp(gen,pl,'szczęście',atr)}
próbować: imperf: subj{np(str)} + {cp(czy)}
próbować: imperf: subj{np(str)} + {np(gen)}
próbować: imperf: subj{np(str)} + obj{np(str)}
próbować: imperf: subj{np(str)} + {prepnp(w,loc)} + {lexnp(gen,pl,'siła',batr)}
próbować: imperf: subj{np(str)} + {prepnp(w,loc)} + {lexnp(gen,sg,'szczęście',atr)}
próbować: imperf: subj{np(str)} + {xp(locat)} + {lexnp(gen,pl,'siła',batr)}
próbować: imperf: subj{np(str)} + {xp(locat)} + {lexnp(gen,sg,'szczęście',atr)}
próbować się: imperf: subj{np(str)} + {prepnp(z,inst)}
próżnować: imperf: subj{np(str)}
pruć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
pruć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {cp(żeby); prepncp(po,acc,żeby)}
pruć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(mod)}
pruć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
pruć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)} + {xp(locat)}
pruć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)} + {xp(locat)}
pruć: imperf: subj{np(str)} + {prepnp(po,loc)} + {prepnp(z,gen)}
pruć: imperf: subj{np(str)} + {prepnp(za,inst)}
pruć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
pruć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
pruć się: imperf: subj{np(str)} + {prepnp(do,gen)}
pruć się: imperf: subj{np(str)} + {xp(mod)}
prychnąć: perf: subj{np(str)} + {cp(że)}
prychnąć: perf: subj{np(str)} + {np(inst)}
prychnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
pryskać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
pryskać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
pryskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
prysnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
prysnąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
prysnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
prząść: imperf: controller{np(str)} + controllee{xp(mod)}
prząść: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str)}
przeanalizować: perf: subj{np(str)} + obj{cp(int)}
przeanalizować: perf: subj{np(str)} + obj{np(str); ncp(str,int)}
przebaczać: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
przebaczać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
przebaczać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
przebaczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
przebaczyć: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
przebaczyć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
przebadać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przebadać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
przebadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przebadać się: perf: subj{np(str)} + {prepnp(na,acc)}
przebadać się: perf: subj{np(str)} + {prepnp(u,gen)}
przebadać się: perf: subj{np(str)} + {xp(locat)}
przebąkiwać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); cp(int); cp(że); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {nonch}
przebąkiwać: imperf: subj{np(str)} + {or}
przebić: perf: subj{np(str)} + {np(inst)} + {refl}
przebić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + {np(inst)}
przebić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przebić się: perf: subj{np(str)} + {np(inst)} + {prepnp(przez,acc)}
przebić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
przebić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przebiec: perf: subj,controller{np(str)} + controllee{xp(mod)}
przebiec: perf: subj{cp(że)} + {np(dat)} + {prepnp(przez,acc)}
przebiec: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
przebiec: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)} + {or}
przebiec: perf: subj{np(str)} + {np(inst)} + {cp(int)}
przebiec: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
przebiec: perf: subj{np(str)} + {np(inst)} + {prepnp(przez,acc)}
przebiec: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przebiec: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przebiec: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przebiec się: perf: subj{np(str)} + {prepnp(po,loc)}
przebiec się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przebiegać: imperf: subj,controller{np(str)} + controllee{xp(mod)}
przebiegać: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
przebiegać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
przebiegać: imperf: subj{np(str)} + {np(str)} + {prepnp(po,loc)}
przebiegać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przebiegać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przebiegać: imperf: subj{np(str)} + {prepnp(przez,acc)}
przebiegać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przebiegać: imperf: subj{np(str)} + {xp(perl)}
przebiegać: perf: subj{np(str)} + obj{np(str)}
przebiegać się: imperf: subj{np(str)} + {prepnp(po,loc)}
przebierać: imperf: subj{np(str)} + {np(inst)}
przebierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przebierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
przebierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przebierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przebierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
przebierać: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'noga',natr)} + {preplexnp(z,gen,sg,'noga',natr)}
przebierać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
przebierać: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)} + {refl}
przebierać: imperf: subj{np(str)} + {prepnp(w,loc)}
przebierać: imperf: subj{np(str)} + {prepnp(wśród,gen)}
przebierać: imperf: subj{np(str)} + {prepnp(za,acc)} + {refl}
przebijać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,gen)}
przebijać: imperf: subj{np(str)} + {np(inst)} + {refl}
przebijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przebijać: imperf: subj{np(str)} + {prepnp(przez,acc)}
przebijać: imperf: subj{np(str)} + {prepnp(w,loc)}
przebijać: imperf: subj{np(str)} + {xp(abl)}
przebijać się: imperf: subj{np(str); ncp(str,że)} + {prepnp(w,loc)}
przebijać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przez,acc)}
przebijać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
przebijać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przeboleć: perf: subj{np(str)} + {cp(int)}
przeboleć: perf: subj{np(str)} + {cp(że)}
przeboleć: perf: subj{np(str)} + {np(str); ncp(str,int); ncp(str,że)}
przebrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przebrać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
przebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
przebrać: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
przebrać: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)} + {refl}
przebrać: perf: subj{np(str)} + {prepnp(za,acc)} + {refl}
przebrnąć: perf: subj{np(str)} + {np(str)}
przebrnąć: perf: subj{np(str)} + {prepnp(przez,acc); prepncp(przez,acc,int)}
przebrnąć: perf: subj{np(str)} + {prepnp(przez,acc)} + {xp(adl)}
przebudować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + {np(dat)} + {prepadjp(z,gen)}
przebudować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + {np(dat)} + {prepadjp(z,gen)}
przebudować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przebudować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przebudować się: perf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + {np(dat)} + {prepadjp(z,gen)}
przebudować się: perf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + {np(dat)} + {prepadjp(z,gen)}
przebudować się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przebudować się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przebudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przebudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
przebudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
przebudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
przebudzić się: perf: subj{np(str)} + {prepnp(do,gen)}
przebudzić się: perf: subj{np(str)} + {prepnp(na,acc)}
przebudzić się: perf: subj{np(str)} + {prepnp(od,gen)}
przebudzić się: perf: subj{np(str)} + {prepnp(u,gen)}
przebudzić się: perf: subj{np(str)} + {prepnp(w,loc)}
przebudzić się: perf: subj{np(str)} + {prepnp(z,gen)}
przebyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przebyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(dur)} + {xp(locat)}
przebywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przebywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(dur)} + {xp(locat)}
przeceniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przeceniać: imperf: subj{np(str)} + {refl}
przecenić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
przecenić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc)}
przecenić: perf: subj{np(str)} + {refl}
przecenić się: perf: subj{np(str)}
przechadzać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {prepnp(z,inst)}
przechadzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przechodzić: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(przez,acc,sg,'myśl',natr)}
przechodzić: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(przez,acc,sg,'myśl',natr)}
przechodzić: imperf: subj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(przez,acc,sg,'myśl',natr)}
przechodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(koło,gen)}
przechodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(między,inst)}
przechodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
przechodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przechodzić: imperf: subj{np(str)} + {np(inst)}
przechodzić: imperf: subj{np(str)} + obj{np(str)}
przechodzić: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że)} + {prepnp(od,gen)}
przechodzić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przechodzić: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przechodzić: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(w,acc)}
przechodzić: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przechodzić: perf: subj{np(str)} + obj{np(str)}
przechować: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
przechować: perf: subj{np(str)} + obj{np(str)} + {xp(dur)}
przechować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przechować się: perf: subj{np(str)} + {prepnp(u,gen)}
przechować się: perf: subj{np(str)} + {xp(locat)}
przechowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
przechowywać: imperf: subj{np(str)} + obj{np(str)} + {xp(dur)}
przechowywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przechowywać się: imperf: subj{np(str)} + {prepnp(u,gen)}
przechowywać się: imperf: subj{np(str)} + {xp(locat)}
przechwalać się: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
przechwalać się: imperf: subj{np(str)} + {np(dat)} + {cp(jak)}
przechwalać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przechwalać się: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
przechwalać się: imperf: subj{np(str)} + {np(dat)} + {or}
przechwalać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)} + {prepnp(przed,inst)}
przechwalać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
przechwalać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(jak)}
przechwalać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
przechwalać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
przechwycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przechwycić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
przechwytywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przechwytywać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
przechylać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przechylać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
przechylać się: imperf: subj{np(str)} + {prepnp(przez,acc)}
przechylać się: imperf: subj{np(str)} + {xp(adl)}
przechylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przechylić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
przechylić się: perf: subj{np(str)} + {prepnp(przez,acc)}
przechylić się: perf: subj{np(str)} + {xp(adl)}
przechytrzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przechytrzyć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',natr)}
przeciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
przeciąć się: perf: subj{np(str)} + {prepnp(z,inst)}
przeciągać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
przeciągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przeciągać: imperf: subj{np(str)} + obj{np(str)} + {xp(dur)}
przeciągać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przeciągać: imperf: subj{np(str)} + {xp(perl)}
przeciągać się: imperf: subj{np(str)} + {xp(dur)}
przeciągnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
przeciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przeciągnąć: perf: subj{np(str)} + obj{np(str)} + {xp(dur)}
przeciągnąć: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przeciągnąć: perf: subj{np(str)} + {xp(perl)}
przeciągnąć się: perf: subj{np(str)} + {xp(dur)}
przeciekać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przeciekać: imperf: subj{np(str)} + {xp(mod)}
przecierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przecierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przecierać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)} + {xp(locat)}
przecierać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)} + {xp(locat)}
przecierać się: imperf: subj{np(str)} + {prepnp(po,loc)}
przecierać się: imperf: subj{np(str)} + {prepnp(z,gen)}
przecierać się: imperf: subj{np(str)} + {prepnp(z,inst)}
przecierać się: imperf: {xp(locat)}
przecinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
przecinać się: imperf: subj{np(str)} + {prepnp(z,inst)}
przeciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przeciskać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przeciskać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przeciskać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przecisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przecisnąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przecisnąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przecisnąć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przeciwdziałać: imperf: subj{np(str)} + {np(dat); ncp(dat,że); ncp(dat,żeby)} + {np(inst)}
przeciwstawiać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
przeciwstawiać się: imperf: subj{np(str)} + {np(dat); ncp(dat,że); ncp(dat,żeby)} + {np(inst)}
przeciwstawić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
przeciwstawić się: perf: subj{np(str)} + {np(dat); ncp(dat,że); ncp(dat,żeby)} + {np(inst)}
przeczekać: perf: subj{np(str)} + {cp(aż)}
przeczekać: perf: subj{np(str)} + obj{np(str)}
przeczekać: perf: subj{np(str)} + {prepnp(do,gen)}
przeczesać: perf: subj{np(str)} + {np(inst)} + {refl}
przeczesać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przeczesywać: imperf: subj{np(str)} + {np(inst)} + {refl}
przeczesywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przeczesywać się: imperf: subj{np(str)} + {xp(perl)}
przeczuć: perf: subj{np(str)} + {cp(int)}
przeczuć: perf: subj{np(str)} + {cp(że)}
przeczuć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
przeczuwać: imperf: subj{np(str)} + {cp(int)}
przeczuwać: imperf: subj{np(str)} + {cp(że)}
przeczuwać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
przeczyć: imperf: subj{np(str)} + {cp(jakoby)}
przeczyć: imperf: subj{np(str)} + {cp(że)}
przeczyć: imperf: subj{np(str)} + {ncp(dat,jakoby)}
przeczyć: imperf: subj{np(str)} + {ncp(dat,że)}
przeczyć: imperf: subj{np(str)} + {ncp(dat,żeby)}
przeczyć: imperf: subj{np(str)} + {np(dat)}
przeczytać: perf: subj{np(str)} + {cp(żeby)}
przeczytać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
przeczytać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przeczytać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
przeczytać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
przeczytać: perf: subj{np(str)} + {prepnp(o,loc)} + {cp(int)}
przeczytać: perf: subj{np(str)} + {prepnp(o,loc)} + {cp(że)}
przeczytać: perf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(w,loc)}
przeczytać: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
przeczytać: perf: subj{np(str)} + {prepnp(z,gen)}
przeć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przeć: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przeć: imperf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
przeć: imperf: subj{np(str)} + {prepnp(na,acc)}
przeć: imperf: subj{np(str)} + {xp(adl)}
przećwiczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przećwiczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przećwiczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
przećwiczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
przećwiczyć się: perf: subj{np(str)} + {prepncp(w,loc,żeby)}
przećwiczyć się: perf: subj{np(str)} + {prepnp(w,loc)}
przedkładać: imperf: subj{np(str)} + {cp(że); cp(żeby)}
przedkładać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
przedkładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przedkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,acc)}
przedkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ponad,acc)}
przedkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,acc)}
przedłożyć: perf: subj{np(str)} + {cp(że); cp(żeby)}
przedłożyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
przedłożyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
przedłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przedłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,acc)}
przedłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(ponad,acc)}
przedłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,acc)}
przedłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
przedłużać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
przedłużać się: imperf: subj{np(str)} + {prepnp(o,acc)}
przedłużyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
przedłużyć się: perf: subj{np(str)} + {prepnp(o,acc)}
przedostać się: perf: subj{cp(że)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przedostać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przedostawać się: imperf: subj{cp(że)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przedostawać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przedrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przedrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przedrzeć się: perf: subj{np(str)} + {prepnp(przez,acc)}
przedrzeć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przedrzeźniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {or}
przedrzeźniać się: imperf: subj{np(str)} + {prepnp(z,inst)}
przedsiębrać: imperf: subj{np(str)} + {infp(_)}
przedsiębrać: imperf: subj{np(str)} + obj{np(str)}
przedstawiać: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)} + {refl}
przedstawiać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {refl}
przedstawiać: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {refl}
przedstawiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
przedstawiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
przedstawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przedstawiać się: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
przedstawiać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
przedstawiać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
przedstawiać się: imperf: subj{cp(że)} + {np(dat)}
przedstawiać się: imperf: subj{np(str)} + {lexnp(dat,pl,'oko',atr)}
przedstawiać się: imperf: subj{np(str)} + {np(dat)}
przedstawić: perf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)} + {refl}
przedstawić: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {refl}
przedstawić: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {refl}
przedstawić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
przedstawić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
przedstawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przedstawić się: perf: subj,controller{np(str)} + controllee{np(inst)} + {np(dat)}
przedstawić się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
przedstawić się: perf: subj,controller{np(str)} + controllee{xp(mod)}
przedstawić się: perf: subj{cp(że)} + {np(dat)}
przedstawić się: perf: subj{np(str)} + {lexnp(dat,pl,'oko',atr)}
przedstawić się: perf: subj{np(str)} + {np(dat)}
przedzierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przedzierać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przedzierać się: imperf: subj{np(str)} + {prepnp(przez,acc)}
przedzierać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przegadać: perf: subj{np(str)} + obj{np(str)}
przegadać: perf: subj{np(str)} + {xp(dur)}
przegapić: perf: subj{np(str)} + {cp(jak)}
przegapić: perf: subj{np(str)} + {cp(kiedy)}
przegapić: perf: subj{np(str)} + {cp(że)}
przegapić: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
przeglądać: imperf: subj{np(str)} + obj{np(str)}
przeglądać się: imperf: subj{np(str)} + {prepnp(w,loc)}
przegłosować: perf: subj{np(str)} + {np(inst)} + {cp(int)}
przegłosować: perf: subj{np(str)} + {np(inst)} + {cp(żeby)}
przegłosować: perf: subj{np(str)} + obj{cp(że)} + {np(inst)}
przegłosować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(inst)}
przegrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przegrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przegrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przegrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
przegrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
przegrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przegrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przegrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przegrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
przegrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
przegryźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przegryźć się: perf: subj{np(str)} + {prepnp(przez,acc)}
przegryźć się: perf: subj{np(str)} + {prepnp(z,inst)}
przeistaczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przeistaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeistaczać się: imperf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przeistaczać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeistoczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przeistoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeistoczyć się: perf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przeistoczyć się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przejawiać: imperf: subj{np(str)} + obj{np(str)}
przejawiać się: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)}
przejawiać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
przejawiać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
przejawiać się: imperf: subj{np(str)} + {np(inst); prepnp(w,loc); ncp(inst,int); ncp(inst,że); ncp(inst,żeby); prepncp(w,loc,int); prepncp(w,loc,że); prepncp(w,loc,żeby)}
przejąć: perf: subj{np(str)} + {np(inst)} + {np(str)}
przejąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(w,acc)}
przejąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {prepnp(w,acc)}
przejąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
przejąć się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przejechać: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przejechać: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
przejechać: perf: subj{np(str)} + {np(str)} + {xp(perl)}
przejechać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przejechać się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przejechać się: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
przejeżdżać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
przejeżdżać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przejeżdżać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
przejeżdżać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przejeżdżać: imperf: subj{np(str)} + {prepnp(przez,acc)}
przejeżdżać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przejeżdżać się: imperf: subj{np(str)} + {prepnp(na,loc)}
przejmować: imperf: subj{np(str)} + {np(inst)} + {np(str)}
przejmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(w,acc)}
przejmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {prepnp(w,acc)}
przejmować: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
przejmować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przejrzeć: perf: subj{np(str)} + {cp(int)} + {preplexnp(na,acc,pl,'oko',natr)}
przejrzeć: perf: subj{np(str)} + {cp(że)} + {preplexnp(na,acc,pl,'oko',natr)}
przejrzeć: perf: subj{np(str)} + obj{np(str)}
przejrzeć się: perf: subj{np(str)} + {prepnp(do,gen)}
przejrzeć się: perf: subj{np(str)} + {prepnp(w,loc)}
przejść: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(przez,acc,sg,'myśl',natr)}
przejść: perf: subj{cp(że)} + {np(dat)} + {preplexnp(przez,acc,sg,'myśl',natr)}
przejść: perf: subj{infp(_)} + {np(dat)} + {preplexnp(przez,acc,sg,'myśl',natr)}
przejść: perf: subj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(przez,acc,sg,'myśl',natr)}
przejść: perf: subj{np(str)} + {np(dat)} + {prepnp(koło,gen)}
przejść: perf: subj{np(str)} + {np(dat)} + {prepnp(między,inst)}
przejść: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
przejść: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przejść: perf: subj{np(str)} + {np(inst)}
przejść: perf: subj{np(str)} + {np(str)}
przejść: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że)} + {prepnp(od,gen)}
przejść: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przejść: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przejść: perf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(w,acc)}
przejść: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przejść się: perf: subj{np(str)} + {prepnp(do,gen)}
przejść się: perf: subj{np(str)} + {xp(adl)}
przejść się: perf: subj{np(str)} + {xp(perl)}
przekazać: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)} + {cp(że); cp(żeby)}
przekazać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(przez,acc)}
przekazać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(przez,acc)}
przekazywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)} + {cp(że); cp(żeby)}
przekazywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(przez,acc)}
przekazywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(przez,acc)}
przekląć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
przekląć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(że)}
przekląć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
przekląć: perf: subj{np(str)} + obj{np(str)} + {or}
przekląć: perf: subj{np(str)} + {prepnp(na,acc)}
przeklinać: imperf: subj{np(str)} + {np(inst)} + {cp(że)} + {refl}
przeklinać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc); prepncp(na,acc,że)}
przeklinać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
przeklinać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
przeklinać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(że)}
przeklinać: imperf: subj{np(str)} + obj{np(str)} + {or}
przekładać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przekładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przekładać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przekładać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przekładać się: imperf: subj{np(str)} + {prepnp(na,acc)}
przekomarzać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
przekomarzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
przekomarzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
przekomarzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
przekomarzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {or}
przekonać: perf: subj{np(str); cp(że); ncp(str,że)} + {np(str)}
przekonać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(co do,gen); prepncp(co do,gen,int); prepncp(co do,gen,że)}
przekonać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); cp(int); cp(że); cp(żeby); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przekonać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
przekonać się: perf: subj{np(str)} + {cp(int); cp(że)}
przekonać się: perf: subj{np(str)} + {cp(żeby)}
przekonać się: perf: subj{np(str)} + {prepnp(co do,gen); prepncp(co do,gen,że)}
przekonać się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przekonać się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
przekonywać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
przekonywać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przekonywać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(do,gen,żeby)}
przekonywać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(o,loc,żeby)}
przekonywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
przekonywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
przekonywać: imperf: subj{np(str)} + {or}
przekonywać się: imperf: subj{np(str)} + {cp(int)}
przekonywać się: imperf: subj{np(str)} + {cp(że)}
przekonywać się: imperf: subj{np(str)} + {or}
przekonywać się: imperf: subj{np(str)} + {prepnp(do,gen)}
przekonywać się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
przekraczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przekraczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przekreślać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przekreślić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przekręcać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przekręcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przekręcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przekręcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przekręcać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
przekręcać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przekręcać się: imperf: subj{np(str)} + {prepnp(o,acc)}
przekręcać się: imperf: subj{np(str)} + {xp(adl)}
przekręcić: perf: subj{np(str)} + {np(inst)} + {xp(adl)} + {refl}
przekręcić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
przekręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przekręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przekręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przekręcić: perf: subj{np(str)} + {prepnp(na,acc)} + {refl}
przekręcić: perf: subj{np(str)} + {prepnp(o,acc)} + {refl}
przekręcić: perf: subj{np(str)} + {prepnp(przez,acc)} + {refl}
przekręcić się: perf: subj{np(str)} + {xp(adl)}
przekroczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przekroczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przekrzykiwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przekrzykiwać się: imperf: subj{np(str)} + {prepnp(z,inst)}
przekształcać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + {prepadjp(z,gen)}
przekształcać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + {prepadjp(z,gen)}
przekształcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przekształcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przekształcać się: imperf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + {prepadjp(z,gen)}
przekształcać się: imperf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + {prepadjp(z,gen)}
przekształcać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przekształcać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przekształcić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)}
przekształcić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przekształcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przekształcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przekształcić się: perf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)}
przekształcić się: perf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przekształcić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przekształcić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przekupić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przelać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przez,acc)}
przelać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przelać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(perl)}
przelać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przelać się: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przelać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
przelać się: perf: subj{np(str)} + {np(dat)} + {xp(perl)}
przelatywać: imperf: subj{cp(int)} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelatywać: imperf: subj{cp(int)} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelatywać: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelatywać: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelatywać: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelatywać: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelatywać: imperf: subj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelatywać: imperf: subj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelatywać: imperf: subj{np(str)} + {np(dat)} + {xp(perl)}
przelatywać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przelatywać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
przelatywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przelatywać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przelatywać: imperf: subj{or} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelatywać: imperf: subj{or} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelecieć: perf: subj{cp(int)} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelecieć: perf: subj{cp(int)} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelecieć: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelecieć: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelecieć: perf: subj{cp(że)} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelecieć: perf: subj{cp(że)} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelecieć: perf: subj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelecieć: perf: subj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelecieć: perf: subj{np(str)} + {np(dat)} + {xp(perl)}
przelecieć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przelecieć: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
przelecieć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przelecieć: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przelecieć: perf: subj{or} + {np(dat)} + {preplexnp(przez,acc,_,'głowa',natr)}
przelecieć: perf: subj{or} + {np(dat)} + {preplexnp(przez,acc,_,'myśl',natr)}
przelecieć się: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przelecieć się: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
przelewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przez,acc)}
przelewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przelewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(perl)}
przelewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przelewać się: imperf: {np(dat)}
przelewać się: imperf: {prepnp(u,gen)}
przelewać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przelewać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
przelewać się: imperf: subj{np(str)} + {np(dat)} + {xp(perl)}
przelewać się: imperf: {xp(locat)}
przelęknąć: perf: subj{np(str)} + {np(str)}
przelęknąć się: perf: subj{np(str)} + {cp(int)}
przelęknąć się: perf: subj{np(str)} + {cp(że)}
przelęknąć się: perf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)}
przelęknąć się: perf: subj{np(str)} + {np(inst)}
przeliczać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
przeliczać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przeliczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przeliczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przeliczać się: imperf: subj{np(str)} + {comprepnp(co do)}
przeliczać się: imperf: subj{np(str)} + {prepnp(na,acc)}
przeliczać się: imperf: subj{np(str)} + {prepnp(w,loc)}
przeliczać się: imperf: subj{np(str)} + {prepnp(z,inst)}
przeliczyć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
przeliczyć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przeliczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przeliczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przeliczyć się: perf: subj{np(str)} + {comprepnp(co do)}
przeliczyć się: perf: subj{np(str)} + {cp(że)}
przeliczyć się: perf: subj{np(str)} + {prepnp(na,acc)}
przeliczyć się: perf: subj{np(str)} + {prepnp(w,loc)}
przeliczyć się: perf: subj{np(str)} + {prepnp(z,inst)}
przełamać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przełamać się: perf: subj{np(str)} + {cp(żeby)}
przełamać się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
przełamać się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przełamywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przełamywać się: imperf: subj{np(str)} + {cp(żeby)}
przełamywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
przełamywać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przełączać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przełączać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przełączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przełączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przełączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przełączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przełączać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)} + {refl}
przełączać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)} + {refl}
przełączać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)} + {refl}
przełączać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
przełączyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przełączyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przełączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przełączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przełączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przełączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przełączyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)} + {refl}
przełączyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)} + {refl}
przełączyć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)} + {refl}
przełączyć: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
przełknąć: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
przełożyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przełożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przełożyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przełożyć: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przełożyć się: perf: subj{np(str)} + {prepnp(na,acc)}
przełykać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
przemawiać: imperf: subj{np(str); ncp(str,że)} + {prepnp(przeciw,dat); prepnp(za,inst); prepncp(za,inst,że); prepncp(za,inst,żeby)}
przemawiać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przemawiać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
przemawiać: imperf: subj{np(str)} + {prepnp(przez,acc)}
przemawiać się: imperf: subj{np(str)} + {or}
przemawiać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
przemieniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)}
przemieniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przemieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przemieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przemieniać się: imperf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)}
przemieniać się: imperf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przemieniać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przemieniać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przemienić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)}
przemienić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przemienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przemienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przemienić się: perf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)}
przemienić się: perf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przemienić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przemienić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przemierzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przemierzyć: imperf: subj{np(str)} + obj{np(str)} + {fixed('wzdłuż i wszerz')}
przemierzyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)} + {xp(temp)}
przemierzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przemierzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)} + {xp(abl)} + {xp(mod)} + {xp(perl)}
przemieszczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przemieszczać się: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przemieścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
przemieścić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przemieścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {xp(adl)}
przemieścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
przemieścić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przemieścić: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przemieścić się: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przemieścić się: perf: subj{np(str)} + {prepnp(o,acc)} + {xp(adl)}
przemieścić się: perf: subj{np(str)} + {prepnp(w,loc)}
przemieścić się: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
przemijać: perf: subj{np(str)} + controller{np(dat)} + controllee{xp(mod)}
przemijać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
przemilczać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
przemilczać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przemilczać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
przemilczać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(przed,inst)}
przemilczać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(wobec,gen)}
przemilczać: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
przemilczać: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
przemilczać: perf: subj{np(str)} + {prepnp(wobec,gen)} + {cp(int)}
przemilczać: perf: subj{np(str)} + {prepnp(wobec,gen)} + {cp(że)}
przemilczeć: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)}
przemilczeć: perf: subj{np(str)} + {xp(dur)} + {advp(misc)}
przeminąć: perf: subj{np(str)} + controller{np(dat)} + controllee{xp(mod)}
przeminąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
przemknąć: perf: subj{cp(że)} + {np(dat)} + {prepnp(przez,acc)}
przemknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przemknąć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przemknąć: perf: subj{or} + {np(dat)} + {prepnp(przez,acc)}
przemóc: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przemóc: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,loc,_,'siebie',natr)}
przemóc: perf: subj{np(str)} + {prepnp(w,loc)}
przemóc się: perf: subj{np(str)} + {cp(żeby)}
przemóc się: perf: subj{np(str)} + {prepnp(do,gen)}
przemóc się: perf: subj{np(str)} + {prepnp(w,loc)}
przemówić: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {or}
przemówić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przemówić: perf: subj{np(str)} + {prepncp(za,inst,żeby)}
przemówić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(za,inst)}
przemówić: perf: subj{np(str)} + {prepnp(na,acc)}
przemówić: perf: subj{np(str)} + {prepnp(przeciw,dat)}
przemówić: perf: subj{np(str)} + {prepnp(przez,acc)}
przemówić: perf: subj{np(str)} + {prepnp(za,inst)}
przemówić się: perf: subj{np(str)} + {prepnp(z,inst)}
przemycać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
przemycać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,inst)}
przemycać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przemycać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przemycać się: imperf: subj{np(str)} + {prepnp(od,gen)}
przemycać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przemycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przemycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,inst)}
przemycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przemycić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przemycić się: perf: subj{np(str)} + {prepnp(do,gen)}
przemycić się: perf: subj{np(str)} + {prepnp(między,inst)}
przemycić się: perf: subj{np(str)} + {prepnp(przez,acc)}
przemycić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przemykać: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)} + {xp(locat)} + {or}
przemykać: imperf: subj{np(str)} + {np(inst)} + {prepnp(przez,acc)}
przemykać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
przemykać: imperf: subj{or} + {np(dat)} + {prepnp(przez,acc)}
przemykać się: imperf: subj{np(str)} + {np(inst)} + {xp(dur)} + {xp(locat)}
przemyśleć: perf: subj{np(str)} + {cp(int)}
przemyśleć: perf: subj{np(str)} + {cp(że)}
przemyśleć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
przenieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przenieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przenieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przenieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przenieść: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przenieść się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przenieść się: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
przenieść się: perf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
przenieść się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przenikać: imperf: subj{cp(że)} + {prepnp(do,gen)}
przenikać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przenikać: imperf: subj{np(str)} + {prepnp(do,gen)}
przenikać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przenikać się: imperf: subj{np(str)} + {prepnp(z,inst)}
przeniknąć: perf: subj{cp(że)} + {prepnp(do,gen)}
przeniknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przeniknąć: perf: subj{np(str)} + {prepnp(do,gen)}
przeniknąć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przeniknąć się: perf: subj{np(str)} + {prepnp(z,inst)}
przenosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przenosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przenosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przenosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przenosić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przenosić się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przenosić się: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
przenosić się: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
przenosić się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przeobrazić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeobrazić: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
przeobrazić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeobrazić się: perf: subj{np(str)} + {xp(mod)}
przeobrażać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeobrażać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeoczyć: perf: subj{np(str)} + obj{cp(int)}
przeoczyć: perf: subj{np(str)} + obj{cp(jak)}
przeoczyć: perf: subj{np(str)} + obj{cp(że)}
przeoczyć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)}
przepadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przepadać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
przepadać: imperf: subj{np(str)} + {np(dat)} + {xp(temp)}
przepadać: imperf: subj{np(str)} + {prepncp(za,inst,żeby2)}
przepadać: imperf: subj{np(str)} + {prepnp(na,loc)}
przepadać: imperf: subj{np(str)} + {prepnp(w,loc)}
przepadać: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,gdy); prepncp(za,inst,int); prepncp(za,inst,jak); prepncp(za,inst,kiedy); prepncp(za,inst,że)}
przepaść: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przepaść: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
przepaść: perf: subj{np(str)} + {np(dat)} + {xp(temp)}
przepaść: perf: subj{np(str)} + {prepnp(na,loc)}
przepaść: perf: subj{np(str)} + {prepnp(w,loc)}
przepełniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przepełniać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
przepełnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przepełnić się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
przepędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przepędzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przepędzać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przepędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przepędzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przepędzić: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przepić: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przepić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przepić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przepić się: perf: subj{np(str)}
przepijać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przepijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przepijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przepijać się: imperf: subj{np(str)}
przepisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przepisać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
przepisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przepisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przepisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przepisać się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przepisać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przepisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przepisywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
przepisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przepisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przepisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przepisywać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przepisywać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przeplatać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przeplatać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,inst)}
przeplatać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przeplatać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
przeplatać: imperf: subj{np(str)} + {prepnp(przez,acc)} + {refl}
przeplatać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
przeplatać się: imperf: subj{np(str)} + {prepnp(między,inst)}
przeplatać się: imperf: subj{np(str)} + {prepnp(przez,acc)}
przepłynąć: perf: subj{np(str)} + {np(dat)} + {xp(perl)}
przepłynąć: perf: subj{np(str)} + {np(inst)} + {prepnp(przez,acc)}
przepłynąć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przepłynąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przepłynąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przepłynąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przepłynąć: perf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(przez,acc)}
przepłynąć się: perf: subj{np(str)} + {np(inst)} + {xp(perl)}
przepowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
przepowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przepowiadać: imperf: subj{np(str)} + {np(dat)} + {or}
przepowiadać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
przepowiedzieć: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
przepowiedzieć: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przepowiedzieć: imperf: subj{np(str)} + {np(dat)} + {or}
przepowiedzieć: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
przepracować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przepracować się: perf: subj{np(str)} + {np(inst)}
przepraszać: imperf: subj{np(str)} + {np(str)} + {or}
przepraszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); cp(że); prepncp(za,acc,że)}
przepraszać się: imperf: subj{np(str)} + {prepnp(z,inst)}
przeprawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przeprawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przeprawić się: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przeprosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); cp(że); prepncp(za,acc,int); prepncp(za,acc,że)} + {or}
przeprosić się: perf: subj{np(str)} + {prepnp(z,inst)}
przeprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przeprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
przeprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
przeprowadzać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przeprowadzać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przeprowadzać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przeprowadzać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
przeprowadzać się: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
przeprowadzać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przeprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przeprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
przeprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
przeprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przeprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przeprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przeprowadzić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przeprowadzić się: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
przeprowadzić się: perf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
przeprowadzić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przepuszczać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przepuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)} + {xp(perl)}
przepuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przez,acc)}
przepuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przepuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
przepuścić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przepuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)} + {xp(perl)}
przepuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przez,acc)}
przepuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przepuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
przepuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przepytać: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
przepytać: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w kwestii)}
przepytać: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
przepytać: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
przepytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przepytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int)}
przepytać się: perf: subj{np(str)} + {cp(int)}
przepytać się: perf: subj{np(str)} + {prepnp(o,acc)}
przepytywać: imperf: subj{np(str)} + {cp(int)} + {refl}
przepytywać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
przepytywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
przepytywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
przepytywać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(po,loc)}
przepytywać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
przerabiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)} + {np(dat)}
przerabiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)} + {np(dat)}
przerabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przerabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeradzać się: imperf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przeradzać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przerastać: imperf: subj{np(str); ncp(str,że)} + {np(str)}
przerastać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)}
przerastać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przerazić: perf: subj{cp(że)} + {np(str)}
przerazić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
przerazić się: perf: subj{np(str)} + {cp(int)}
przerazić się: perf: subj{np(str)} + {cp(że)}
przerazić się: perf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)}
przerazić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przerażać: imperf: subj{cp(że)} + {np(str)}
przerażać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
przerażać się: imperf: subj{np(str)} + {cp(int)}
przerażać się: imperf: subj{np(str)} + {cp(że)}
przerażać się: imperf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)}
przerażać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przerobić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)} + {np(dat)}
przerobić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)} + {np(dat)}
przerobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przerobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przerodzić się: perf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + controllee{prepadjp(z,gen)}
przerodzić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przerosnąć: perf: subj{np(str); ncp(str,że)} + {np(str)}
przerosnąć: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)}
przerosnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przerwać: perf: subj{np(str)} + {np(dat)} + {or}
przerwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przerwać się: perf: subj{np(str)}
przerywać: imperf: subj{np(str)} + {np(dat)} + {or}
przerywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przerywać się: imperf: subj{np(str)}
przerzucać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(nad,inst)}
przerzucać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przez,acc)}
przerzucać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przerzucać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przerzucać się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
przerzucać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przerzucać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przerzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(nad,inst)}
przerzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przez,acc)}
przerzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przerzucić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przerzucić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przerzucić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przesadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przesadzać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przesadzać: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
przesadzać: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że); prepncp(z,inst,żeby)}
przesadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przesadzić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przesadzić: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
przesadzić: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że); prepncp(z,inst,żeby)}
przesądzać: imperf: subj{np(str)} + {cp(int)}
przesądzać: imperf: subj{np(str)} + {cp(żeby)}
przesądzać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)}
przesądzać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
przesądzać: imperf: subj{np(str)} + obj{cp(że)}
przesądzić: perf: subj{np(str)} + {cp(żeby)}
przesądzić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
przesądzić: perf: subj{np(str); ncp(str,że)} + obj{np(str); ncp(str,że)}
przesądzić: perf: subj{np(str)} + obj{cp(że)}
przesiadać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przesiadać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przesiadać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przesiadać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przesiadywać: imperf: subj{np(str)} + {prepnp(przy,loc)} + {xp(dur)}
przesiadywać: imperf: subj{np(str)} + {prepnp(u,gen)} + {xp(dur)}
przesiadywać: imperf: subj{np(str)} + {xp(dur)} + {xp(locat)}
przesiadywać: imperf: subj{np(str)} + {xp(dur)} + {xp(locat)} + {lexnp(inst,sg,'kamień',natr)}
przesiąść się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przesiąść się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przesiąść się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przesiąść się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przesiedlić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przesiedlić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przesiedzieć: perf: subj{np(str)} + {prepnp(przy,loc)} + {xp(dur)}
przesiedzieć: perf: subj{np(str)} + {prepnp(u,gen)} + {xp(dur)}
przesiedzieć: perf: subj{np(str)} + {xp(dur)} + {xp(locat)}
przeskakiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przeskakiwać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przeskakiwać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przeskakiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przeskakiwać: imperf: subj{np(str)} + {prepnp(przez,acc)}
przeskakiwać: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeskakiwać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przeskoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przeskoczyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przeskoczyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
przeskoczyć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przeskoczyć: perf: subj{np(str)} + {prepnp(przez,acc)}
przeskoczyć: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
przeskoczyć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(perl)}
przesłać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przesłaniać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
przesłonić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
przesłuchać: perf: subj{np(str)} + obj{np(str)}
przesłuchiwać: imperf: subj{np(str)} + obj{np(str)}
przespać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przespać się: perf: subj{np(str)} + {prepnp(z,inst)}
przespać się: perf: subj{np(str)} + {xp(locat)}
przestać: perf: subj,controller{E} + controllee{infp(imperf)}
przestać: perf: subj{np(str)} + obj{np(str)}
przestawać: imperf: subj,controller{E} + controllee{infp(imperf)}
przestawać: imperf: subj{np(str)} + {prepnp(na,loc)}
przestawać: imperf: subj{np(str)} + {prepnp(z,inst)}
przestawiać: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(w,loc,sg,'głowa',natr)}
przestawiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)} + {np(dat)}
przestawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
przestawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przestawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
przestawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
przestawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przestawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
przestawiać się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
przestawiać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przestawić: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(w,loc,sg,'głowa',natr)}
przestawić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)} + controllee{prepadjp(z,gen)} + {np(dat)}
przestawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
przestawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przestawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
przestawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
przestawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przestawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
przestawić się: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
przestawić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przestąpić: perf: subj{np(str)} + obj{np(str)}
przestąpić: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przestąpić: perf: subj{np(str)} + {prepnp(przez,acc)}
przestępować: imperf: subj{np(str)} + {np(str)}
przestępować: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przestępować: imperf: subj{np(str)} + {prepnp(przez,acc)}
przestraszyć: perf: subj{cp(że)} + {np(str)}
przestraszyć: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
przestraszyć się: perf: subj{np(str)} + {cp(int)}
przestraszyć się: perf: subj{np(str)} + {cp(że)}
przestraszyć się: perf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)}
przestraszyć się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przestrzec: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
przestrzec: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst); cp(że); cp(żeby); prepncp(przed,inst,że); prepncp(przed,inst,żeby)}
przestrzec: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {or}
przestrzegać: imperf: subj{np(str)} + {np(gen); ncp(gen,że); ncp(gen,żeby)}
przestrzegać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
przestrzegać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst); cp(że); cp(żeby); prepncp(przed,inst,że); prepncp(przed,inst,żeby)}
przestrzegać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {or}
przestrzelić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przestrzelić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(perl)}
przesunąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
przesunąć: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przesunąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przesunąć: perf: subj{np(str)} + obj{np(str)} + {prepncp(za,acc,że)}
przesunąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przesunąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
przesunąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przesunąć: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
przesunąć się: perf: subj{np(str)} + {cp(żeby)}
przesunąć się: perf: subj{np(str)} + {prepnp(o,acc)}
przesunąć się: perf: subj{np(str)} + {prepnp(po,loc)}
przesunąć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przesuwać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
przesuwać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
przesuwać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przesuwać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przesyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przesyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(perl)}
przesyłać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przeszkadzać: imperf: subj{cp(że)} + {np(dat)} + {prepnp(w,loc)}
przeszkadzać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {np(inst)}
przeszkadzać: imperf: subj{np(str); ncp(str,że)} + {np(dat); ncp(dat,że); ncp(dat,żeby)}
przeszkadzać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(w,loc); prepncp(w,loc,że); prepncp(w,loc,żeby)}
przeszkodzić: perf: subj{cp(że)} + {np(dat)} + {prepnp(w,loc)}
przeszkodzić: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {np(inst)}
przeszkodzić: perf: subj{np(str); ncp(str,że)} + {np(dat); ncp(dat,że); ncp(dat,żeby)}
przeszkodzić: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(w,loc); prepncp(w,loc,że); prepncp(w,loc,żeby)}
przeszukać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przeszukiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przeszyć: perf: subj{np(str)} + {np(inst)} + {refl}
przeszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przeszywać: imperf: subj{np(str)} + {np(inst)} + {refl}
przeszywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przeszywać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'wylot',natr)}
prześcigać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
prześcigać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
prześcigać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,żeby)} + {prepnp(z,inst)}
prześcigać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
prześcigać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
prześladować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
prześladować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
przeświecać: imperf: subj{np(str)} + {np(inst)}
przeświecać: imperf: subj{np(str)} + {prepnp(pod,acc)}
przeświecać: imperf: subj{np(str)} + {xp(abl)}
przeświecać: imperf: subj{np(str)} + {xp(locat)}
przeświecać: imperf: subj{np(str)} + {xp(perl)}
prześwietlać: imperf: subj{np(str)} + {np(inst)} + {refl}
prześwietlać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
prześwietlać się: imperf: subj{np(str)} + {np(dat)}
prześwietlić: perf: subj{np(str)} + {np(inst)} + {refl}
prześwietlić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
prześwietlić się: perf: subj{np(str)} + {np(dat)}
prześwitywać: imperf: subj{np(str)} + {np(inst)}
prześwitywać: imperf: subj{np(str)} + {xp(abl)}
prześwitywać: imperf: subj{np(str)} + {xp(locat)}
prześwitywać: imperf: subj{np(str)} + {xp(perl)}
przetłumaczyć: perf: subj{np(str)} + {np(dat)} + {or}
przetłumaczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {prepadjp(na,acc)} + {prepadjp(z,gen)}
przetłumaczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
przetłumaczyć: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); cp(żeby); ncp(str,int); ncp(str,że)} + {np(dat)}
przetłumaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
przetrwać: perf: subj{np(str)} + obj{np(str)}
przetrząsać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przetrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przetrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przetrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)} + {xp(locat)}
przetrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)} + {xp(locat)}
przetrzeć się: perf: subj{np(str)} + {prepnp(po,loc)}
przetrzeć się: perf: subj{np(str)} + {prepnp(z,gen)}
przetrzeć się: perf: subj{np(str)} + {prepnp(z,inst)}
przetrzeć się: perf: {xp(locat)}
przeważać: imperf: subj{np(str)} + {np(inst)} + {np(str)}
przeważać: imperf: subj{np(str)} + {np(str)} + {xp(adl)}
przeważać: imperf: subj{np(str)} + {prepnp(nad,inst)} + {prepnp(w,loc)}
przeważać: imperf: subj{np(str)} + {prepnp(u,gen)}
przeważać: imperf: subj{np(str)} + {prepnp(wśród,gen)}
przeważać: imperf: subj{np(str)} + {xp(locat)}
przeważyć: perf: subj{np(str)} + {np(inst)}
przeważyć: perf: subj{np(str)} + {np(str)}
przeważyć: perf: subj{np(str)} + {np(str)} + {xp(adl)}
przeważyć: perf: subj{np(str)} + {prepnp(nad,inst)} + {prepnp(w,loc)}
przeważyć: perf: subj{np(str)} + {prepnp(u,gen)}
przeważyć: perf: subj{np(str)} + {prepnp(wśród,gen)}
przeważyć: perf: subj{np(str)} + {xp(locat)}
przewidywać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)}
przewidywać: imperf: subj{np(str)} + {or}
przewidzieć: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)}
przewidzieć: perf: subj{np(str)} + {or}
przewieźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przewieźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(perl)}
przewijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przewijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przewijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przewijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przewijać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przewijać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przewijać się: imperf: subj{np(str)} + {prepnp(w,loc)}
przewijać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przewijać się: imperf: subj{np(str)} + {xp(locat)}
przewijać się: imperf: subj{np(str)} + {xp(perl)}
przewijać się: imperf: subj{or} + {np(dat)} + {prepnp(przez,acc)}
przewinąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przewinąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przewinąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przewinąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przewinąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przewinąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
przewinąć się: perf: subj{np(str)} + {prepnp(w,loc)}
przewinąć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przewinąć się: perf: subj{np(str)} + {xp(locat)}
przewinąć się: perf: subj{np(str)} + {xp(perl)}
przewinąć się: perf: subj{or} + {np(dat)} + {prepnp(przez,acc)}
przewodniczyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
przewodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
przewodzić: imperf: subj{np(str)} + obj{np(str)}
przewodzić: imperf: subj{np(str)} + {prepnp(nad,inst)}
przewozić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przewozić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(perl)}
przewozić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
przewozić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {xp(perl)}
przewracać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
przewracać: imperf: subj{np(str)} + {np(inst)}
przewracać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przewracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przewracać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przewracać się: imperf: {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
przewracać się: imperf: {np(dat)} + {xp(locat)}
przewracać się: imperf: subj{np(str)} + {np(dat)}
przewracać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
przewracać się: imperf: subj{np(str)} + {preplexnp(w,loc,_,'grób',natr)}
przewracać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przewrócić: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
przewrócić: perf: subj{np(str)} + {np(inst)}
przewrócić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przewrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przewrócić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
przewrócić się: perf: {np(dat)} + {preplexnp(w,loc,pl,'głowa',natr)}
przewrócić się: perf: subj{np(str)} + {np(dat)}
przewrócić się: perf: subj{np(str)} + {preplexnp(w,loc,_,'grób',natr)}
przewrócić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przewyższać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
przewyższać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
przewyższać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
przewyższyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
przewyższyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
przewyższyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
przeziębić: perf: subj{np(str)} + obj{np(str)}
przeziębić się: perf: subj{np(str)}
przeznaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
przeznaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przeznaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przeznaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
przeznaczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przeznaczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przeznaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(do,gen)}
przeznaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(na,acc)}
przeznaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
przezwyciężać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
przezwyciężać: imperf: subj{np(str)} + {refl}
przezwyciężyć: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
przezwyciężyć: perf: subj{np(str)} + {refl}
przeżyć: perf: subj,controller{np(str)} + obj{np(str); ncp(str,jak); ncp(str,że)} + controllee{xp(mod)}
przeżyć: perf: subj{np(str)} + {cp(że)}
przeżyć: perf: subj{np(str)} + obj{np(str); ncp(str,jak); ncp(str,że)}
przeżyć: perf: subj{np(str)} + {prepnp(na,loc)}
przeżyć: perf: subj{np(str)} + {xp(dur)} + {xp(locat)}
przeżyć się: perf: subj{np(str)}
przeżywać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {cp(że)}
przeżywać: imperf: subj,controller{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + controllee{xp(mod)}
przeżywać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(z powodu)}
przeżywać: imperf: subj{np(str)} + obj{np(str)} + {xp(dur)}
przeżywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przeżywać: imperf: subj{np(str)} + {prepnp(na,loc)}
przeżywać: imperf: subj{np(str)} + {prepnp(z,inst)}
przeżywać się: imperf: subj{np(str)}
przodować: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(wśród,gen)}
przodować: imperf: subj{np(str)} + {prepnp(w,loc)} + {xp(locat)}
przybić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przybić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przybić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przybić: perf: subj{np(str)} + {preplexnp(z,inst,sg,'piątka',natr)}
przybiec: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przybiec: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przybiegać: imperf: subj,controller{np(str)} + controllee{infp(_)}
przybiegać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przybiegać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
przybiegać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przybierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przybierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przybierać: imperf: subj{np(str)} + obj{refl} + {prepnp(w,acc)}
przybierać: imperf: subj{np(str)} + {prepnp(na,loc)}
przybijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przybijać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przybijać: imperf: subj{np(str)} + {prepnp(z,inst)} + {lexnp(str,sg,'piątka',natr)}
przybliżać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przybliżać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
przybliżać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przybliżać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
przybliżać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
przybliżać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przybliżać się: imperf: subj{np(str)} + {xp(adl)}
przybliżyć: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przybliżyć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
przybliżyć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przybliżyć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
przybliżyć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
przybliżyć się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przybliżyć się: perf: subj{np(str)} + {xp(adl)}
przybrać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przybrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przybrać: perf: subj{np(str)} + {prepnp(na,loc)}
przybrać: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
przybyć: perf: {np(dat)} + {np(gen)}
przybyć: perf: {np(dat)} + {preplexnp(na,loc,sg,'waga',natr)}
przybyć: perf: {np(gen)} + {xp(locat)}
przybyć: perf: subj{np(str)} + {np(dat)}
przybyć: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,loc,sg,'waga',natr)}
przybyć: perf: subj{np(str)} + {prepnp(na,acc)}
przybyć: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
przybyć: perf: subj{np(str)} + {xp(locat)}
przybywać: imperf: {np(dat)} + {np(gen)}
przybywać: imperf: {np(dat)} + {preplexnp(na,loc,sg,'waga',natr)}
przybywać: imperf: {np(gen)} + {xp(locat)}
przybywać: imperf: subj{np(str)} + {np(dat)}
przybywać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,loc,sg,'waga',natr)}
przybywać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
przybywać: imperf: subj{np(str)} + {xp(locat)}
przychodzić: imperf: subj,controllee{infp(_)} + controller{np(dat)}
przychodzić: imperf: subj,controllee{infp(_)} + controller{np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przychodzić: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
przychodzić: imperf: subj{cp(int)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przychodzić: imperf: subj{cp(int)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przychodzić: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przychodzić: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przychodzić: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przychodzić: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przychodzić: imperf: subj{infp(_)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przychodzić: imperf: subj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przychodzić: imperf: subj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przychodzić: imperf: subj{np(str)} + {np(dat)} + {fixed('w sukurs')}
przychodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przychodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
przychodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
przychodzić: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'świat',natr)}
przychodzić: imperf: subj{np(str)} + {prepnp(do,gen)} + {preplexnp(w,acc,pl,'odwiedziny',natr)}
przychodzić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
przychodzić: imperf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
przychodzić: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(adl)}
przychodzić: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przychodzić: imperf: subj{np(str)} + {xp(adl)} + {preplexnp(w,acc,pl,'odwiedziny',natr)}
przychylać: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'niebo',atr)}
przychylać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przychylać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
przychylać się: imperf: subj{np(str)} + {prepncp(do,gen,int)}
przychylać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przychylać się: imperf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
przychylić: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'niebo',atr)}
przychylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przychylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
przychylić się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przychylić się: perf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
przyciąć: perf: subj{np(str)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,sg,'drzemka',atr)}
przyciąć: perf: subj{np(str)} + {lexnp(str,sg,'komar',natr)}
przyciąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
przyciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przyciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
przyciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przyciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przyciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
przyciąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przyciąć się: perf: subj{np(str)} + {prepnp(na,loc)}
przyciągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przyciągać się: imperf: subj{np(str)}
przyciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przyciągnąć się: perf: subj{np(str)}
przycichnąć: perf: subj{np(str)}
przycinać: perf: subj{np(str)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,sg,'drzemka',atr)}
przycinać: perf: subj{np(str)} + {lexnp(str,sg,'komar',natr)}
przycinać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
przycinać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przycinać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
przycinać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
przycinać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przycinać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
przycinać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
przycinać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przycinać się: perf: subj{np(str)} + {prepnp(na,loc)}
przyciskać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przyciskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przycisnąć: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przycisnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przycisnąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przycupnąć: perf: subj{np(str)} + {np(inst)} + {xp(locat)} + {xp(mod)}
przyczepiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przyczepiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
przyczepiać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przyczepiać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
przyczepiać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że)}
przyczepiać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
przyczepiać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
przyczepić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przyczepić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
przyczepić się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przyczepić się: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
przyczepić się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że)}
przyczepić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
przyczepić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
przyczyniać: imperf: subj{np(str)} + {np(dat)} + {np(gen)}
przyczyniać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
przyczynić: perf: subj{np(str)} + {np(dat)} + {np(gen)} + {np(inst)}
przyczynić się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
przyćmić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przyćmić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przydać: perf: subj{np(str)} + {cp(że)}
przydać: perf: subj{np(str)} + obj{np(gen)} + {np(dat)}
przydać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przydać się: perf: subj,controllee{infp(_)} + controller{np(dat)}
przydać się: perf: subj{cp(żeby)} + {np(dat)}
przydać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przydać się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przydać się: perf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
przydać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
przydać się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
przydać się: perf: subj{np(str)} + {np(dat)} + {xp(temp)}
przydarzać się: imperf: subj,controller{infp(_)} + controllee{np(dat)} + {xp(temp)}
przydarzać się: imperf: subj{cp(żeby)} + {np(dat)} + {xp(locat)}
przydarzać się: imperf: subj{cp(żeby)} + {np(dat)} + {xp(temp)}
przydarzać się: imperf: subj{cp(że)} + {np(dat)} + {xp(temp)}
przydarzać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
przydarzać się: imperf: subj{np(str)} + {np(dat)} + {xp(temp)}
przydarzyć się: perf: subj,controller{infp(_)} + controllee{np(dat)} + {xp(temp)}
przydarzyć się: perf: subj{cp(żeby)} + {np(dat)} + {xp(locat)}
przydarzyć się: perf: subj{cp(żeby)} + {np(dat)} + {xp(temp)}
przydarzyć się: perf: subj{cp(że)} + {np(dat)} + {xp(temp)}
przydarzyć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
przydarzyć się: perf: subj{np(str)} + {np(dat)} + {xp(temp)}
przydawać: imperf: subj{np(str)} + {cp(że)}
przydawać: imperf: subj{np(str)} + obj{np(gen)} + {np(dat)}
przydawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przydawać się: imperf: subj,controllee{infp(_)} + controller{np(dat)}
przydawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przydawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przydawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
przydawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
przydawać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
przydawać się: imperf: subj{np(str)} + {np(dat)} + {xp(temp)}
przydusić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przydusić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
przydzielać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przydzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
przydzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przydzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przydzielić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przydzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
przydzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przydzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przygarnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przygarnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
przygarnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
przygarniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przygarniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
przygarniać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
przygarniać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
przygasać: imperf: subj{np(str)} + {prepnp(w,loc)}
przygasać: imperf: subj{np(str)} + {xp(locat)}
przygasnąć: perf: subj{np(str)} + {prepnp(w,loc)}
przygasnąć: perf: subj{np(str)} + {xp(locat)}
przyglądać się: imperf: subj{np(str)} + {cp(jak)}
przyglądać się: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
przyglądać się: imperf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,jak)}
przygotować: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
przygotować: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przygotować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przygotować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
przygotować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
przygotować się: perf: subj{np(str)} + {cp(że)}
przygotować się: perf: subj{np(str)} + {cp(żeby)}
przygotować się: perf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
przygotowywać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
przygotowywać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przygotowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przygotowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
przygotowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
przygotowywać się: imperf: subj{np(str)} + {cp(że)}
przygotowywać się: imperf: subj{np(str)} + {cp(żeby)}
przygotowywać się: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
przygryźć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przygryźć: perf: subj{np(str)} + {np(dat)} + {or}
przygryźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {cp(aż)}
przygryźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
przyhamować: perf: subj{np(str)} + {cp(żeby)}
przyhamować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przyhamować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przyjaźnić się: imperf: subj{np(str)} + {prepnp(z,inst)}
przyjąć: perf: subj,controller{np(str)} + controllee{infp(imperf)}
przyjąć: perf: subj{np(str)} + {cp(że)} + {preplexnp(na,acc,sg,'wiara',natr)}
przyjąć: perf: subj{np(str)} + obj,controller{cp(żeby)} + controllee{prepadjp(za,acc)}
przyjąć: perf: subj{np(str)} + obj,controller{cp(żeby)} + controllee{prepnp(za,acc)}
przyjąć: perf: subj{np(str)} + obj,controller{cp(że)} + controllee{prepadjp(za,acc)}
przyjąć: perf: subj{np(str)} + obj,controller{cp(że)} + controllee{prepnp(za,acc)}
przyjąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
przyjąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
przyjąć: perf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepadjp(za,acc)}
przyjąć: perf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepnp(za,acc)}
przyjąć: perf: subj{np(str)} + obj{cp(że)} + {prepnp(za,inst)}
przyjąć: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)}
przyjąć: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {preplexnp(do,gen,sg,'wiadomość',atr)}
przyjąć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {preplexnp(na,acc,sg,'wiara',natr)}
przyjąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przyjąć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,acc,_,'dach',batr)} + {fixed('z otwartymi ramionami')}
przyjąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {fixed('z otwartymi ramionami')}
przyjąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {fixed('z otwartymi rękami')}
przyjąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przyjąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przyjąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
przyjąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {xp(temp)}
przyjąć się: perf: {infp(imperf)}
przyjąć się: perf: subj{np(str)}
przyjechać: perf: subj,controller{np(str)} + controllee{infp(_)}
przyjechać: perf: subj{np(str)} + {np(inst)}
przyjechać: perf: subj{np(str)} + {prepnp(do,gen)}
przyjechać: perf: subj{np(str)} + {prepnp(na,acc)}
przyjechać: perf: subj{np(str)} + {prepnp(na,loc)}
przyjechać: perf: subj{np(str)} + {prepnp(od,gen)}
przyjechać: perf: subj{np(str)} + {prepnp(po,acc)}
przyjechać: perf: subj{np(str)} + {prepnp(za,inst)}
przyjechać: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przyjechać: perf: subj{np(str)} + {xp(perl)}
przyjeżdżać: imperf: subj{np(str)} + {np(inst)}
przyjeżdżać: imperf: subj{np(str)} + {prepnp(do,gen)}
przyjeżdżać: imperf: subj{np(str)} + {prepnp(na,acc)}
przyjeżdżać: imperf: subj{np(str)} + {prepnp(na,loc)}
przyjeżdżać: imperf: subj{np(str)} + {prepnp(od,gen)}
przyjeżdżać: imperf: subj{np(str)} + {prepnp(po,acc)}
przyjeżdżać: imperf: subj{np(str)} + {prepnp(za,inst)}
przyjeżdżać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przyjeżdżać: imperf: subj{np(str)} + {xp(perl)}
przyjmować: imperf: subj{np(str)} + {cp(że)} + {preplexnp(na,acc,sg,'wiara',natr)}
przyjmować: imperf: subj{np(str)} + obj,controller{cp(że)} + controllee{prepadjp(za,acc)}
przyjmować: imperf: subj{np(str)} + obj,controller{cp(że)} + controllee{prepnp(za,acc)}
przyjmować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
przyjmować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
przyjmować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
przyjmować: imperf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepadjp(za,acc)}
przyjmować: imperf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepnp(za,acc)}
przyjmować: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(za,inst)}
przyjmować: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)}
przyjmować: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {preplexnp(do,gen,sg,'wiadomości',atr)}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {fixed('z otwartymi ramionami')}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {fixed('z otwartymi rękami')}
przyjmować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {preplexnp(na,acc,sg,'wiara',natr)}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,acc,_,'dach',batr)} + {fixed('z otwartymi ramionami')}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {fixed('z otwartymi ramionami')}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {fixed('z otwartymi rękami')}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
przyjmować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {xp(temp)}
przyjmować się: imperf: {infp(imperf)}
przyjmować się: imperf: subj{np(str)}
przyjrzeć się: perf: subj{np(str)} + {cp(jak)}
przyjrzeć się: perf: subj{np(str)} + {np(dat)} + {cp(int)}
przyjrzeć się: perf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,jak)}
przyjść: perf: controller{np(dat)} + controllee{infp(_)}
przyjść: perf: {np(dat)} + {prepncp(na,acc,że)}
przyjść: perf: {np(dat)} + {prepnp(na,acc)}
przyjść: perf: subj,controllee{infp(_)} + controller{np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przyjść: perf: subj,controllee{infp(_)} + controller{np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przyjść: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
przyjść: perf: subj{cp(int)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przyjść: perf: subj{cp(int)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przyjść: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przyjść: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przyjść: perf: subj{cp(że)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przyjść: perf: subj{cp(że)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przyjść: perf: subj{lexnp(str,pl,'koza',natr)} + {fixed('do woza')}
przyjść: perf: subj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
przyjść: perf: subj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)}
przyjść: perf: subj{np(str)} + {np(dat)} + {fixed('w sukurs')}
przyjść: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przyjść: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
przyjść: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
przyjść: perf: subj{np(str)} + {preplexnp(na,acc,sg,'świat',natr)}
przyjść: perf: subj{np(str)} + {prepnp(do,gen)} + {preplexnp(w,acc,pl,'odwiedziny',natr)}
przyjść: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
przyjść: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
przyjść: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(adl)}
przyjść: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
przyjść: perf: subj{np(str)} + {xp(adl)} + {preplexnp(w,acc,pl,'odwiedziny',natr)}
przykazać: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
przykazać: perf: subj{np(str)} + {np(dat)} + {advp(pron)}
przykazać: perf: subj{np(str)} + {np(dat)} + {or}
przykazać: perf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
przykazać: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
przykazać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przyklasnąć: perf: subj{np(str)} + {np(dat); ncp(dat,że); ncp(dat,żeby)}
przykleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
przykleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
przykleić się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przykleić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przyklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
przyklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
przyklejać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przyklejać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przykładać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
przykładać: imperf: subj{np(str)} + obj{lexnp(str,sg,'waga',atr)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przykładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przykładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przykładać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przykładać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przykładać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przykręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(na,acc)}
przykręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(na,acc)}
przykryć: perf: subj{np(str)} + {np(inst)} + {refl}
przykryć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przykrywać: perf: subj{np(str)} + {np(inst)} + {refl}
przykrywać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przykrywać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(pod,inst)}
przykuć: perf: subj{np(str); ncp(str,jak); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przykuć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
przykuć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przykuwać: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przykuwać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
przykuwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przylatywać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
przylatywać: imperf: subj{np(str)} + {prepnp(do,gen)}
przylatywać: imperf: subj{np(str)} + {prepnp(na,loc)}
przylecieć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,acc)}
przylecieć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przylecieć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst); prepncp(z,inst,że)}
przylecieć: perf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(po,acc)}
przylecieć: perf: subj{np(str)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
przylecieć: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(abl)}
przylecieć: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
przylegać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przylgnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przyłapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,jak); prepncp(na,loc,że); prepncp(na,loc,żeby2)}
przyłapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
przyłapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
przyłapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
przyłapać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przyłapać: perf: subj{np(str)} + obj{np(str)} + {xp(temp)}
przyłapać się: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,jak); prepncp(na,loc,że); prepncp(na,loc,żeby2)}
przyłączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyłączać się: imperf: subj{np(str)} + {prepncp(do,gen,że)}
przyłączać się: imperf: subj{np(str)} + {prepnp(do,gen)}
przyłączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyłączyć się: perf: subj{np(str)} + {prepncp(do,gen,że)}
przyłączyć się: perf: subj{np(str)} + {prepnp(do,gen)}
przyłożyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
przyłożyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
przyłożyć: perf: subj{np(str)} + obj{lexnp(str,sg,'waga',atr)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przyłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przyłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przyłożyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przyłożyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przyłożyć się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przymierzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przymierzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przymierzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przymierzać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przymierzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
przymierzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przymierzyć się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przymknąć: perf: subj{np(str)} + obj{lexnp(str,_,'oko',natr)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
przymknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przymknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
przymknąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przymknąć się: perf: subj{np(str)} + {np(dat)}
przymocować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przymusić: perf: subj{np(str)} + {np(inst)} + {cp(żeby)} + {refl}
przymusić: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)} + {refl}
przymusić: perf: subj{np(str)} + obj{np(str)} + {infp(_)}
przymusić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
przymusić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przymuszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
przymuszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przymuszać się: imperf: subj{np(str)} + {np(inst)} + {cp(żeby)}
przymuszać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
przymykać: imperf: subj{np(str)} + obj{lexnp(str,_,'oko',natr)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
przymykać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przymykać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
przymykać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przymykać się: imperf: subj{np(str)} + {np(dat)}
przynieść: perf: {np(str)} + {xp(adl)}
przynieść: perf: subj{lexnp(str,sg,'ślina',natr)} + obj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'język',natr)}
przynieść: perf: subj{np(str)} + {np(dat)} + {np(str)}
przynieść: perf: subj{np(str)} + {np(str)} + {xp(adl)}
przynieść: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
przynieść: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'świat',natr)} + {preplexnp(z,inst,_,'siebie',natr)}
przynosić: imperf: {np(str)} + {xp(adl)}
przynosić: imperf: subj{lexnp(str,sg,'ślina',natr)} + obj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'język',natr)}
przynosić: imperf: subj{np(str)} + {np(dat)} + {np(str)}
przynosić: imperf: subj{np(str)} + {np(str)} + {xp(adl)}
przynosić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
przynosić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'świat',natr)} + {preplexnp(z,inst,_,'siebie',natr)}
przypadać: imperf: subj,controllee{infp(_)} + controller{np(dat)}
przypadać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'udział',natr)}
przypadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przypadać: imperf: subj{np(str)} + {prepnp(na,acc)}
przypadać: imperf: subj{np(str)} + {xp(temp)}
przypalić: perf: subj{np(str)} + {cp(że)} + {lexnp(str,sg,'głup',natr)}
przypalić: perf: subj{np(str)} + {np(inst)} + {refl}
przypalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przypalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
przypalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przypalić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przypalić się: perf: subj{np(str)} + {np(dat)}
przypalić się: perf: subj{np(str)} + {prepnp(na,acc)}
przypalić się: perf: subj{np(str)} + {prepnp(o,acc)}
przypalić się: perf: subj{np(str)} + {prepnp(od,gen)}
przypalić się: perf: subj{np(str)} + {xp(locat)}
przypaść: perf: subj,controllee{np(str)} + controller{infp(_)}
przypaść: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'udział',natr)}
przypaść: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przypaść: perf: subj{np(str)} + {prepnp(na,acc)}
przypaść: perf: subj{np(str)} + {xp(temp)}
przypatrywać się: imperf: subj{np(str)} + {cp(int)}
przypatrywać się: imperf: subj{np(str)} + {cp(jak)}
przypatrywać się: imperf: subj{np(str)} + {np(dat)}
przypatrzeć się: perf: subj{np(str)} + {cp(int)}
przypatrzeć się: perf: subj{np(str)} + {cp(jak)}
przypatrzeć się: perf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,jak)}
przypiąć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
przypiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przypiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
przypiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
przypieczętować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przypilnować: perf: subj{np(str)} + {np(dat)} + {np(gen)} + {xp(dur)} + {xp(mod)}
przypinać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
przypinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przypinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
przypinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
przypinać się: imperf: subj{np(str)} + {prepnp(do,gen)}
przypisać: perf: subj{np(str)} + obj{np(str)} + {np(dat); ncp(dat,że)}
przypisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przypisać: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
przypisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat); ncp(dat,że)}
przypisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przypisywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
przypłacić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)}
przypodobać się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przypominać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str)}
przypominać: imperf: subj{np(str)} + {np(dat)} + {or}
przypominać: imperf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
przypominać: imperf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
przypominać: imperf: subj{np(str)} + obj{np(str); prepnp(o,loc); cp(int); cp(jak); cp(że); cp(żeby); ncp(str,int); ncp(str,jak); ncp(str,że); ncp(str,żeby2); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {np(dat)}
przypominać się: imperf: {np(dat)} + {or}
przypominać się: imperf: {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
przypominać się: imperf: subj{cp(int); cp(że)} + {np(dat)}
przypominać się: imperf: subj{cp(jak)} + {np(dat)}
przypominać się: imperf: subj{cp(żeby2)} + {np(dat)}
przypominać się: imperf: subj{np(str)} + {np(dat)} + {or}
przypomnieć: perf: subj{np(str)} + {np(dat)} + {or}
przypomnieć: perf: subj{np(str)} + obj{np(str); prepnp(o,loc); cp(int); cp(jak); cp(że); cp(żeby); ncp(str,int); ncp(str,jak); ncp(str,że); ncp(str,żeby2); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {np(dat)}
przypomnieć się: perf: {np(dat)} + {or}
przypomnieć się: perf: {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
przypomnieć się: perf: subj{cp(int); cp(że)} + {np(dat)}
przypomnieć się: perf: subj{cp(jak)} + {np(dat)}
przypomnieć się: perf: subj{np(str)} + {np(dat)} + {or}
przyprawiać: imperf: subj{np(str); ncp(str,że)} + {np(str)} + {prepnp(o,acc)}
przyprawiać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)} + {prepnp(o,acc)}
przyprawiać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(o,acc)} + {refl}
przyprawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przyprawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyprawić: perf: subj{np(str); ncp(str,że)} + {np(str)} + {prepnp(o,acc)}
przyprawić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)} + {prepnp(o,acc)}
przyprawić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(o,acc)} + {refl}
przyprawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przyprawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyprowadzać: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przyprowadzać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
przyprowadzać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyprowadzać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,acc)}
przyprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
przyprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,acc)}
przypuszczać: imperf: subj{np(str)} + {advp(pron)}
przypuszczać: imperf: subj{np(str)} + {cp(int)}
przypuszczać: imperf: subj{np(str)} + {cp(że)}
przypuszczać: imperf: subj{np(str)} + {cp(żeby2)}
przypuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przypuszczać: imperf: subj{np(str)} + {or}
przypuścić: perf: subj{np(str)} + {advp(pron)}
przypuścić: perf: subj{np(str)} + {cp(int)}
przypuścić: perf: subj{np(str)} + {cp(że)}
przypuścić: perf: subj{np(str)} + {cp(żeby2)}
przypuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przypuścić: perf: subj{np(str)} + {or}
przyrównać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyrównać: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
przyrównywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przyrównywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
przyrównywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
przyrównywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {refl}
przyrządzać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
przyrządzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
przyrządzić: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
przyrządzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
przyrządzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przyrzec: perf: subj,controller{np(str)} + controllee{infp(_)} + {np(dat)}
przyrzec: perf: subj{np(str)} + {np(dat)} + {or}
przyrzec: perf: subj{np(str)} + obj{np(dat)} + {cp(że)}
przyrzec: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
przyrzekać: perf: subj,controller{np(str)} + controllee{infp(_)} + {np(dat)}
przyrzekać: perf: subj{np(str)} + {np(dat)} + {or}
przyrzekać: perf: subj{np(str)} + obj{np(dat)} + {cp(że)}
przyrzekać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
przysiadać: imperf: subj{np(str)} + {lexnp(gen,_,'fałd',natr)}
przysiadać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
przysiadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przysiadać: imperf: subj{np(str)} + {prepnp(do,gen)}
przysiadać się: imperf: subj{np(str)} + {prepnp(do,gen)}
przysiąc: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że); infp(_)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
przysiąc: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
przysiąść: perf: subj{np(str)} + {lexnp(gen,_,'fałd',natr)}
przysiąść: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
przysiąść: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przysiąść: perf: subj{np(str)} + {prepnp(do,gen)}
przysiąść: perf: subj{np(str)} + {xp(adl)}
przysiąść się: perf: subj{np(str)} + {prepnp(do,gen)}
przysłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przysłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
przysłaniać: imperf: subj{np(str)} + {np(inst)} + {refl}
przysłaniać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
przysłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przysłonić: perf: subj{np(str)} + {np(inst)} + {refl}
przysłonić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
przysłonić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przysłuchiwać się: imperf: subj{np(str)} + {cp(int)}
przysłuchiwać się: imperf: subj{np(str)} + {cp(jak)}
przysłuchiwać się: imperf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,jak)}
przysługiwać: imperf: subj{np(str)} + {np(dat)}
przysłużyć się: perf: subj{np(str)} + {np(dat); ncp(dat,że); ncp(dat,żeby)} + {np(inst); ncp(inst,że)} + {prepnp(w,loc)}
przysłużyć się: perf: subj{np(str)} + {np(inst)} + {cp(że)}
przysłużyć się: perf: subj{np(str)} + {np(inst)} + {cp(żeby)}
przysparzać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(gen)}
przysparzać: imperf: subj{np(str)} + {np(dat)} + {np(gen)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przyspieszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(o,acc)}
przyspieszać: imperf: subj{np(str)} + {np(gen)}
przyspieszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przyspieszyć: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(o,acc)}
przyspieszyć: perf: subj{np(str)} + {np(gen)}
przyspieszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(str)}
przysporzyć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(gen)}
przysporzyć: perf: subj{np(str)} + {np(dat)} + {np(gen)} + {np(inst); ncp(inst,int); ncp(inst,że)}
przystać: perf: {np(dat)} + {advp(pron)}
przystać: perf: subj,controllee{infp(_)} + controller{np(dat)}
przystać: perf: subj{cp(żeby)} + {np(dat)}
przystać: perf: subj{np(str)} + {np(dat)}
przystać: perf: subj{np(str)} + {prepnp(do,gen)}
przystać: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
przystanąć: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,że)}
przystanąć: perf: subj{np(str)} + {xp(locat)}
przystawać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że)}
przystawać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
przystawać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,że)}
przystawać: imperf: subj{np(str)} + {xp(locat)}
przystawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przystawiać się: imperf: subj{np(str)} + {prepnp(do,gen)}
przystawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
przystawić się: perf: subj{np(str)} + {prepnp(do,gen)}
przystąpić: perf: subj{np(str)} + {prepnp(do,gen)}
przystępować: imperf: subj{np(str)} + {prepnp(do,gen)}
przystosować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przystosować się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przysunąć: perf: subj{np(str)} + obj{np(str)} + {advp(misc)}
przysunąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
przysunąć się: perf: subj{np(str)} + {advp(misc)}
przysunąć się: perf: subj{np(str)} + {prepnp(do,gen)}
przysuwać: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
przysuwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
przysuwać się: imperf: subj{np(str)} + {advp(misc)}
przysuwać się: imperf: subj{np(str)} + {prepnp(do,gen)}
przyswajać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
przyswajać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przyswajać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
przyswoić: perf: subj{np(str)} + {np(dat)} + {cp(int)}
przyswoić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przyswoić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
przysyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przysyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przysyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
przysyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)}
przysyłać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
przysyłać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
przyszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przyśnić się: perf: subj{cp(int)} + {np(dat)}
przyśnić się: perf: subj{cp(jak)} + {np(dat)}
przyśnić się: perf: subj{cp(że)} + {np(dat)}
przyśnić się: perf: subj{np(str)} + {np(dat)}
przyśpieszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(o,acc)}
przyśpieszać: imperf: subj{np(str)} + {np(gen)}
przyśpieszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przyśpieszyć: perf: subj{np(str)} + {np(gen)}
przyśpieszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przyśpieszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
przyświecać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(w,loc)}
przyświecać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
przytaczać: imperf: subj{np(str)} + controller{cp(że)}
przytaczać: imperf: subj{np(str)} + controller{ncp(str,że)}
przytaczać: imperf: subj{np(str)} + controller{np(str)} + controllee{prepnp(jako,str)}
przytaczać: imperf: subj{np(str)} + {cp(int)}
przytaczać: imperf: subj{np(str)} + obj{np(str)} + {or}
przytaczać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przytakiwać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
przytakiwać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {or}
przytaknąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
przytaknąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {refl}
przytknąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przytknąć: perf: subj{np(str)} + {np(dat)} + {or}
przytknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przytknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
przytłaczać: imperf: subj{ncp(str,że)} + obj{np(str)}
przytłaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
przytłaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przytoczyć: perf: subj{np(str)} + controller{cp(że)} + controllee{prepnp(jako,str)}
przytoczyć: perf: subj{np(str)} + controller{ncp(str,że)} + controllee{prepnp(jako,str)}
przytoczyć: perf: subj{np(str)} + controller{np(str)} + controllee{prepnp(jako,str)}
przytoczyć: perf: subj{np(str)} + {cp(int)}
przytoczyć: perf: subj{np(str)} + obj{np(str)} + {or}
przytoczyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
przytoczyć się: perf: subj{np(str)} + {prepnp(do,gen)}
przytoczyć się: perf: subj{np(str)} + {xp(adl)}
przytrafiać się: imperf: subj,controllee{infp(_)} + controller{np(dat)}
przytrafiać się: imperf: subj{cp(że)} + {np(dat)}
przytrafiać się: imperf: subj{np(str)} + {np(dat)}
przytrafić się: perf: subj,controllee{infp(_)} + controller{np(dat)}
przytrafić się: perf: subj{cp(że)} + {np(dat)}
przytrafić się: perf: subj{np(str)} + {np(dat)}
przytrzymać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc)} + {xp(locat)}
przytrzymać się: perf: subj{np(str)} + {np(gen)}
przytrzymywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc)} + {xp(locat)}
przytrzymywać się: imperf: subj{np(str)} + {np(gen)}
przytulać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
przytulać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przytulać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
przytulać: imperf: subj{np(str)} + {prepnp(u,gen)} + {refl}
przytulić: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
przytulić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przytulić: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
przytulić: perf: subj{np(str)} + {prepnp(u,gen)} + {refl}
przytyć: perf: subj{np(str)} + {comprepnp(z powodu)} + {advp(misc)}
przytyć: perf: subj{np(str)} + {np(str)} + {prepnp(na,loc)}
przytyć: perf: subj{np(str)} + {np(str)} + {prepnp(po,loc)}
przytyć: perf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
przytyć: perf: subj{np(str)} + {prepnp(o,acc)}
przytyć się: perf: {np(dat)} + {prepnp(na,loc)}
przytyć się: perf: {np(dat)} + {prepnp(w,loc)}
przywiązać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(za,acc)} + {refl}
przywiązać: perf: subj{np(str)} + {np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przywiązać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(za,acc)}
przywiązać się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przywiązywać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(za,acc)} + {refl}
przywiązywać: imperf: subj{np(str)} + {np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przywiązywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(za,acc)}
przywiązywać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przywierać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przywieść: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(na,acc,sg,'myśl',natr)}
przywieść: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {preplexnp(na,acc,sg,'myśl',natr)}
przywieść: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,że)}
przywieść: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
przywieźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
przywieźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {xp(abl)}
przywieźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
przywieźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {xp(adl)}
przywitać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
przywitać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
przywitać się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
przywodzić: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(na,acc,sg,'myśl',natr)}
przywodzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {preplexnp(na,acc,sg,'myśl',natr)}
przywodzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,że)}
przywodzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
przywołać: perf: subj{np(str)} + controller{cp(że)} + controllee{prepnp(jako,str)}
przywołać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przywołać: perf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepnp(jako,str)}
przywołać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przywołać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przywołać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
przywoływać: imperf: subj{np(str)} + controller{cp(że)} + controllee{prepnp(jako,str)}
przywoływać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przywoływać: imperf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepnp(jako,str)}
przywoływać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przywoływać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przywoływać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
przywozić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(od,gen)}
przywozić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
przywracać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przywracać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
przywracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przywracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przywrócić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
przywrócić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
przywrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
przywrócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
przywrzeć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
przywyknąć: perf: subj,controller{np(str)} + controllee{infp(imperf)}
przywyknąć: perf: subj{np(str)} + {cp(że)}
przywyknąć: perf: subj{np(str)} + {cp(żeby)}
przywyknąć: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przyznać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przyznać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
przyznać: perf: subj{np(str)} + {or}
przyznać się: perf: subj{np(str)} + {np(dat)} + {cp(int)}
przyznać się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
przyznać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby2)}
przyznać się: perf: subj{np(str)} + {or}
przyznawać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przyznawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
przyznawać: imperf: subj{np(str)} + {or}
przyznawać się: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
przyznawać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
przyznawać się: imperf: subj{np(str)} + {np(dat)} + {prepncp(do,gen,int)}
przyznawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,że)}
przyznawać się: imperf: subj{np(str)} + {or}
przyzwalać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)} + {np(inst)}
przyzwalać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
przyzwalać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
przyzwyczaić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(imperf)}
przyzwyczaić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
przyzwyczaić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przyzwyczaić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przyzwyczaić się: perf: subj,controller{np(str)} + controllee{infp(imperf)}
przyzwyczaić się: perf: subj{np(str)} + {cp(że)}
przyzwyczaić się: perf: subj{np(str)} + {cp(żeby)}
przyzwyczaić się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przyzwyczajać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(imperf)}
przyzwyczajać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
przyzwyczajać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
przyzwyczajać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przyzwyczajać się: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
przyzwyczajać się: imperf: subj{np(str)} + {cp(że)}
przyzwyczajać się: imperf: subj{np(str)} + {cp(żeby)}
przyzwyczajać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
przyzywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
przyzywać: imperf: subj{np(str)} + obj{np(gen)} + {np(inst)}
przyzywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
przyzywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
psioczyć: imperf: subj{np(str)} + {comprepnp(na temat)}
psioczyć: imperf: subj{np(str)} + {cp(int)}
psioczyć: imperf: subj{np(str)} + {cp(że)}
psioczyć: imperf: subj{np(str)} + {or}
psioczyć: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
pstryknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
pstryknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
pstryknąć: perf: subj{np(str)} + {np(inst)} + {xp(adl)} + {refl}
pstryknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
pstryknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pstryknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
pstryknąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
pstryknąć: perf: subj{np(str)} + {prepnp(o,acc)}
pstryknąć: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
pstryknąć: perf: subj{np(str)} + {xp(adl)}
psuć: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
psuć się: imperf: subj{np(str)} + {np(dat)} + {comprepnp(z powodu)}
psuć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
publikować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
publikować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
puchnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
puchnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
puchnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
pudłować: imperf: subj{np(str)} + {np(inst)}
pudłować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
pukać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
pukać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(z,inst)}
pukać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pukać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
pukać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
pukać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
pukać się: imperf: subj{np(str)} + {prepnp(z,inst)}
puknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
puknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
puknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
puknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
puknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
puknąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
puknąć się: perf: subj{np(str)} + {prepnp(z,inst)}
pulsować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
pustoszeć: imperf: subj{np(str)} + {prepnp(z,gen)}
puszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
puszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
puszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
puszczać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
puszczać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
puszczać się: imperf: subj{np(str)} + {np(gen)}
puszczać się: imperf: subj{np(str)} + {prepnp(w,acc)}
puszyć się: imperf: subj{np(str)} + {cp(że)} + {xp(mod)}
puszyć się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(mod)}
puścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
puścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
puścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
puścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
puścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
puścić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
puścić się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
puścić się: perf: subj{np(str)} + {np(gen)}
puścić się: perf: subj{np(str)} + {prepnp(do,gen)}
puścić się: perf: subj{np(str)} + {prepnp(w,acc)}
puścić się: perf: subj{np(str)} + {xp(adl)}
pysznić się: imperf: subj{np(str)} + {cp(że)}
pysznić się: imperf: subj{np(str)} + {np(inst)}
pysznić się: imperf: subj{np(str)} + {prepnp(na,loc)}
pysznić się: imperf: subj{np(str)} + {prepnp(w,loc)}
pytać: imperf: subj{np(str)} + obj{np(gen)} + {or}
pytać: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
pytać: imperf: subj{np(str)} + obj{np(str)} + {or}
pytać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
pytać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
pytać się: imperf: subj{np(str)} + {np(gen)} + {or}
pytać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
rabować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rabować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rabować: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
rachować: imperf: subj{np(str)} + {cp(int)}
rachować: imperf: subj{np(str)} + {cp(że)}
rachować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rachować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rachować: imperf: subj{np(str)} + {prepnp(do,gen)}
rachować: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
rachować się: imperf: subj{np(str)} + {prepnp(z,inst)}
raczkować: imperf: subj{np(str)} + {prepnp(na,loc)}
raczkować: imperf: subj{np(str)} + {prepnp(w,loc)}
raczkować: imperf: subj{np(str)} + {xp(locat)}
raczkować: imperf: subj{np(str)} + {xp(mod)}
raczyć: imperf: subj,controller{np(str)} + controllee{infp(_)}
raczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
raczyć się: imperf: subj{np(str)} + {np(inst)}
radować: imperf: subj{cp(że)} + {np(str)}
radować: imperf: subj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)} + {np(str)}
radować się: imperf: subj{np(str)} + {cp(że)}
radować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
radować się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
radzić: imperf: subj{np(str)} + {comprepnp(na temat)}
radzić: imperf: subj{np(str)} + controller{np(dat)} + controllee{cp(żeby); infp(_)}
radzić: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
radzić: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
radzić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
radzić: imperf: subj{np(str)} + {np(dat)} + {or}
radzić: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)}
radzić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int)}
radzić: imperf: subj{np(str)} + {prepnp(z,inst)} + {lexnp(dat,_,'siebie',natr)}
radzić się: imperf: subj{np(str)} + {np(gen)} + {cp(int)}
radzić się: imperf: subj{np(str)} + {np(gen)} + {prepnp(w,loc)}
radzić się: imperf: subj{np(str)} + {prepnp(u,gen)}
ranić: imperf: subj{cp(gdy)} + {np(str)}
ranić: imperf: subj{cp(jak)} + {np(str)}
ranić: imperf: subj{cp(jeśli)} + {np(str)}
ranić: imperf: subj{cp(kiedy)} + {np(str)}
ranić: imperf: subj{cp(że)} + {np(str)}
ranić: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(w,acc)}
ranić: _: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
ranić: _: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
ranić się: _: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
ranić się: _: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,acc)}
ratować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(od,gen)}
ratować: imperf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int)}
ratować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przed,inst)}
ratować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ratować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ratować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że); ncp(inst,żeby)}
ratować się: imperf: subj{np(str)} + {prepnp(od,gen)}
ratować się: imperf: subj{np(str)} + {prepnp(przed,inst)}
ratować się: imperf: subj{np(str)} + {prepnp(w,loc)}
ratować się: imperf: subj{np(str)} + {prepnp(z,gen)}
ratyfikować: _: subj{np(str)} + obj{np(str)} + {np(inst)}
razić: imperf: subj{cp(gdy)} + {np(str)}
razić: imperf: subj{cp(jak)} + {np(str)}
razić: imperf: subj{cp(jeśli)} + {np(str)}
razić: imperf: subj{cp(kiedy)} + {np(str)}
razić: imperf: subj{cp(że)} + {np(str)}
razić: imperf: subj{np(str); ncp(str,gdy); ncp(str,jak); ncp(str,jeśli); ncp(str,kiedy); ncp(str,że)} + {np(str)} + {prepnp(w,loc)}
razić: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)}
razić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
razić: _: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
razić: _: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rąbnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
rąbnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
rąbnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
rąbnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rąbnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
rąbnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
rąbnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rąbnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rąbnąć: perf: subj{np(str)} + {or}
rąbnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
rąbnąć: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
rąbnąć: perf: subj{np(str)} + {xp(adl)}
rąbnąć: perf: subj{np(str)} + {xp(locat)}
rąbnąć: perf: {xp(locat)}
rąbnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
rąbnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
rąbnąć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
reagować: imperf: subj{np(str)} + controller{prepnp(na,acc); prepncp(na,acc,jak); prepncp(na,acc,że)} + controllee{xp(mod)}
reagować: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc); prepncp(na,acc,jak); prepncp(na,acc,że)}
reagować: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int)}
reagować: imperf: subj{np(str)} + {prepnp(z,inst)}
reaktywować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(temp)}
reaktywować się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(temp)}
realizować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
realizować się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
realizować się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
recenzować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
recenzować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
recenzować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
recenzować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
recenzować: imperf: subj{np(str)} + obj{np(str)} + {or}
recytować: imperf: subj{np(str)} + obj{np(str)}
recytować: imperf: subj{np(str)} + {or}
redagować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
redukować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
redukować się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
referować: imperf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)} + {nonch}
referować: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
referować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
referować: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
referować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
referować: imperf: subj{np(str)} + {or}
reformować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
reformować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'kąt',natr)}
reformować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)} + {xp(mod)}
reformować: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
reformować: imperf: subj{np(str)} + {xp(mod)} + {refl}
regenerować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
regenerować się: imperf: subj{np(str)} + {np(dat)}
regulować: imperf: subj{np(str)} + obj{lexnp(str,pl,'rachunek',atr)} + {prepnp(z,inst)}
regulować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
regulować się: imperf: subj{np(str)}
rejestrować: imperf: subj{np(str)} + {cp(int)}
rejestrować: imperf: subj{np(str)} + {cp(jak)}
rejestrować: imperf: subj{np(str)} + {cp(że)}
rejestrować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rejestrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
rejestrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rejestrować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rejestrować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rejestrować się: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
rejestrować się: imperf: subj{np(str)} + {prepnp(na,acc)} + {refl}
rejestrować się: imperf: subj{np(str)} + {xp(locat)} + {refl}
reklamować: imperf: subj{np(str)} + {cp(że)} + {refl}
reklamować: imperf: subj{np(str)} + {np(dat)} + {refl}
reklamować: imperf: subj{np(str)} + {np(inst)} + {refl}
reklamować: imperf: subj{np(str)} + obj{ncp(str,że)}
reklamować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
reklamować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
reklamować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
reklamować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
reklamować: imperf: subj{np(str)} + {or} + {refl}
reklamować: imperf: subj{np(str)} + {prepnp(od,gen)} + {refl}
reklamować: imperf: subj{np(str)} + {xp(locat)} + {refl}
rekomendować: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)} + {refl}
rekomendować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {refl}
rekomendować: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
rekomendować: imperf: subj{np(str)} + {np(dat)} + {infp(_)}
rekomendować: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {refl}
rekomendować: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {refl}
rekomendować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
rekomendować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
rekomendować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
rekomendować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rekomendować: imperf: subj{np(str)} + {or}
rekomendować: imperf: subj{np(str)} + {or} + {refl}
rekompensować: imperf: subj{np(str); ncp(str,że)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
rekonstruować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rekonstruować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,sg,'podstawa',ratr)}
rekonstruować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
rekonstruować: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
rekrutować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(spośród,gen)}
rekrutować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
rekrutować się: imperf: subj{np(str)} + {prepnp(do,gen)}
rekrutować się: imperf: subj{np(str)} + {prepnp(spośród,gen)}
rekrutować się: imperf: subj{np(str)} + {prepnp(z,gen)}
rekrutować się: imperf: subj{np(str)} + {xp(abl)}
relacjonować: imperf: subj{np(str)} + {cp(int)}
relacjonować: imperf: subj{np(str)} + obj{cp(że)}
relacjonować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
remontować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
remontować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
reperować: imperf: subj{np(str)} + {np(dat)} + {np(str)}
reperować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
replikować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
replikować: imperf: subj{np(str)} + {np(dat)} + {or}
replikować się: imperf: subj{np(str)} + {advp(misc)}
replikować się: imperf: subj{np(str)} + {xp(locat)}
reprezentować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
respektować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
rewidować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rezerwować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rezerwować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
rezerwować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rezydować: imperf: subj{np(str)} + {prepnp(jako,str)} + {xp(locat)}
rezydować: imperf: subj{np(str)} + {xp(locat)} + {xp(mod)}
rezygnować: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że); prepncp(z,gen,żeby)}
reżyserować: imperf: subj{np(str)} + {np(inst)}
reżyserować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
reżyserować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
reżyserować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
ręczyć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
ręczyć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc)} + {cp(że)}
ręczyć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
robić: imperf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
robić: imperf: subj{np(str)} + {cp(że)} + {advp(misc)}
robić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
robić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {advp(misc)}
robić: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {lexnp(str,sg,'wrażenie',atr)}
robić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
robić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
robić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
robić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
robić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
robić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
robić: imperf: subj{np(str)} + {prepnp(przy,loc)}
robić: imperf: subj{np(str)} + {prepnp(w,acc)}
robić: imperf: subj{np(str)} + {prepnp(z,gen)} + {nonch} + {lexnp(dat,_,'siebie',natr)}
robić się: imperf: {np(dat)} + {advp(misc)}
robić się: imperf: {prepnp(z,inst)} + {advp(misc)}
robić się: imperf: subj,controller{np(str)} + controllee{adjp(pred)}
robić się: imperf: subj,controller{np(str)} + controllee{np(inst)}
robić się: imperf: subj,controller{np(str)} + controllee{prepnp(na,acc)}
robić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
robić się: imperf: subj{np(str)} + {prepnp(z,gen)}
robić się: imperf: {xp(locat)} + {advp(misc)}
rodzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
rodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rodzić się: imperf: subj,controller{np(str)} + controllee{adjp(inst)}
rodzić się: imperf: subj,controller{np(str)} + controllee{adjp(pred)} + {np(dat)}
rodzić się: imperf: subj{np(str)} + {np(dat)}
rodzić się: imperf: subj{np(str)} + {preplexnp(na,loc,sg,'kamień',natr)}
rodzić się: imperf: subj{np(str)} + {prepnp(u,gen)}
rodzić się: imperf: subj{np(str)} + {prepnp(w,loc)}
rodzić się: imperf: subj{np(str)} + {prepnp(z,gen)}
roić: imperf: subj{np(str)} + {cp(że)}
roić: imperf: subj{np(str)} + {np(str)}
roić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że); prepncp(o,loc,żeby)}
roić się: imperf: {np(dat)} + {prepnp(od,gen)} + {preplexnp(w,loc,_,'głowa',natr)}
roić się: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
roić się: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
roić się: imperf: subj{E} + {prepnp(od,gen)} + {xp(locat)}
roić się: imperf: subj{np(str)} + {np(dat)} + {preplexnp(po,loc,_,'głowa',natr)}
roić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
roić się: imperf: subj{np(str)} + {prepnp(od,gen)}
rokować: imperf: subj{np(str)} + {comprepnp(na temat)}
rokować: imperf: subj{np(str)} + {comprepnp(w kwestii)}
rokować: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(na,acc)} + {advp(misc)}
rokować: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
rokować: imperf: subj{np(str)} + {np(dat)} + {np(str)}
rokować: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
rokować: imperf: subj{np(str)} + {prepnp(o,loc)}
rokować: imperf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(z,inst)}
rokować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
romansować: imperf: subj{np(str)} + {prepnp(z,inst)}
rosnąć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
rosnąć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rosnąć: imperf: subj{np(str)} + {prepnp(w,acc)}
rozbić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozbić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
rozbić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
rozbić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(o,acc)}
rozbić się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)} + {prepnp(w,acc)}
rozbić się: perf: subj{np(str)} + {np(inst)}
rozbić się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
rozbić się: perf: subj{np(str)} + {xp(locat)}
rozbiec się: perf: subj{np(str)} + {fixed('na prawo i lewo')}
rozbiec się: perf: subj{np(str)} + {prepnp(po,loc)}
rozbiec się: perf: subj{np(str)} + {prepnp(w,loc)}
rozbiec się: perf: subj{np(str)} + {xp(adl)} + {xp(mod)}
rozbiegać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
rozbiegać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(przed,inst)}
rozbiegać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
rozbiegać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
rozbiegać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozbierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozbierać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(do,gen,sg,'rosół',natr)}
rozbierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozbierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rozbierać: imperf: subj{np(str)} + {preplexnp(do,gen,sg,'rosół',natr)} + {refl}
rozbierać: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
rozbijać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozbijać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
rozbijać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
rozbijać się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(o,acc)}
rozbijać się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)} + {prepnp(w,acc)}
rozbijać się: perf: subj{np(str)} + {np(inst)}
rozbijać się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
rozbijać się: perf: subj{np(str)} + {xp(locat)}
rozbrajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozbrajać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rozbrajać się: imperf: subj{np(str)}
rozbroić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozbroić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rozbroić się: perf: subj{np(str)}
rozbrzmiewać: imperf: subj{np(str)} + {np(inst)}
rozbrzmiewać: imperf: subj{np(str)} + {xp(locat)}
rozbudować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozbudować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozbudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozbudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
rozbudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
rozbudować: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rozbudować się: perf: subj{np(str)} + {xp(adl)}
rozbudować się: perf: subj{np(str)} + {xp(locat)}
rozbudzać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
rozbudzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
rozbudzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
rozbudzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
rozbudzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(wśród,gen)}
rozbudzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
rozbudzać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozbudzać się: imperf: subj{np(str)} + {prepnp(z,gen)}
rozbudzić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
rozbudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
rozbudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
rozbudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
rozbudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
rozbudzić się: perf: subj{np(str)} + {prepnp(do,gen)}
rozbudzić się: perf: subj{np(str)} + {prepnp(z,gen)}
rozchodzić: perf: subj{np(str)} + obj{np(str)}
rozchodzić się: imperf: {np(dat)} + {prepnp(o,acc); prepncp(o,acc,że); prepncp(o,acc,żeby)}
rozchodzić się: imperf: subj{np(str)} + {prepnp(z,inst)}
rozchodzić się: imperf: subj{np(str)} + {xp(adl)}
rozchodzić się: imperf: subj{np(str)} + {xp(perl)}
rozchodzić się: perf: subj{np(str)}
rozchylić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
rozchylić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(mod)}
rozchylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
rozchylić się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
rozchylić się: perf: subj{np(str)} + {xp(locat)} + {xp(mod)}
rozciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
rozciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
rozciąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozciągać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
rozciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
rozciągać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rozciągać się: imperf: subj{np(str)} + {prepnp(na,acc)}
rozciągać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozciągać się: imperf: subj{np(str)} + {xp(abl)}
rozciągać się: imperf: subj{np(str)} + {xp(locat)}
rozciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
rozciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
rozciągnąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rozciągnąć się: perf: subj{np(str)} + {prepnp(na,acc)}
rozciągnąć się: perf: subj{np(str)} + {prepnp(w,loc)}
rozciągnąć się: perf: subj{np(str)} + {xp(abl)}
rozciągnąć się: perf: subj{np(str)} + {xp(locat)}
rozcierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozcierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
rozcierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozcierać się: imperf: subj{np(str)} + {np(dat)}
rozcinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozcinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
rozcinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
rozcinać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozczarować: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
rozczarować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
rozczarować się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
rozczarować się: perf: subj{np(str)} + {prepnp(do,gen)}
rozczulać: imperf: subj{cp(gdy)} + {np(str)}
rozczulać: imperf: subj{cp(int)} + {np(str)}
rozczulać: imperf: subj{cp(jak)} + {np(str)}
rozczulać: imperf: subj{cp(jeśli)} + {np(str)}
rozczulać: imperf: subj{cp(kiedy)} + {np(str)}
rozczulać: imperf: subj{cp(że)} + {np(str)}
rozczulać: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(str)}
rozczulać: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
rozczulać się: imperf: subj{np(str)} + {comprepnp(z powodu)}
rozczulać się: imperf: subj{np(str)} + {cp(int)}
rozczulać się: imperf: subj{np(str)} + {cp(że)}
rozczulać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
rozczulać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)} + {or}
rozdać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {lexnp(inst,sg,'ręka',atr)}
rozdać: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozdać: perf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
rozdawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {lexnp(inst,sg,'ręka',atr)}
rozdawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozdawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
rozdzielać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozdzielać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozdzielać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
rozdzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozdzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
rozdzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
rozdzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
rozdzielać się: imperf: subj{np(str)} + {prepnp(na,acc)}
rozdzielać się: imperf: subj{np(str)} + {prepnp(z,inst)}
rozdzielić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozdzielić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
rozdzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozdzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,inst)}
rozdzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
rozdzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
rozdzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
rozdzielić się: perf: subj{np(str)} + {prepnp(na,acc)}
rozdzielić się: perf: subj{np(str)} + {prepnp(z,inst)}
rozdzierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozdzierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozdzierać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozdzierać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozdzierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
rozdzierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
rozebrać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozebrać: perf: subj{np(str)} + obj{np(str)} + {preplexnp(do,gen,sg,'rosół',natr)}
rozebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rozebrać: perf: subj{np(str)} + {preplexnp(do,gen,sg,'rosół',natr)} + {refl}
rozebrać: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
rozedrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozedrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozedrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozedrzeć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozedrzeć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
rozedrzeć się: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
rozegrać: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
rozegrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
rozegrać: perf: subj{np(str)} + obj{np(str)} + {xp(temp)}
rozegrać się: perf: subj{np(str)} + {xp(locat)} + {xp(temp)}
rozejrzeć się: perf: subj{np(str)} + {cp(int)} + {xp(adl)}
rozejrzeć się: perf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
rozejrzeć się: perf: subj{np(str)} + {prepnp(po,loc); xp(locat)} + {prepnp(za,inst); prepncp(za,inst,int); prepncp(za,inst,żeby)}
rozejrzeć się: perf: subj{np(str)} + {prepnp(w,loc)}
rozejść się: perf: subj{cp(że)}
rozejść się: perf: subj{np(str)} + {prepnp(z,inst)}
rozejść się: perf: subj{np(str)} + {xp(adl)}
rozejść się: perf: subj{np(str)} + {xp(perl)}
rozerwać: perf: {np(dat)} + {np(str)}
rozerwać: perf: {np(str)} + {prepnp(na,acc)}
rozerwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozerwać się: perf: subj{np(str)} + {prepnp(na,acc)}
roześmiać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {cp(że)}
roześmiać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {or}
roześmiać się: perf: subj{np(str)} + {np(inst)}
roześmiać się: perf: subj{np(str)} + {prepnp(z,gen)}
rozgadać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
rozgadać: perf: subj{np(str)} + {np(dat)} + {cp(jak)}
rozgadać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
rozgadać: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
rozgadać: perf: subj{np(str)} + {np(dat)} + {or}
rozgadać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
rozgadać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozgadać się: imperf: subj{np(str)} + {comprepnp(na temat)}
rozgadać się: imperf: subj{np(str)} + {cp(int)}
rozgadać się: imperf: subj{np(str)} + {cp(jak)}
rozgadać się: imperf: subj{np(str)} + {cp(że)}
rozgadać się: imperf: subj{np(str)} + {or}
rozgadać się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
rozglądać się: imperf: subj{np(str)} + {cp(int)} + {xp(adl)}
rozglądać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
rozglądać się: imperf: subj{np(str)} + {prepnp(po,loc); xp(locat)} + {prepnp(za,inst); prepncp(za,inst,int); prepncp(za,inst,żeby)}
rozglądać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozgłaszać: imperf: subj{np(str)} + {cp(int)} + {xp(locat)}
rozgłaszać: imperf: subj{np(str)} + {cp(że)} + {xp(locat)}
rozgłaszać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
rozgłaszać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
rozgłaszać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
rozgłaszać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(wśród,gen)}
rozgłaszać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {xp(locat)}
rozgłaszać: imperf: subj{np(str)} + {or}
rozgłaszać: imperf: subj{np(str)} + {prepnp(wśród,gen)} + {cp(int)}
rozgłaszać: imperf: subj{np(str)} + {prepnp(wśród,gen)} + {cp(że)}
rozgniewać: perf: subj{cp(że); ncp(str,że)} + {np(str)}
rozgniewać: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
rozgniewać się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
rozgniewać się: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
rozgniewać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
rozgniewać się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
rozgościć się: perf: subj{np(str)} + {prepnp(u,gen)}
rozgościć się: perf: subj{np(str)} + {xp(locat)}
rozgromić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozgromić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rozgrywać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
rozgrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
rozgrywać: imperf: subj{np(str)} + obj{np(str)} + {xp(temp)}
rozgrywać się: imperf: subj{np(str)} + {xp(locat)} + {xp(temp)}
rozgryźć: perf: subj{np(str)} + {cp(int)}
rozgryźć: perf: subj{np(str)} + {cp(że)}
rozgryźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozgrzać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozgrzać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
rozgrzać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
rozgrzać się: perf: subj{np(str)} + {np(inst)}
rozgrzeszać: imperf: subj{np(str)} + {cp(że)} + {refl}
rozgrzeszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)}
rozgrzeszać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen); prepncp(z,gen,że)} + {refl}
rozgrzeszać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
rozgrzeszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen); prepncp(z,gen,że)}
rozgrzewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozgrzewać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
rozgrzewać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
rozgrzewać się: imperf: subj{np(str)} + {np(inst)}
rozjaśniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozjaśniać się: imperf: {np(dat)} + {xp(locat)}
rozjaśniać się: imperf: subj{np(str)} + {np(dat)}
rozjaśnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozjaśnić się: perf: {np(dat)} + {xp(locat)}
rozjaśnić się: perf: subj{np(str)} + {np(dat)}
rozjechać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozjechać się: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
rozjechać się: perf: subj{np(str)} + {xp(adl)}
rozjeżdżać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozjeżdżać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
rozjeżdżać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozkazać: perf: subj,controller{np(str)} + controllee{np(str); infp(_)} + {np(dat)}
rozkazać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
rozkazać: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
rozkazać: perf: subj{np(str)} + {np(dat)} + {or}
rozkazywać: imperf: subj,controller{np(str)} + controllee{infp(_)} + {np(dat)}
rozkazywać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
rozkazywać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
rozkazywać: imperf: subj{np(str)} + {np(dat)} + {np(str)}
rozkazywać: imperf: subj{np(str)} + {np(dat)} + {or}
rozkleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozkleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
rozkleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozkleić się: perf: subj{np(str)} + {comprepnp(z powodu)}
rozkleić się: perf: subj{np(str)} + {cp(int)}
rozkleić się: perf: subj{np(str)} + {cp(że)}
rozkleić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozkleić się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rozkleić się: perf: subj{np(str)} + {or}
rozkleić się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
rozkleić się: perf: subj{np(str)} + {prepnp(w,loc)}
rozklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
rozklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozklejać się: imperf: subj{np(str)} + {comprepnp(z powodu)}
rozklejać się: imperf: subj{np(str)} + {cp(int)}
rozklejać się: imperf: subj{np(str)} + {cp(że)}
rozklejać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozklejać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rozklejać się: imperf: subj{np(str)} + {or}
rozklejać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
rozklejać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozkładać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozkładać się: imperf: subj{np(str)} + {prepnp(między,acc)}
rozkładać się: imperf: subj{np(str)} + {prepnp(na,acc)}
rozkładać się: imperf: subj{np(str)} + {xp(locat)}
rozkoszować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
rozkoszować się: imperf: subj{np(str)} + {or}
rozkręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozkręcać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozkręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozkręcić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozkwitać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozkwitnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozlać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); xp(adl); xp(locat)}
rozlać się: perf: subj{np(str)} + {prepnp(na,acc)}
rozlać się: perf: subj{np(str)} + {xp(adl); xp(locat)}
rozlec się: perf: subj{np(str)} + {xp(abl); xp(locat)} + {or}
rozlec się: perf: subj{or} + {xp(abl)}
rozlec się: perf: subj{or} + {xp(locat)}
rozlecieć się: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(locat)}
rozlecieć się: perf: subj{np(str)} + {prepnp(pod,inst)}
rozlecieć się: perf: subj{np(str)} + {prepnp(po,loc)} + {xp(mod)}
rozlecieć się: perf: subj{np(str)} + {prepnp(w,acc)}
rozlecieć się: perf: subj{np(str)} + {xp(abl)}
rozlecieć się: perf: subj{np(str)} + {xp(mod)}
rozlegać się: imperf: subj{np(str)} + {xp(abl); xp(locat)} + {or}
rozlegać się: imperf: subj{or} + {xp(abl)}
rozlegać się: imperf: subj{or} + {xp(locat)}
rozlewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); xp(adl); xp(locat)}
rozlewać się: imperf: subj{np(str)} + {prepnp(w,acc)}
rozlewać się: imperf: subj{np(str)} + {xp(adl); xp(locat)}
rozliczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
rozliczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
rozliczać się: imperf: subj{np(str)} + {prepnp(co do,gen)} + {prepnp(z,inst)}
rozliczać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen)}
rozliczać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozliczać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)} + {prepnp(z,inst)}
rozliczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc)}
rozliczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
rozliczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
rozliczyć się: perf: subj{np(str)} + {prepnp(co do,gen)} + {prepnp(z,inst)}
rozliczyć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen)}
rozliczyć się: perf: subj{np(str)} + {prepnp(w,loc)}
rozliczyć się: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)} + {prepnp(z,inst)}
rozliczyć się: perf: subj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc)}
rozluźniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozluźniać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
rozluźniać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozluźnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozluźnić się: perf: subj{np(str)} + {np(dat)}
rozładować: perf: subj{ncp(str,że)} + obj{np(str)}
rozładować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
rozładować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rozładować się: perf: subj{np(str)} + {np(dat)}
rozładowywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
rozładowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rozładowywać się: imperf: subj{np(str)} + {np(dat)}
rozłączać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozłączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
rozłączać: imperf: subj{np(str)} + {prepnp(z,inst)} + {refl}
rozłączać się: imperf: subj{np(str)} + {np(dat)}
rozłączać się: imperf: subj{np(str)} + {prepnp(z,inst)}
rozłączyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozłączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
rozłączyć: perf: subj{np(str)} + {prepnp(z,inst)} + {refl}
rozłączyć się: perf: subj{np(str)} + {np(dat)}
rozłączyć się: perf: subj{np(str)} + {prepnp(z,inst)}
rozłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozłożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozłożyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozłożyć się: perf: subj{np(str)} + {prepnp(między,acc)}
rozłożyć się: perf: subj{np(str)} + {prepnp(na,acc)}
rozłożyć się: perf: subj{np(str)} + {xp(locat)}
rozmarzać: imperf: subj{np(str)} + {np(str)}
rozmarzać się: imperf: subj{np(str)} + {cp(że)}
rozmarzać się: imperf: subj{np(str)} + {cp(żeby)}
rozmarzać się: imperf: subj{np(str)} + {or}
rozmarzać się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że); prepncp(o,loc,żeby)}
rozmarzyć: perf: subj{np(str)} + {np(str)}
rozmarzyć się: perf: subj{np(str)} + {cp(że)}
rozmarzyć się: perf: subj{np(str)} + {cp(żeby)}
rozmarzyć się: perf: subj{np(str)} + {or}
rozmarzyć się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że); prepncp(o,loc,żeby)}
rozmawiać: imperf: subj{np(str)} + {or}
rozmawiać: imperf: subj{np(str)} + {prepnp(o,loc); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(z,inst)}
rozmawiać: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
rozmawiać: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
rozmawiać: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
rozmazywać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozmazywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozmazywać: imperf: subj{np(str)} + {prepnp(od,gen)}
rozmieścić: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
rozmieścić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozmieścić się: perf: subj,controller{np(str)} + controllee{xp(mod)}
rozmieścić się: perf: subj{np(str)} + {xp(locat)}
rozmijać się: imperf: subj{np(str)} + {prepnp(z,inst)}
rozminąć się: perf: subj{np(str)} + {prepnp(z,inst)}
rozmnażać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
rozmnażać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
rozmnażać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
rozmnażać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
rozmnożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {prepnp(z,gen)}
rozmnożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
rozmnożyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {prepnp(z,gen)}
rozmnożyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
rozmówić się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
rozmówić się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {prepnp(z,inst)}
rozmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
rozmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
rozmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
rozmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
rozmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
rozmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
rozmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
rozmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {or}
rozmyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozmyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozmyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
rozmyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rozmyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozmyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozmyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rozmyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
rozmyć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozmyślać: imperf: subj{np(str)} + {cp(int)}
rozmyślać: imperf: subj{np(str)} + {cp(że)}
rozmyślać: imperf: subj{np(str)} + {or}
rozmyślać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
rozmyślać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
rozmyślać się: imperf: subj{np(str)}
rozmyślać się: imperf: subj{np(str)} + {prepnp(z,gen)}
rozmyślić się: perf: subj{np(str)}
rozmyślić się: perf: subj{np(str)} + {prepnp(z,gen)}
rozmywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozmywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozmywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
rozmywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozmywać się: imperf: subj{np(str)} + {advp(misc)}
rozmywać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
roznieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
roznieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
roznieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
roznieść się: perf: subj{np(str)} + {prepnp(po,loc)}
roznieść się: perf: subj{np(str)} + {xp(locat)}
roznosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
roznosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
roznosić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
roznosić się: imperf: subj{np(str)} + {prepnp(po,loc)}
roznosić się: imperf: subj{np(str)} + {xp(locat)}
rozpaczać: imperf: subj{np(str)} + {comprepnp(z powodu)}
rozpaczać: imperf: subj{np(str)} + {cp(int)}
rozpaczać: imperf: subj{np(str)} + {cp(że)}
rozpaczać: imperf: subj{np(str)} + {or}
rozpaczać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,że)}
rozpaczać: imperf: subj{np(str)} + {prepnp(po,loc)}
rozpadać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozpadać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rozpadać się: perf: {E}
rozpadać się: perf: subj{np(str)}
rozpakować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozpakować się: perf: subj{np(str)}
rozpakowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozpakowywać się: imperf: subj{np(str)}
rozpalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozpalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
rozpalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
rozpalać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozpalać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
rozpalać się: imperf: subj{np(str)} + {np(inst)}
rozpalać się: imperf: subj{np(str)} + {prepnp(do,gen)}
rozpalać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozpalać się: imperf: subj{np(str)} + {xp(locat)}
rozpalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozpalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
rozpalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
rozpalić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozpalić się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
rozpalić się: perf: subj{np(str)} + {np(inst)}
rozpalić się: perf: subj{np(str)} + {prepnp(do,gen)}
rozpalić się: perf: subj{np(str)} + {prepnp(w,loc)}
rozpalić się: perf: subj{np(str)} + {xp(locat)}
rozpamiętywać: imperf: subj{np(str)} + {cp(int)}
rozpamiętywać: imperf: subj{np(str)} + {cp(że)}
rozpamiętywać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
rozpamiętywać: imperf: subj{np(str)} + {or}
rozpaść się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozpaść się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rozpatrywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
rozpatrywać: imperf: subj{np(str)} + obj{cp(int)}
rozpatrywać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
rozpatrywać się: imperf: subj{np(str)} + {prepnp(po,loc)}
rozpatrywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozpatrywać się: imperf: subj{np(str)} + {xp(locat)}
rozpatrzeć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
rozpatrzeć: perf: subj{np(str)} + obj{cp(int)}
rozpatrzeć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
rozpatrzeć się: perf: subj{np(str)} + {prepnp(po,loc)}
rozpatrzeć się: perf: subj{np(str)} + {prepnp(w,loc)}
rozpatrzeć się: perf: subj{np(str)} + {xp(locat)}
rozpatrzyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
rozpatrzyć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
rozpatrzyć się: perf: subj{np(str)} + {prepnp(w,loc)}
rozpędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozpędzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
rozpędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozpędzić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
rozpętać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozpętać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
rozpętać się: perf: subj{np(str)} + {np(dat)}
rozpiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
rozpiąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(nad,inst)}
rozpiąć się: perf: subj{np(str)} + {np(dat)}
rozpiąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(nad,inst)}
rozpierzchnąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
rozpierzchnąć się: perf: subj{np(str)} + {xp(adl)}
rozpierzchnąć się: perf: subj{np(str)} + {xp(locat)}
rozpieszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozpinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
rozpinać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(nad,inst)}
rozpinać się: imperf: subj{np(str)} + {np(dat)}
rozpinać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(nad,inst)} + {xp(mod)}
rozpisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozpisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozpisać się: perf: subj{np(str)} + {comprepnp(co do)}
rozpisać się: perf: subj{np(str)} + {comprepnp(na temat)}
rozpisać się: perf: subj{np(str)} + {cp(int)}
rozpisać się: perf: subj{np(str)} + {cp(jak)}
rozpisać się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
rozpisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rozpisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozpisywać się: imperf: subj{np(str)} + {comprepnp(co do)}
rozpisywać się: imperf: subj{np(str)} + {comprepnp(na temat)}
rozpisywać się: imperf: subj{np(str)} + {cp(int)}
rozpisywać się: imperf: subj{np(str)} + {cp(jak)}
rozpisywać się: imperf: subj{np(str)} + {prepnp(o,loc); cp(że); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
rozpłynąć się: perf: subj{np(str)} + {prepnp(nad,inst)}
rozpłynąć się: perf: subj{np(str)} + {prepnp(w,loc)}
rozpłynąć się: perf: subj{np(str)} + {xp(locat)}
rozpływać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,jak); prepncp(nad,inst,że)}
rozpływać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozpływać się: imperf: subj{np(str)} + {xp(locat)}
rozpocząć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
rozpocząć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozpocząć: perf: subj{np(str)} + obj{np(str)} + {or}
rozpocząć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
rozpocząć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
rozpocząć się: perf: subj{np(str)} + {np(inst)}
rozpocząć się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
rozpocząć się: perf: subj{np(str)} + {xp(locat)}
rozpocząć się: perf: subj{np(str)} + {xp(temp)}
rozpoczynać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
rozpoczynać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozpoczynać: imperf: subj{np(str)} + obj{np(str)} + {or}
rozpoczynać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
rozpoczynać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
rozpoczynać się: imperf: subj{np(str)} + {np(inst)}
rozpoczynać się: imperf: subj{np(str)} + {or}
rozpoczynać się: imperf: subj{np(str)} + {prepnp(od,gen)}
rozpoczynać się: imperf: subj{np(str)} + {xp(locat)}
rozpoczynać się: imperf: subj{np(str)} + {xp(temp)}
rozporządzać: imperf: subj{np(str)} + {np(inst)}
rozporządzać się: imperf: subj{np(str)} + {np(inst)}
rozporządzać się: imperf: subj{np(str)} + {xp(locat)}
rozpostrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
rozpostrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
rozpostrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozpostrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
rozpostrzeć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozpostrzeć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
rozpościerać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozpościerać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozpościerać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
rozpowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
rozpowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(jak)}
rozpowiadać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
rozpowiadać: imperf: subj{np(str)} + {np(dat)} + {or}
rozpowiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
rozpowiadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozpowszechniać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozpowszechniać się: imperf: subj{np(str)} + {xp(locat)}
rozpowszechnić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozpowszechnić się: perf: subj{np(str)} + {xp(locat)}
rozpoznać: perf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {refl}
rozpoznać: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
rozpoznać: perf: subj{np(str)} + {cp(int); ncp(str,int)}
rozpoznać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
rozpoznać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
rozpoznać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
rozpoznać: perf: subj{np(str)} + {or}
rozpoznać: perf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
rozpoznać: perf: subj{np(str)} + {prepnp(po,loc)} + {cp(że)}
rozpoznać się: perf: subj{np(str)} + {prepnp(w,loc)}
rozpoznawać: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)}
rozpoznawać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
rozpoznawać: imperf: subj{np(str)} + {cp(int); ncp(str,int)}
rozpoznawać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
rozpoznawać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
rozpoznawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
rozpoznawać: imperf: subj{np(str)} + {prepnp(po,loc)} + {cp(int)}
rozpoznawać: imperf: subj{np(str)} + {prepnp(po,loc)} + {cp(że)}
rozpoznawać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozpraszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozpraszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozpraszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
rozpraszać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozpraszać się: imperf: subj{np(str)} + {prepnp(na,acc)}
rozpraszać się: imperf: subj{np(str)} + {prepnp(po,loc)}
rozpraszać się: imperf: subj{np(str)} + {xp(locat)}
rozprawiać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
rozprawiać: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
rozprawiać się: imperf: subj{np(str)} + {prepnp(z,inst)}
rozprawić się: perf: subj{np(str)} + {prepnp(z,inst)}
rozpromienić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozpromienić się: perf: subj{np(str)} + {preplexnp(na,acc,sg,'myśl',atr)}
rozpromienić się: perf: subj{np(str)} + {preplexnp(na,acc,sg,'widok',atr)}
rozpromienić się: perf: subj{np(str)} + {prepnp(od,gen)}
rozpromienić się: perf: subj{np(str)} + {prepnp(w,loc)}
rozpromienić się: perf: subj{np(str)} + {prepnp(z,gen)}
rozpromienić się: perf: subj{np(str)} + {xp(locat)}
rozproszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozproszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozproszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
rozproszyć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rozproszyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozproszyć się: perf: subj{np(str)} + {prepnp(na,acc)}
rozproszyć się: perf: subj{np(str)} + {prepnp(po,loc)}
rozproszyć się: perf: subj{np(str)} + {xp(adl)}
rozproszyć się: perf: subj{np(str)} + {xp(locat)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,inst)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {xp(perl)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pomiędzy,acc)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pomiędzy,inst)}
rozprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
rozprowadzać się: imperf: subj{np(str)} + {prepnp(po,loc)}
rozprowadzać się: imperf: subj{np(str)} + {xp(locat)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,inst)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {xp(perl)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(pomiędzy,acc)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(pomiędzy,inst)}
rozprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
rozprowadzić się: perf: subj{np(str)} + {prepnp(po,loc)}
rozprowadzić się: perf: subj{np(str)} + {xp(locat)}
rozprzestrzeniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
rozprzestrzeniać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rozprzestrzeniać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozprzestrzeniać się: imperf: subj{np(str)} + {prepnp(wśród,gen)}
rozprzestrzeniać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
rozprzestrzeniać się: imperf: subj{np(str)} + {xp(locat)}
rozprzestrzenić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
rozprzestrzenić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rozprzestrzenić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozprzestrzenić się: perf: subj{np(str)} + {prepnp(wśród,gen)}
rozprzestrzenić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
rozprzestrzenić się: perf: subj{np(str)} + {xp(locat)}
rozpuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozpuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozpuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rozpuszczać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rozpuszczać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
rozpuścić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozpuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozpuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rozpuścić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rozpuścić się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
rozpytywać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
rozpytywać: imperf: subj{np(str)} + obj{np(str)} + {or}
rozpytywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
rozpytywać: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(u,gen)}
rozpytywać: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(wśród,gen)}
rozpytywać: imperf: subj{np(str)} + {prepnp(u,gen)} + {cp(int)}
rozpytywać: imperf: subj{np(str)} + {prepnp(wśród,gen)} + {cp(int)}
rozpytywać się: imperf: subj{np(str)} + obj{np(gen)} + {cp(int)}
rozpytywać się: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(o,acc); prepncp(o,acc,int)}
rozpytywać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(u,gen)}
rozpytywać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(wśród,gen)}
rozpytywać się: imperf: subj{np(str)} + {prepnp(u,gen)} + {cp(int)}
rozpytywać się: imperf: subj{np(str)} + {prepnp(wśród,gen)} + {cp(int)}
rozrabiać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozrabiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
rozrabiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
rozrabiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
rozrabiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
rozrastać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozrastać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
rozrastać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
rozrastać się: imperf: subj{np(str)} + {xp(adl)}
rozrosnąć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozrosnąć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
rozrosnąć się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
rozrosnąć się: perf: subj{np(str)} + {xp(adl)}
rozróżniać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
rozróżniać: imperf: subj{np(str)} + {prepnp(między,inst)}
rozróżniać: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(int)}
rozróżniać: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(że)}
rozróżniać: imperf: subj{np(str)} + {prepnp(pomiędzy,inst)}
rozróżnić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
rozróżnić: perf: subj{np(str)} + {prepnp(między,inst)}
rozróżnić: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(int)}
rozróżnić: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(że)}
rozróżnić: perf: subj{np(str)} + {prepnp(pomiędzy,inst)}
rozruszać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozruszać się: perf: subj{np(str)} + {np(dat)}
rozrywać: imperf: {np(dat)} + {np(str)}
rozrywać: imperf: {np(str)} + {prepnp(na,acc)}
rozrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
rozrywać się: imperf: subj{np(str)} + {prepnp(na,acc)}
rozrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
rozrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
rozrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozrzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
rozrzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
rozrzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozsadzać: imperf: {np(dat)} + {np(str)} + {prepnp(od,gen)}
rozsadzać: imperf: {np(dat)} + {np(str)} + {prepnp(z,gen)}
rozsadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozsadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozsadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rozsadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
rozsadzić: perf: {np(dat)} + {np(str)} + {prepnp(od,gen)}
rozsadzić: perf: {np(dat)} + {np(str)} + {prepnp(z,gen)}
rozsadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozsadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozsadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rozsadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
rozsiąść się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozsiewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
rozsiewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
rozsiewać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(locat)}
rozsiewać się: imperf: subj{np(str)} + {prepnp(z,inst)}
rozsławiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {xp(locat)}
rozsławiać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {xp(locat)}
rozsławić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {xp(locat)}
rozsławić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {xp(locat)}
rozstać się: perf: subj{np(str)} + {prepnp(z,inst)}
rozstawać się: imperf: subj{np(str)} + {prepnp(z,inst)}
rozstawiać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
rozstawiać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
rozstawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozstawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
rozstawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
rozstawiać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozstawiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
rozstawić: perf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
rozstawić: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
rozstawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
rozstawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
rozstawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rozstawić się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
rozstawić się: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
rozstroić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozstroić się: perf: subj{np(str)} + {np(dat)}
rozstrzelać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
rozstrzelać się: perf: subj{np(str)}
rozstrzeliwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
rozstrzygać: imperf: subj{np(str)} + {cp(int)}
rozstrzygać: imperf: subj{np(str)} + {cp(że)}
rozstrzygać: imperf: subj{np(str)} + obj{np(str)}
rozstrzygać: imperf: subj{np(str)} + {prepncp(o,loc,int)}
rozstrzygać: imperf: subj{np(str)} + {prepncp(o,loc,że)}
rozstrzygać: imperf: subj{np(str)} + {prepnp(o,loc)}
rozstrzygać się: imperf: subj{np(str)}
rozstrzygnąć: perf: subj{np(str)} + {cp(int)}
rozstrzygnąć: perf: subj{np(str)} + obj{np(str)}
rozstrzygnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozstrzygnąć: perf: subj{np(str)} + {prepncp(o,loc,int)}
rozstrzygnąć: perf: subj{np(str)} + {prepncp(o,loc,że)}
rozstrzygnąć: perf: subj{np(str)} + {prepnp(o,loc)}
rozstrzygnąć się: perf: subj{np(str)}
rozsypać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozsypać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rozsypać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozsypać się: perf: subj{np(str)} + {prepnp(na,acc)}
rozsypać się: perf: subj{np(str)} + {prepnp(w,acc)}
rozsypać się: perf: subj{np(str)} + {xp(adl)}
rozsypać się: perf: subj{np(str)} + {xp(locat)}
rozsypywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozsypywać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rozsypywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozsypywać się: imperf: subj{np(str)} + {prepnp(na,acc)}
rozsypywać się: imperf: subj{np(str)} + {prepnp(w,acc)}
rozsypywać się: imperf: subj{np(str)} + {xp(adl)}
rozsypywać się: imperf: subj{np(str)} + {xp(locat)}
rozszerzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozszerzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
rozszerzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
rozszerzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozszerzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
rozszerzać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
rozszerzać się: imperf: subj{np(str)} + {prepnp(do,gen)}
rozszerzać się: imperf: subj{np(str)} + {prepnp(ku,dat)}
rozszerzać się: imperf: subj{np(str)} + {prepnp(na,acc)}
rozszerzać się: imperf: subj{np(str)} + {prepnp(o,acc)}
rozszerzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
rozszerzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
rozszerzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
rozszerzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozszerzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
rozszerzyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
rozszerzyć się: perf: subj{np(str)} + {np(inst)}
rozszerzyć się: perf: subj{np(str)} + {prepnp(do,gen)}
rozszerzyć się: perf: subj{np(str)} + {prepnp(ku,dat)}
rozszerzyć się: perf: subj{np(str)} + {prepnp(na,acc)}
rozszerzyć się: perf: subj{np(str)} + {prepnp(o,acc)}
rozśmieszać: imperf: subj{cp(gdy)} + {np(str)}
rozśmieszać: imperf: subj{cp(int)} + {np(str)}
rozśmieszać: imperf: subj{cp(jak)} + {np(str)}
rozśmieszać: imperf: subj{cp(jeśli)} + {np(str)}
rozśmieszać: imperf: subj{cp(kiedy)} + {np(str)}
rozśmieszać: imperf: subj{cp(że)} + {np(str)}
rozśmieszać: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,jeśli); ncp(str,kiedy); ncp(str,że)} + {np(str)}
rozśmieszać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)}
rozśmieszać: imperf: subj{np(str)} + {np(str)} + {cp(że)}
rozśmieszać: imperf: subj{np(str)} + {np(str)} + {or}
rozśmieszyć: perf: subj{cp(gdy)} + {np(str)}
rozśmieszyć: perf: subj{cp(int)} + {np(str)}
rozśmieszyć: perf: subj{cp(jak)} + {np(str)}
rozśmieszyć: perf: subj{cp(jeśli)} + {np(str)}
rozśmieszyć: perf: subj{cp(kiedy)} + {np(str)}
rozśmieszyć: perf: subj{cp(że)} + {np(str)}
rozśmieszyć: perf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,jeśli); ncp(str,kiedy); ncp(str,że)} + {np(str)}
rozśmieszyć: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {np(str)}
rozśmieszyć: perf: subj{np(str)} + {np(str)} + {or}
rozświetlać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
rozświetlać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozświetlać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(od,gen)}
rozświetlać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
rozświetlać się: imperf: subj{np(str)} + {np(dat)} + {prepadjp(od,gen)}
rozświetlić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozświetlić się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
roztaczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
roztaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
roztaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
roztaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
roztaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
roztaczać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
roztaczać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
roztaczać się: imperf: subj{np(str)} + {prepnp(nad,inst)}
roztaczać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
roztaczać się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
roztaczać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
roztaczać się: imperf: subj{np(str)} + {xp(locat)}
roztapiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
roztapiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
roztapiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
roztapiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
roztapiać się: imperf: subj{np(str)} + {prepnp(na,loc)}
roztapiać się: imperf: subj{np(str)} + {prepnp(od,gen)}
roztapiać się: imperf: subj{np(str)} + {prepnp(w,loc)}
roztopić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
roztopić: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
roztopić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
roztopić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
roztopić się: perf: subj{np(str)} + {prepnp(na,loc)}
roztopić się: perf: subj{np(str)} + {prepnp(od,gen)}
roztopić się: perf: subj{np(str)} + {prepnp(w,loc)}
roztrwonić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
roztrzaskać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
roztrzaskać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(o,acc)}
roztrzaskać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)} + {prepnp(w,acc)}
roztrzaskać się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(o,acc)}
roztrzaskać się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)} + {prepnp(w,acc)}
roztrzaskać się: perf: subj{np(str)} + {np(inst)}
roztrząsać: imperf: subj{np(str)} + {cp(int)}
roztrząsać: imperf: subj{np(str)} + {cp(że)}
roztrząsać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
roztrząsać: imperf: subj{np(str)} + {or}
rozumieć: imperf: subj{np(str)} + {np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)}
rozumieć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
rozumieć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
rozumieć: imperf: subj{np(str)} + obj{np(str)}
rozumieć: imperf: subj{np(str)} + {prepadjp(po,postp)}
rozumieć: imperf: subj{np(str)} + {prepnp(przez,acc)} + {cp(że)}
rozumieć: imperf: subj{np(str)} + {prepnp(przez,acc)} + {ncp(str,że)}
rozumieć: imperf: subj{np(str)} + {prepnp(przez,acc)} + {nonch}
rozumieć się: imperf: subj{np(str)} + {prepnp(na,loc)}
rozumieć się: imperf: subj{np(str)} + {prepnp(z,inst)}
rozumować: imperf: subj,controller{np(str)} + controllee{xp(mod)}
rozumować: imperf: subj{np(str)} + {cp(że)}
rozumować: imperf: subj{np(str)} + {np(inst)}
rozumować: imperf: subj{np(str)} + {or}
rozwalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)} + {xp(temp)}
rozwalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozwalać się: imperf: subj{np(str)} + {xp(locat)}
rozwalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)} + {xp(temp)}
rozwalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rozwalić się: perf: subj{np(str)} + {xp(locat)}
rozważać: imperf: subj{np(str)} + {cp(int)}
rozważać: imperf: subj{np(str)} + {ncp(str,int)}
rozważać: imperf: subj{np(str)} + {ncp(str,że)}
rozważać: imperf: subj{np(str)} + obj{np(str)}
rozważyć: perf: subj{np(str)} + {cp(int)}
rozważyć: perf: subj{np(str)} + obj{np(str)}
rozwiać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozwiać się: perf: subj{np(str)} + {np(dat)}
rozwiać się: perf: subj{np(str)} + {xp(adl)}
rozwiać się: perf: subj{np(str)} + {xp(locat)}
rozwiązać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
rozwiązać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozwiązać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
rozwiązać się: perf: subj,controller{np(str)} + controllee{xp(mod)}
rozwiązać się: perf: subj{np(str)} + {np(str)}
rozwiązywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
rozwiązywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozwiązywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
rozwiązywać się: imperf: subj{np(str)} + {np(inst)}
rozwiesić: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
rozwiesić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rozwiesić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
rozwieść: perf: subj{np(str)} + {np(str)} + {prepnp(z,inst)}
rozwieść się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
rozwieść się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
rozwieść się: perf: subj{np(str)} + {prepnp(z,inst)}
rozwiewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rozwiewać się: imperf: subj{np(str)} + {np(dat)}
rozwiewać się: imperf: subj{np(str)} + {xp(adl)}
rozwiewać się: imperf: subj{np(str)} + {xp(locat)}
rozwijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
rozwijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
rozwijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
rozwijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rozwijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rozwijać się: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
rozwijać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
rozwijać się: imperf: subj{np(str)} + {prepnp(u,gen)}
rozwijać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
rozwijać się: imperf: subj{np(str)} + {prepnp(w,loc)}
rozwikłać: perf: subj{np(str)} + {cp(int); ncp(str,int)}
rozwikłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rozwikłać się: perf: subj{cp(int); ncp(str,int)}
rozwikłać się: perf: subj{np(str)}
rozwinąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
rozwinąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
rozwinąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
rozwinąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rozwinąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rozwinąć się: perf: subj{np(str)} + {np(dat)} + {advp(misc)}
rozwinąć się: perf: subj{np(str)} + {prepnp(przed,inst)}
rozwinąć się: perf: subj{np(str)} + {prepnp(u,gen)}
rozwinąć się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
rozwinąć się: perf: subj{np(str)} + {prepnp(w,loc)}
rozwodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
rozwodzić się: imperf: subj{np(str)} + {comprepnp(na temat)}
rozwodzić się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
rozwodzić się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
rozwodzić się: imperf: subj{np(str)} + {prepnp(z,inst)}
równać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
równać się: imperf: subj,controller{infp(_)} + controllee{infp(_)}
równać się: imperf: subj,controller{infp(_)} + controllee{np(nom)}
równać się: imperf: subj,controller{np(str)} + controllee{np(nom)}
równać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
równać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
różnić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)} + {prepnp(od,gen)} + {advp(misc)}
różnić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)} + {prepnp(z,inst)} + {advp(misc)}
różnić: imperf: subj{np(str)} + {np(str)} + {advp(misc)} + {preplexnp(między,inst,_,'siebie',natr)}
różnić się: imperf: subj{np(str)} + {comprepnp(co do)} + {advp(misc)} + {preplexnp(między,inst,_,'siebie',natr)}
różnić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że); preplexnp(pod,inst,_,'wzgląd',atr)} + {advp(misc)} + {preplexnp(między,inst,_,'siebie',natr)}
różnić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że); preplexnp(pod,inst,_,'wzgląd',atr)} + {prepnp(od,gen)} + {advp(misc)}
różnić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że); preplexnp(pod,inst,_,'wzgląd',atr)} + {prepnp(z,inst)} + {advp(misc)}
różnić się: imperf: subj{np(str)} + {prepnp(od,gen)} + {comprepnp(co do)} + {advp(misc)}
różnić się: imperf: subj{np(str)} + {prepnp(od,gen)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)} + {advp(misc)}
różnić się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)} + {advp(misc)} + {preplexnp(między,inst,_,'siebie',natr)}
różnić się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)} + {prepnp(z,inst)} + {advp(misc)}
różnić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {advp(misc)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
różnić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)} + {advp(misc)}
rujnować: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
rujnować się: imperf: subj{np(str)} + {prepnp(na,acc)}
rumienić: imperf: subj{np(str)} + obj{np(str)}
rumienić się: imperf: subj{np(str)} + {cp(że)}
rumienić się: imperf: subj{np(str)} + {np(inst)}
rumienić się: imperf: subj{np(str)} + {or}
rumienić się: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
rumienić się: imperf: subj{np(str)} + {prepnp(z,gen)}
runąć: imperf: subj{np(str)} + {prepnp(na,acc)}
runąć: imperf: subj{np(str)} + {prepnp(pod,inst)}
runąć: imperf: subj{np(str)} + {prepnp(w,acc)}
ruszać: imperf: subj{np(str)} + {cp(żeby)} + {lexnp(inst,sg,'palec',natr)}
ruszać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
ruszać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
ruszać: imperf: subj{np(str)} + {np(inst)}
ruszać: imperf: subj{np(str)} + {np(str)}
ruszać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
ruszać: imperf: subj{np(str)} + {preplexnp(z,gen,sg,'kopyto',natr)}
ruszać: imperf: subj{np(str)} + {prepnp(do,gen)}
ruszać: imperf: subj{np(str)} + {prepnp(w,acc)}
ruszać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(temp)}
ruszać się: imperf: subj{np(str)} + {np(dat)}
ruszać się: imperf: subj{np(str)} + {xp(abl)}
ruszyć: perf: subj{np(str)} + {cp(żeby)} + {lexnp(inst,sg,'palec',natr)}
ruszyć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
ruszyć: perf: subj{np(str)} + {np(inst)}
ruszyć: perf: subj{np(str)} + {np(str)}
ruszyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
ruszyć: perf: subj{np(str)} + {preplexnp(z,gen,sg,'kopyto',natr)}
ruszyć: perf: subj{np(str)} + {prepnp(do,gen)}
ruszyć: perf: subj{np(str)} + {prepnp(na,acc)}
ruszyć: perf: subj{np(str)} + {prepnp(w,acc)}
ruszyć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(temp)}
ruszyć się: perf: subj{np(str)} + {np(dat)}
ruszyć się: perf: subj{np(str)} + {xp(abl)}
rwać: imperf: {np(str)} + {xp(locat)}
rwać: imperf: subj{np(str)} + obj{lexnp(str,pl,'włos',natr)} + {lexnp(dat,_,'siebie',natr)} + {preplexnp(z,gen,sg,'głowa',natr)}
rwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
rwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
rwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
rwać: imperf: subj{np(str)} + {xp(adl)}
rwać się: imperf: subj{np(str)} + {cp(żeby)}
rwać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rwać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rwać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
rwać się: imperf: subj{np(str)} + {xp(adl)}
ryczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
ryczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)}
ryczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(przez,acc)} + {or}
ryczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
ryczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przez,acc)} + {cp(że)}
ryknąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)} + {or}
ryknąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)} + {or}
ryknąć: perf: subj{np(str)} + {np(inst)} + {np(str)}
ryknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(nad,inst)}
ryknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
ryknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
ryknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
ryknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
ryknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
ryknąć: perf: subj{np(str)} + {prepnp(za,inst)} + {or}
rysować: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
rysować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
rysować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
rysować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
rysować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
rysować się: imperf: subj{np(str)} + {xp(locat)}
rywalizować: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,żeby)} + {preplexnp(między,inst,_,'siebie',natr)}
rywalizować: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
rywalizować: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
ryzykować: imperf: subj{np(str)} + {cp(że)}
ryzykować: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
ryzykować: imperf: subj{np(str)} + {np(str); ncp(str,że)}
rządzić: imperf: subj{np(str)} + obj{np(inst)}
rządzić: imperf: subj{np(str)} + {xp(locat)}
rządzić się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
rządzić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
rzec: perf: subj{np(str)} + {np(dat)} + {cp(int)}
rzec: perf: subj{np(str)} + {np(dat)} + {cp(że)}
rzec: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
rzec: perf: subj{np(str)} + {np(dat)} + {np(str)}
rzec: perf: subj{np(str)} + {np(dat)} + {or}
rzec: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
rzeźbić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
rzucać: imperf: {np(inst)} + {advp(misc)}
rzucać: imperf: {np(inst)} + {prepnp(po,loc)}
rzucać: imperf: {np(inst)} + {xp(abl)} + {xp(adl)}
rzucać: imperf: {np(str)} + {prepnp(po,loc)}
rzucać: imperf: {np(str)} + {xp(abl)} + {xp(adl)}
rzucać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {preplexnp(na,acc,pl,'kolano',natr)}
rzucać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {cp(że)}
rzucać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {or}
rzucać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
rzucać: imperf: subj{np(str)} + obj{lexnp(str,sg,'światło',atr)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
rzucać: imperf: subj{np(str)} + obj{np(inst)} + {np(dat)} + {prepnp(w,acc)}
rzucać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(na,acc)}
rzucać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(o,acc)}
rzucać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(po,loc)}
rzucać: imperf: subj{np(str)} + obj{np(inst)} + {xp(adl)}
rzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
rzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
rzucać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rzucać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
rzucać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
rzucać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
rzucać się: imperf: {np(dat)} + {prepnp(na,acc)}
rzucać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
rzucać się: imperf: subj{cp(int)} + {np(dat)} + {prepnp(w,acc)}
rzucać się: imperf: subj{cp(jak)} + {np(dat)} + {prepnp(w,acc)}
rzucać się: imperf: subj{cp(żeby)} + {np(dat)} + {prepnp(w,acc)}
rzucać się: imperf: subj{cp(że)} + {np(dat)} + {prepnp(w,acc)}
rzucać się: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {prepnp(w,acc)}
rzucać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
rzucać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rzucać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
rzucać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
rzucać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
rzucić: perf: {np(inst)} + {advp(misc)}
rzucić: perf: {np(inst)} + {xp(adl)}
rzucić: perf: {np(str)} + {xp(adl)}
rzucić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {preplexnp(na,acc,pl,'kolano',natr)}
rzucić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {cp(że)}
rzucić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {or}
rzucić: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
rzucić: perf: subj{np(str)} + obj{lexnp(str,sg,'światło',atr)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
rzucić: perf: subj{np(str)} + obj{np(inst)} + {np(dat)} + {prepnp(w,acc)}
rzucić: perf: subj{np(str)} + obj{np(inst)} + {prepnp(na,acc)}
rzucić: perf: subj{np(str)} + obj{np(inst)} + {prepnp(o,acc)}
rzucić: perf: subj{np(str)} + obj{np(inst)} + {xp(adl)}
rzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
rzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
rzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rzucić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rzucić: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
rzucić: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
rzucić: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
rzucić się: perf: {np(dat)} + {prepnp(na,acc)}
rzucić się: perf: subj,controller{np(str)} + controllee{infp(_)}
rzucić się: perf: subj{cp(int)} + {np(dat)} + {prepnp(w,acc)}
rzucić się: perf: subj{cp(jak)} + {np(dat)} + {prepnp(w,acc)}
rzucić się: perf: subj{cp(żeby2)} + {np(dat)} + {prepnp(w,acc)}
rzucić się: perf: subj{cp(że)} + {np(dat)} + {prepnp(w,acc)}
rzucić się: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {prepnp(w,acc)}
rzucić się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
rzucić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
rzucić się: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
rzucić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
rzucić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
rzutować: imperf: subj,controller{np(str); ncp(str,int); ncp(str,że)} + controllee{xp(mod)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
rzutować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
rzutować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
rżnąć: imperf: {np(str)} + {xp(locat)}
rżnąć: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
rżnąć: imperf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(od,gen,sg,'ucho',natr)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
rżnąć: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
rżnąć: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
rżnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
rżnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
rżnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
rżnąć: _: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
rżnąć: _: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
rżnąć się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
sadzać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
sadzać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
sadzać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
sadzać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
salutować: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
salutować: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
satysfakcjonować: imperf: subj{cp(że)} + {np(str)}
satysfakcjonować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
sączyć: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {xp(adl)}
sączyć: imperf: subj{np(str)} + {np(dat)} + {xp(adl)} + {or}
sączyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
sączyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
sączyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
sączyć: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
sączyć się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
sączyć się: imperf: subj{np(str)} + {np(inst)}
sączyć się: imperf: subj{np(str)} + {prepnp(między,inst)}
sączyć się: imperf: subj{np(str)} + {prepnp(przez,acc)}
sączyć się: imperf: subj{np(str)} + {prepnp(z,gen)}
sączyć się: imperf: subj{np(str)} + {xp(locat)}
sądzić: imperf: subj{np(str)} + {comprepnp(na temat)} + {nonch}
sądzić: imperf: subj{np(str)} + {cp(że)}
sądzić: imperf: subj{np(str)} + {cp(żeby2)}
sądzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
sądzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
sądzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(według,gen)}
sądzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
sądzić: imperf: subj{np(str)} + {prepnp(o,loc)} + {advp(pron)}
sądzić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)} + {nonch}
sądzić się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {prepnp(z,inst)}
sąsiadować: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
sąsiadować: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
sąsiadować: imperf: subj{np(str)} + {prepnp(przez,acc)} + {prepnp(z,inst)}
scalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
scalić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
schlebiać: imperf: subj{cp(że)} + {np(dat)}
schlebiać: imperf: subj{ncp(str,że)} + {np(dat)}
schlebiać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
schlebiać: imperf: subj{np(str)} + {np(dat)} + {or}
schnąć: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
schnąć: imperf: subj{np(str)} + {np(dat)} + {xp(dur)}
schnąć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
schnąć: imperf: subj{np(str)} + {preplexnp(pod,inst,sg,'wpływ',ratr)}
schnąć: imperf: subj{np(str)} + {prepnp(od,gen)}
schnąć: imperf: subj{np(str)} + {prepnp(z,gen)}
schodzić: imperf: {comprepnp(na temat)}
schodzić: imperf: {np(dat)} + {prepnp(na,loc)}
schodzić: imperf: {prepnp(na,acc)}
schodzić: imperf: subj{np(str)} + {comprepnp(na temat)}
schodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
schodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
schodzić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
schodzić: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
schodzić: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
schodzić: perf: subj{np(str)} + obj{np(str)}
schodzić się: imperf: subj{np(str)} + {prepnp(do,gen)}
schodzić się: imperf: subj{np(str)} + {prepnp(z,inst)}
schodzić się: imperf: subj{np(str)} + {xp(adl)}
schodzić się: imperf: subj{np(str)} + {xp(locat)}
schodzić się: perf: subj{np(str)}
schować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {xp(adl)}
schować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {xp(locat)}
schować: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {xp(adl)}
schować: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {xp(locat)}
schować: perf: subj{np(str)} + {prepnp(przed,inst)} + {xp(adl)} + {refl}
schować: perf: subj{np(str)} + {prepnp(przed,inst)} + {xp(locat)} + {refl}
schować się: perf: subj{np(str)} + {prepnp(przy,loc)}
schować się: perf: subj{np(str)} + {prepnp(z,inst)}
schylać: imperf: subj{np(str)} + {np(str)} + {prepnp(przed,inst)}
schylać się: imperf: subj{np(str)} + {prepnp(po,acc)}
schylać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
schylić: perf: subj{np(str)} + {np(str)} + {prepnp(przed,inst)}
schylić się: perf: subj{np(str)} + {prepnp(po,acc)}
schylić się: perf: subj{np(str)} + {prepnp(przed,inst)}
segregować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
segregować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
segregować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
segregować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(według,gen)}
segregować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(mod)}
segregować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'wzgląd',ratr)}
segregować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,sg,'wzgląd',ratr)}
segregować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {xp(mod)}
sekundować: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
serwować: imperf: subj{np(str)} + {np(inst)}
serwować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
sędziować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
sędziować: imperf: subj{np(str)} + {prepnp(w,loc)}
sędziować: imperf: subj{np(str)} + {xp(locat)}
sfinansować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
sfinansować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
sformułować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
sformułować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
siać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
siać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
siadać: imperf: subj{np(str)} + {prepnp(do,gen)}
siadać: imperf: subj{np(str)} + {xp(adl)}
siadać: imperf: subj{np(str)} + {xp(locat)}
siadywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {xp(locat)}
siąść: perf: subj{np(str)} + {prepnp(do,gen)}
siąść: perf: subj{np(str)} + {xp(adl)}
siąść: perf: subj{np(str)} + {xp(locat)}
siec: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
siec: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
siedzieć: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
siedzieć: imperf: subj{np(str)} + {lexnp(inst,sg,'kamień',natr)}
siedzieć: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,loc,sg,'kark',natr)}
siedzieć: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
siedzieć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
siedzieć: imperf: subj{np(str)} + {prepnp(nad,inst)}
siedzieć: imperf: subj{np(str)} + {prepnp(na,loc)}
siedzieć: imperf: subj{np(str)} + {prepnp(przy,loc)}
siedzieć: imperf: subj{np(str)} + {prepnp(w,loc)}
siedzieć: imperf: subj{np(str)} + {prepnp(za,acc)} + {xp(dur)}
sięgać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
sięgać: imperf: subj{np(str)} + {np(gen)}
sięgać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,acc)} + {xp(adl)}
sięgnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
sięgnąć: perf: subj{np(str)} + {np(gen)}
sięgnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,acc)} + {xp(adl)}
sikać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
sikać: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
sikać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
sikać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
sikać: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
silić się: imperf: subj,controller{np(str)} + controllee{infp(_)}
silić się: imperf: subj{np(str)} + {cp(żeby)}
silić się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
siodłać: imperf: subj{np(str)} + obj{np(str)}
skakać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
skakać: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
skakać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
skakać: imperf: subj{np(str)} + {prepnp(koło,gen)}
skakać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
skakać: imperf: subj{np(str)} + {prepnp(po,acc)}
skakać: imperf: subj{np(str)} + {prepnp(przed,inst)}
skaleczyć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
skaleczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
skaleczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
skaleczyć: perf: subj{np(str)} + {prepnp(o,acc)} + {refl}
skandować: imperf: subj{np(str)} + {np(dat)} + {or}
skandować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
skandować: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
skandować: imperf: subj{np(str)} + {prepnp(ku,dat)} + {or}
skarżyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(int)}
skarżyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
skarżyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {cp(że)}
skarżyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,że)}
skarżyć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(int)}
skarżyć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(że)}
skarżyć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)} + {cp(że)}
skarżyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(int); cp(że)}
skarżyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {or}
skarżyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
skarżyć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(int); cp(że)}
skarżyć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {or}
skarżyć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
skarżyć się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {prepnp(przed,inst)}
skarżyć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)} + {cp(że)}
skarżyć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)} + {or}
skazać: perf: subj{np(str)} + obj{np(str)} + {prepncp(na,acc,że)}
skazać: perf: subj{np(str)} + obj{np(str)} + {prepncp(na,acc,żeby)}
skazać: perf: subj{np(str)} + obj{np(str)} + {prepncp(za,acc,że)}
skazać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
skazać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
skazać się: perf: subj{np(str)} + {prepncp(na,acc,że)}
skazać się: perf: subj{np(str)} + {prepncp(na,acc,żeby)}
skazać się: perf: subj{np(str)} + {prepnp(na,acc)}
skazywać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(na,acc,że)}
skazywać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(na,acc,żeby)}
skazywać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(za,acc,że)}
skazywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
skazywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
skazywać się: imperf: subj{np(str)} + {prepncp(na,acc,że)}
skazywać się: imperf: subj{np(str)} + {prepncp(na,acc,żeby)}
skazywać się: imperf: subj{np(str)} + {prepnp(na,acc)}
skąpić: imperf: subj{np(str)} + {np(dat)} + {np(gen)}
skierować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
skierować: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
skierować: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
skierować się: perf: subj{np(str)} + {prepnp(ku,dat)}
skierować się: perf: subj{np(str)} + {xp(adl)}
skinąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
skinąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
skinąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(że)}
skinąć: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {cp(żeby)}
składać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
składać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
składać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
składać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
składać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
składać się: imperf: {np(dat)} + {cp(że)} + {advp(misc)}
składać się: imperf: {np(dat)} + {prepnp(z,inst)} + {advp(misc)}
składać się: imperf: subj{np(str)} + {prepnp(do,gen)}
składać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
składać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(po,acc)}
składać się: imperf: subj{np(str)} + {prepnp(z,gen)}
składować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
skłaniać: imperf: subj{np(str)} + {np(str)} + {preplexnp(w,acc,sg,'strona',natr)}
skłaniać: imperf: subj{np(str)} + {np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
skłaniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
skłaniać się: imperf: subj{np(str)} + {prepncp(ku,dat,że)}
skłaniać się: imperf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
skłonić: perf: subj{np(str)} + {np(inst)} + {np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
skłonić: perf: subj{np(str)} + {np(str)} + {prepnp(na,acc)}
skłonić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
skłonić się: perf: subj{np(str)} + {np(dat)}
skłonić się: perf: subj{np(str)} + {prepncp(ku,dat,że)}
skłonić się: perf: subj{np(str)} + {prepnp(ku,dat); prepncp(ku,dat,żeby)}
skłócić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {prepnp(z,inst)}
skłócić się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {prepnp(z,inst)}
skoczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
skoczyć: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
skoczyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
skoczyć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
skoczyć: perf: subj{np(str)} + {prepnp(po,acc)}
skomentować: perf: subj{np(str)} + {cp(że)}
skomentować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)} + {or}
skonać: perf: subj{np(str)} + {lexnp(inst,sg,'śmierć',atr)}
skonać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepnp(od,gen); prepnp(wskutek,gen); prepnp(z,gen); comprepnp(z powodu)}
skonać: perf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że); prepncp(za,acc,żeby)}
skoncentrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że); prepncp(na,loc,żeby)}
skoncentrować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
skoncentrować się: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że); prepncp(na,loc,żeby)}
skoncentrować się: perf: subj{np(str)} + {prepnp(wokół,gen); prepncp(wokół,gen,int); prepncp(wokół,gen,że); prepncp(wokół,gen,żeby)}
skonstruować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
skontaktować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
skontaktować się: perf: subj{np(str)} + {prepnp(przez,acc)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
skontrolować: perf: subj{np(str)} + {cp(int)} + {refl}
skontrolować: perf: subj{np(str)} + {cp(że)}
skontrolować: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
skontrolować: perf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
skończyć: perf: subj,controller{np(str)} + controllee{infp(imperf)}
skończyć: perf: subj,controller{np(str)} + controllee{xp(mod)}
skończyć: perf: subj{np(str)} + obj{np(str)}
skończyć: perf: subj{np(str)} + {prepnp(z,inst)}
skończyć się: perf: {prepnp(na,loc); prepncp(na,loc,że)}
skończyć się: perf: subj{np(str)} + {np(inst)}
skończyć się: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
skończyć się: perf: subj{np(str)} + {xp(temp)}
skopać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
skopać: perf: subj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
skopać: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
skopać: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
skopać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
skopać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc); prepnp(w,acc)}
skopać się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
skorzystać: perf: subj{np(str)} + {cp(że)}
skorzystać: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
skorzystać: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że); prepncp(z,gen,żeby)}
skracać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
skracać się: imperf: subj{np(str)} + {prepnp(o,acc)}
skradać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(mod)}
skradać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)} + {xp(locat)} + {xp(mod)} + {xp(perl)}
skraść: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
skraść: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
skreślać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
skreślać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
skreślać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
skreślić: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
skreślić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
skreślić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
skręcać: imperf: {np(str)} + {prepnp(z,gen)}
skręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
skręcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
skręcać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
skręcać: imperf: subj{np(str)} + {xp(adl)}
skręcać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
skręcać się: imperf: subj{np(str)} + {prepnp(od,gen)}
skręcać się: imperf: subj{np(str)} + {prepnp(z,gen)}
skręcić: perf: obj{np(str)} + {prepnp(z,gen)}
skręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
skręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
skręcić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
skręcić: perf: subj{np(str)} + {xp(adl)}
skręcić się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
skręcić się: perf: subj{np(str)} + {prepnp(od,gen)}
skręcić się: perf: subj{np(str)} + {prepnp(z,gen)}
skrobać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
skrobać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
skrobać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
skrobać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
skrobać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
skrobać się: imperf: subj{np(str)} + {xp(adl)}
skrócić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
skrócić się: perf: subj{np(str)} + {prepnp(o,acc)}
skryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
skryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
skryć się: perf: subj{np(str)} + {prepnp(pod,inst)}
skryć się: perf: subj{np(str)} + {prepnp(przed,inst)}
skryć się: perf: subj{np(str)} + {xp(locat)}
skrywać: imperf: subj{np(str)} + {ncp(str,że)}
skrywać: imperf: subj{np(str)} + obj{np(str)} + {fixed('w sobie')}
skrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
skrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
skrywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
skrywać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
skrywać się: imperf: subj{np(str)} + {prepnp(pod,inst)}
skrywać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,inst)}
skrywać się: imperf: subj{np(str)} + {xp(locat)}
skrzeczeć: imperf: subj{np(str)} + {cp(że)}
skrzeczeć: imperf: subj{np(str)} + {np(inst)}
skrzeczeć: imperf: subj{np(str)} + {np(str)} + {prepadjp(po,postp)}
skrzeczeć: imperf: subj{np(str)} + {or}
skrzeczeć: imperf: subj{np(str)} + {prepnp(do,gen)}
skrzeczeć: imperf: subj{np(str)} + {xp(mod)}
skrzyć się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
skrzyć się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
skrzyknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
skrzyknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
skrzyknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
skrzyknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
skrzyknąć się: perf: subj{np(str)} + {np(inst)} + {cp(że)}
skrzyknąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
skrzyknąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
skrzyknąć się: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
skrzyknąć się: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
skrzypieć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)} + {xp(mod)}
skrzypieć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
skrzypnąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
skrzypnąć: perf: subj{np(str)} + {np(inst)}
skubać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
skubać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
skubać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
skubać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
skubać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
skubać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
skubać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
skubać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
skubać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
skupiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
skupiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
skupiać się: imperf: subj{np(str)} + {prepnp(na,loc); prepnp(nad,inst); prepncp(na,loc,int); prepncp(na,loc,żeby)}
skupiać się: imperf: subj{np(str)} + {prepnp(w,acc)}
skupiać się: imperf: subj{np(str)} + {prepnp(wokół,gen)}
skupiać się: imperf: subj{np(str)} + {xp(locat)}
skupić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
skupić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
skupić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
skupić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
skupić się: perf: subj{np(str)} + {prepnp(na,loc); prepnp(nad,inst); prepncp(na,loc,int); prepncp(na,loc,żeby)}
skupić się: perf: subj{np(str)} + {prepnp(w,acc)}
skupić się: perf: subj{np(str)} + {prepnp(wokół,gen)}
skupić się: perf: subj{np(str)} + {xp(locat)}
skupować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
skupować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
skutkować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst); ncp(inst,że); ncp(inst,żeby)}
skutkować: imperf: subj{np(str)} + {np(inst)} + {prepnp(dla,gen)}
słaniać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(z,gen)}
słaniać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)}
sławić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
sławić: imperf: subj{np(str)} + obj{np(str)} + {or}
słuchać: imperf: subj{np(str)} + {cp(int)}
słuchać: imperf: subj{np(str)} + {cp(że)}
słuchać: imperf: subj{np(str)} + {np(gen); prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)}
słuchać: imperf: subj{np(str)} + {np(inst)} + {cp(jak)}
słuchać: imperf: subj{np(str)} + {np(str)}
słuchać: imperf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,jak); ncp(gen,że)} + {np(inst)}
słuchać się: imperf: subj{np(str)} + {np(gen)}
służyć: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
służyć: imperf: subj,controller{np(str)} + controllee{prepnp(za,acc)} + {np(dat)}
służyć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
służyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(dla,gen)}
służyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
służyć: imperf: subj{np(str)} + {prepnp(pod,inst)}
służyć: imperf: subj{np(str)} + {prepnp(u,gen)}
służyć: imperf: subj{np(str)} + {prepnp(w,loc)}
słychać: imperf: {cp(int)} + {xp(locat)}
słychać: imperf: {cp(jak)} + {xp(locat)}
słychać: imperf: {cp(że); cp(żeby2)} + {xp(locat)}
słychać: imperf: {ncp(str,int)} + {xp(locat)}
słychać: imperf: {ncp(str,jak)} + {xp(locat)}
słychać: imperf: {np(str); ncp(str,że); or} + {xp(locat)}
słychać: imperf: {prepncp(o,loc,int); prepncp(o,loc,jak)} + {xp(locat)}
słychać: imperf: {prepncp(o,loc,że)} + {xp(locat)}
słychać: imperf: {prepnp(o,loc)} + {xp(locat)}
słynąć: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)}
słynąć: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
słynąć: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
słynąć: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
słyszeć: imperf: subj{np(str)} + obj{cp(jakoby)}
słyszeć: imperf: subj{np(str)} + obj{cp(jak)} + {preplexnp(na,acc,pl,'ucho',batr)}
słyszeć: imperf: subj{np(str)} + obj{cp(żeby2)}
słyszeć: imperf: subj{np(str)} + obj{cp(że)} + {preplexnp(na,acc,pl,'ucho',batr)}
słyszeć: imperf: subj{np(str)} + obj{np(str); cp(int); cp(jak); cp(że); ncp(str,int); ncp(str,jak); ncp(str,że)} + {np(inst)}
słyszeć: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,pl,'ucho',batr)}
słyszeć: imperf: subj{np(str)} + obj{np(str); prepnp(o,loc); cp(int); cp(jak); cp(że); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)} + {prepnp(od,gen)}
słyszeć: imperf: subj{np(str)} + {prepncp(o,loc,jakoby)}
słyszeć: imperf: subj{np(str)} + {prepncp(o,loc,żeby)}
słyszeć: imperf: subj{np(str)} + {prepnp(od,gen)} + {or}
słyszeć: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że); prepncp(o,loc,żeby2)} + {nonch}
słyszeć: imperf: subj{np(str)} + {refl}
smagać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
smagać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
smakować: imperf: subj,controller{np(str)} + controllee{xp(mod)}
smakować: imperf: subj{np(str)} + {np(dat)}
smakować: imperf: subj{np(str)} + obj{np(str)}
smarować: imperf: subj{np(str)} + {np(inst)} + {refl}
smarować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
smarować: imperf: subj{np(str)} + {xp(adl)}
smażyć: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
smażyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
smażyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
smażyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
smażyć: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
smażyć się: imperf: subj{np(str)} + {advp(misc)}
smażyć się: imperf: subj{np(str)} + {prepnp(na,acc)}
smażyć się: imperf: subj{np(str)} + {prepnp(na,loc)}
smażyć się: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
smażyć się: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)} + {xp(locat)}
smucić: imperf: subj,controller{cp(że); ncp(inst,że)} + obj,controllee{np(str)}
smucić: imperf: subj{np(str)} + {np(dat)} + {or}
smucić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
smucić się: imperf: subj{np(str)} + {cp(int)}
smucić się: imperf: subj{np(str)} + {cp(że)}
smucić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
smucić się: imperf: subj{np(str)} + {xp(temp)}
snuć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
snuć się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
snuć się: imperf: subj{np(str)} + {np(dat)} + {xp(perl)}
snuć się: imperf: subj{np(str)} + {prepnp(za,inst)}
snuć się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
solić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
solić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
solidaryzować się: imperf: subj{np(str)} + {prepnp(z,inst)}
sondować: imperf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(inst)}
sondować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
sondować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(int)}
sondować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {or}
spacerować: imperf: subj{np(str)} + {xp(perl)}
spać: imperf: subj{np(str)} + {lexnp(inst,sg,'sen',atr)}
spać: imperf: subj{np(str)} + {prepnp(nad,inst)}
spać: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(u,gen)}
spać: imperf: subj{np(str)} + {prepnp(z,inst)}
spać: imperf: subj{np(str)} + {xp(locat)}
spadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
spadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
spadać: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
spadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
spadać: imperf: subj{np(str)} + {prepnp(na,loc)}
spadać: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
spajać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
spajać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
spalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
spalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
spalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
spalać: imperf: subj{np(str)} + {preplexnp(na,loc,sg,'panewka',natr)}
spalać się: imperf: subj{np(str)} + {advp(misc)}
spalać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
spalać się: imperf: subj{np(str)} + {prepnp(w,loc)}
spalać się: imperf: subj{np(str)} + {prepnp(z,gen)}
spalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
spalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
spalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
spalić: perf: subj{np(str)} + {preplexnp(na,loc,sg,'panewka',natr)}
spalić się: perf: subj{np(str)} + {advp(misc)}
spalić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
spalić się: perf: subj{np(str)} + {prepnp(w,loc)}
spalić się: perf: subj{np(str)} + {prepnp(z,gen)}
sparaliżować: perf: subj{np(str); ncp(str,że)} + obj{np(str)}
sparaliżować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
sparaliżować: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
spaść: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
spaść: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
spaść: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
spaść: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
spaść: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
spaść: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
spaść: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
spaść się: perf: subj{np(str)} + {np(inst)}
spaść się: perf: subj{np(str)} + {prepnp(na,loc)}
specjalizować się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że); prepncp(w,loc,żeby)}
spekulować: imperf: subj{np(str)} + {comprepnp(na temat)}
spekulować: imperf: subj{np(str)} + {cp(int)}
spekulować: imperf: subj{np(str)} + {cp(że)}
spekulować: imperf: subj{np(str)} + {np(inst)}
spekulować: imperf: subj{np(str)} + {or}
spekulować: imperf: subj{np(str)} + {prepnp(na,loc)}
spekulować: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
spełniać: imperf: subj{np(str)} + obj{np(str)}
spełniać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,nom)}
spełniać się: imperf: subj{np(str)} + {prepnp(w,loc)}
spełnić: perf: subj{np(str)} + obj{np(str)}
spełnić się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
spełnić się: perf: subj{np(str)} + {prepnp(w,loc)}
spełznąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(adl)} + {xp(perl)}
spełznąć: perf: subj{np(str)} + {preplexnp(na,loc,sg,'nic',natr)}
spędzać: imperf: subj{np(str)} + {np(dat)} + {lexnp(str,sg,'sen',natr)} + {preplexnp(z,gen,pl,'oko',natr)}
spędzać: imperf: subj{np(str)} + {np(dat)} + {lexnp(str,sg,'sen',natr)} + {preplexnp(z,gen,pl,'powieka',natr)}
spędzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {advp(misc)}
spędzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {prepnp(z,inst)}
spędzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {xp(locat)}
spędzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {advp(misc)}
spędzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
spędzać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
spędzać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {advp(misc)}
spędzić: perf: subj{np(str)} + {np(dat)} + {lexnp(str,sg,'sen',natr)} + {preplexnp(z,gen,pl,'oko',natr)}
spędzić: perf: subj{np(str)} + {np(dat)} + {lexnp(str,sg,'sen',natr)} + {preplexnp(z,gen,pl,'powieka',natr)}
spędzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {advp(misc)}
spędzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {prepnp(z,inst)}
spędzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {xp(locat)}
spędzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {advp(misc)}
spędzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
spędzić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
spędzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
spędzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {advp(misc)}
spiąć: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)} + {refl}
spiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
spiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,inst)}
spiąć się: perf: subj{np(str)} + {prepnp(do,gen)}
spiąć się: perf: subj{np(str)} + {prepnp(z,inst)}
spić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
spić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
spić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
spić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
spić się: perf: subj{np(str)} + {np(inst)}
spić się: perf: subj{np(str)} + {preplexnp(na,acc,sg,'umór',natr)}
spić się: perf: subj{np(str)} + {xp(mod)}
spierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
spierać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
spierać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
spierać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
spierać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
spieszyć: imperf: subj,controller{np(str)} + controllee{infp(_)}
spieszyć: imperf: subj{np(str)} + {np(dat)} + {np(str)}
spieszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
spieszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
spieszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
spieszyć: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(ku,dat); prepnp(na,acc); xp(adl)} + {xp(perl)}
spieszyć: perf: subj{np(str)} + obj{np(str)}
spieszyć: perf: subj{np(str)} + {refl}
spieszyć się: imperf: {np(dat)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,żeby); xp(adl)}
spieszyć się: imperf: subj,controller{np(str)} + controllee{infp(_)}
spieszyć się: imperf: subj{np(str)} + {np(dat)} + {np(str)}
spieszyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
spieszyć się: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,żeby); xp(adl)}
spieszyć się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)}
spijać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
spijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
spijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
spijać się: imperf: subj{np(str)} + {np(inst)}
spijać się: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'umór',natr)}
spijać się: imperf: subj{np(str)} + {xp(mod)}
spisać: perf: subj{np(str)} + obj{cp(int)}
spisać: perf: subj{np(str)} + obj{cp(że)}
spisać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
spisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
spisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
spisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
spisać: perf: subj{np(str)} + obj{np(str)} + {or}
spisać: perf: subj{np(str)} + obj{np(str)} + {prepadjp(po,postp)}
spisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
spisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
spisać się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
spiskować: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
spiskować: imperf: subj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(z,inst)}
spiskować: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
spisywać: imperf: subj{np(str)} + obj{cp(int)}
spisywać: imperf: subj{np(str)} + obj{cp(że)}
spisywać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
spisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
spisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
spisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
spisywać: imperf: subj{np(str)} + obj{np(str)} + {or}
spisywać: imperf: subj{np(str)} + obj{np(str)} + {prepadjp(po,postp)}
spisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
spisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
spisywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
splamić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
splamić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
splamić się: perf: subj{np(str)} + {xp(locat)}
spłacać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
spłacić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
spłonąć: perf: subj{np(str)} + {np(dat)} + {np(inst)}
spłoszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
spłoszyć się: perf: subj{np(str)} + {cp(że)}
spłoszyć się: perf: subj{np(str)} + {np(inst)}
spłynąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
spłynąć: perf: subj{np(str)} + {prepnp(na,acc)}
spłynąć: perf: subj{np(str)} + {prepnp(po,loc)}
spłynąć: perf: subj{np(str)} + {prepnp(z,gen)}
spływać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
spocić się: perf: subj{np(str)} + {np(dat)}
spocząć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
spocząć: perf: subj{np(str)} + {prepnp(na,loc)}
spocząć: perf: subj{np(str)} + {prepnp(w,loc)} + {xp(locat)}
spocząć: perf: subj{np(str)} + {xp(dur)}
spoczywać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
spoczywać: imperf: subj{np(str)} + {prepnp(na,loc)}
spoczywać: imperf: subj{np(str)} + {prepnp(w,loc)} + {xp(locat)}
spodobać się: perf: {np(dat)} + {xp(locat)}
spodobać się: perf: subj,controllee{infp(_)} + controller{np(dat)}
spodobać się: perf: subj{cp(gdy)} + {np(dat)}
spodobać się: perf: subj{cp(jak)} + {np(dat)}
spodobać się: perf: subj{cp(kiedy)} + {np(dat)}
spodobać się: perf: subj{cp(że)} + {np(dat)}
spodobać się: perf: subj{np(str); ncp(str,jak); ncp(str,że)} + {np(dat)} + {prepnp(w,loc)}
spodziewać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
spodziewać się: imperf: subj{np(str)} + {np(gen); cp(że); cp(żeby); ncp(gen,że); ncp(gen,żeby)} + {prepnp(po,loc)}
spodziewać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(od,gen)}
spoglądać: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
spoglądać: imperf: subj{np(str)} + {cp(int)}
spoglądać: imperf: subj{np(str)} + {cp(że)}
spoglądać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
spoglądać: imperf: subj{np(str)} + {prepnp(na,acc)} + {lexnp(inst,sg,'wilk',natr)}
spoglądać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
spoglądać: imperf: subj{np(str)} + {prepnp(po,loc)}
spoglądać się: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
spoglądać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
spoglądać się: imperf: subj{np(str)} + {prepnp(na,acc)}
spojrzeć: perf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
spojrzeć: perf: subj{np(str)} + {cp(int)}
spojrzeć: perf: subj{np(str)} + {cp(że)}
spojrzeć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
spojrzeć: perf: subj{np(str)} + {prepnp(na,acc)} + {lexnp(inst,sg,'wilk',natr)}
spojrzeć: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
spojrzeć: perf: subj{np(str)} + {prepnp(po,loc)}
spojrzeć: perf: subj{np(str)} + {xp(adl)}
spojrzeć się: perf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{xp(mod)}
spojrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
spojrzeć się: perf: subj{np(str)} + {prepnp(na,acc)}
sporządzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
sporządzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
sposobić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
sposobić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
sposobić się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
sposobić się: imperf: subj{np(str)} + {prepnp(na,acc)}
spostrzec: perf: subj{np(str)} + {cp(gdy)}
spostrzec: perf: subj{np(str)} + {cp(int)}
spostrzec: perf: subj{np(str)} + {cp(jak)}
spostrzec: perf: subj{np(str)} + {cp(kiedy)}
spostrzec: perf: subj{np(str)} + {cp(że)}
spostrzec: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
spostrzec się: perf: subj{np(str)} + {cp(gdy)}
spostrzec się: perf: subj{np(str)} + {cp(int)}
spostrzec się: perf: subj{np(str)} + {cp(jak)}
spostrzec się: perf: subj{np(str)} + {cp(kiedy)}
spostrzec się: perf: subj{np(str)} + {cp(że)}
spostrzegać: imperf: subj{np(str)} + {cp(gdy)}
spostrzegać: imperf: subj{np(str)} + {cp(int)}
spostrzegać: imperf: subj{np(str)} + {cp(kiedy)}
spostrzegać: imperf: subj{np(str)} + {cp(że)}
spostrzegać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
spostrzegać się: imperf: subj{np(str)} + {cp(int)}
spostrzegać się: imperf: subj{np(str)} + {cp(jak)}
spostrzegać się: imperf: subj{np(str)} + {cp(kiedy)}
spostrzegać się: imperf: subj{np(str)} + {cp(że)}
spotkać: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
spotkać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
spotkać się: perf: subj{np(str)} + {prepnp(z,inst)}
spotykać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
spotykać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
spotykać się: imperf: subj{np(str)} + {prepnp(z,inst)}
spowiadać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
spowiadać się: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
spowiadać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
spowiadać się: imperf: subj{np(str)} + {np(dat)} + {or}
spowiadać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
spowiadać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
spowiadać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
spowiadać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
spowiadać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
spowiadać się: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
spowodować: perf: subj{np(str)} + {np(str); cp(że); ncp(str,że)}
spożywać: imperf: subj{np(str)} + obj{np(str)}
spóźniać się: imperf: subj{np(str)} + {np(acc)} + {prepnp(do,gen); prepnp(na,acc)}
spóźniać się: imperf: subj{np(str)} + {np(acc)} + {prepnp(z,inst)}
spóźniać się: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc)} + {prepnp(o,acc)}
spóźniać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
spóźnić się: perf: subj{np(str)} + {np(str)} + {prepnp(do,gen); prepnp(na,acc)}
spóźnić się: perf: subj{np(str)} + {np(str)} + {prepnp(z,inst)}
spóźnić się: perf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc)} + {prepnp(o,acc)}
spóźnić się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
sprawdzać: imperf: subj{np(str)} + obj{cp(że)}
sprawdzać: imperf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int)}
sprawdzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
sprawdzać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
sprawdzać się: imperf: subj{cp(że)}
sprawdzać się: imperf: subj{ncp(str,że)}
sprawdzać się: imperf: subj{np(str)} + {np(dat)}
sprawdzać się: imperf: subj{np(str)} + {prepnp(w,loc)}
sprawdzać się: imperf: subj{np(str)} + {xp(locat)}
sprawdzić: perf: subj{np(str)} + obj{cp(że)}
sprawdzić: perf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int)}
sprawdzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
sprawdzić się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
sprawdzić się: perf: subj{cp(że)}
sprawdzić się: perf: subj{ncp(str,że)}
sprawdzić się: perf: subj{np(str)} + {np(dat)}
sprawdzić się: perf: subj{np(str)} + {prepnp(w,loc)}
sprawdzić się: perf: subj{np(str)} + {xp(locat)}
sprawiać: imperf: subj{np(str)} + {cp(żeby)}
sprawiać: imperf: subj{np(str); cp(że); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
sprawiać: imperf: subj{np(str); ncp(str,że)} + {np(inst)} + {cp(że); ncp(str,że)}
sprawiać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {lexnp(str,sg,'wrażenie',atr)}
sprawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
sprawiać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
sprawić: perf: subj{np(str)} + {cp(żeby)}
sprawić: perf: subj{np(str); cp(że); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
sprawić: perf: subj{np(str); ncp(str,że)} + {np(inst)} + {cp(że); ncp(str,że)}
sprawić: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {lexnp(str,sg,'wrażenie',atr)}
sprawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
sprawić się: perf: subj,controller{np(str)} + controllee{xp(mod)}
sprawować: imperf: subj{np(str)} + obj{np(str)}
sprawować się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
sprecyzować: perf: subj{np(str)} + obj{cp(int)}
sprecyzować: perf: subj{np(str)} + obj{cp(że)}
sprecyzować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
sprecyzować: perf: subj{np(str)} + {or}
sprecyzować się: perf: subj{np(str)}
sprostać: perf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)}
sprostać: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
sprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
sprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(z,gen)}
sprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {or}
sprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
sprowadzać się: imperf: subj{np(str)} + {prepncp(do,gen,int)}
sprowadzać się: imperf: subj{np(str)} + {prepncp(do,gen,że)}
sprowadzać się: imperf: subj{np(str)} + {prepncp(do,gen,żeby)}
sprowadzać się: imperf: subj{np(str)} + {prepnp(do,gen)}
sprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
sprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(z,gen)}
sprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {or}
sprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
sprowadzić się: perf: subj{np(str)} + {prepncp(do,gen,int)}
sprowadzić się: perf: subj{np(str)} + {prepncp(do,gen,że)}
sprowadzić się: perf: subj{np(str)} + {prepncp(do,gen,żeby)}
sprowadzić się: perf: subj{np(str)} + {prepnp(do,gen)}
sprowokować: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
sprowokować: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {cp(żeby)}
spróbować: perf: subj,controller{np(str)} + controllee{infp(_)}
spróbować: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {lexnp(gen,pl,'siła',batr)}
spróbować: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {lexnp(gen,sg,'szczęście',atr)}
spróbować: perf: subj{np(str)} + {cp(czy)}
spróbować: perf: subj{np(str)} + {np(gen)}
spróbować: perf: subj{np(str)} + {np(str)}
spróbować: perf: subj{np(str)} + {prepnp(w,loc)} + {lexnp(gen,pl,'siła',batr)}
spróbować: perf: subj{np(str)} + {prepnp(w,loc)} + {lexnp(gen,sg,'szczęście',atr)}
spróbować: perf: subj{np(str)} + {xp(locat)} + {lexnp(gen,pl,'siła',batr)}
spróbować: perf: subj{np(str)} + {xp(locat)} + {lexnp(gen,sg,'szczęście',atr)}
spróbować się: perf: subj{np(str)} + {prepnp(z,inst)}
sprywatyzować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
sprywatyzować się: perf: subj{np(str)}
sprzątać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
sprzątać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
sprzątać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
sprzątnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
sprzątnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
sprzątnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
sprzątnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
sprzeciwiać się: imperf: subj{np(str)} + {cp(że)}
sprzeciwiać się: imperf: subj{np(str)} + {cp(żeby)}
sprzeciwiać się: imperf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)} + {or}
sprzeciwiać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
sprzeciwić się: perf: subj{np(str)} + {cp(że)}
sprzeciwić się: perf: subj{np(str)} + {cp(żeby)}
sprzeciwić się: perf: subj{np(str)} + {np(dat); ncp(dat,int); ncp(dat,że); ncp(dat,żeby)} + {or}
sprzeciwić się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
sprzeczać się: imperf: subj{np(str)} + {or}
sprzeczać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(z powodu)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
sprzeczać się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
sprzedać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
sprzedać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
sprzedać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
sprzedać się: perf: subj{np(str)} + {np(dat)}
sprzedawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
sprzedawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)}
sprzedawać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
sprzedawać się: imperf: subj{np(str)} + {np(dat)}
sprzeniewierzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
sprzeniewierzyć się: perf: subj{np(str)} + {np(dat)}
sprzyjać: imperf: subj{np(str)} + {np(dat); ncp(dat,że); ncp(dat,żeby)}
sprzyjać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
spuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
spuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
spuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
spuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
spuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
spuszczać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
spuszczać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
spuszczać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
spuszczać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
spuszczać się: imperf: subj{np(str)} + {prepnp(na,acc)}
spuszczać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(po,loc)}
spuszczać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
spuszczać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {xp(abl)} + {xp(adl)}
spuszczać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen)}
spuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
spuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
spuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
spuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
spuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
spuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
spuścić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
spuścić się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
spuścić się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
spuścić się: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
spuścić się: perf: subj{np(str)} + {prepnp(na,acc)}
spuścić się: perf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(po,loc)}
spuścić się: perf: subj{np(str)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
spuścić się: perf: subj{np(str)} + {prepnp(po,loc)} + {xp(abl)} + {xp(adl)}
spuścić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen)}
spychać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
spychać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
spytać: perf: subj{np(str)} + obj{np(gen)} + {or}
spytać: perf: subj{np(str)} + obj{np(gen)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
spytać: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
spytać: perf: subj{np(str)} + obj{np(str)} + {or}
spytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
spytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
spytać się: perf: subj{np(str)} + {np(gen)} + {or}
spytać się: perf: subj{np(str)} + {np(gen)} + {prepnp(o,acc); cp(int); prepncp(o,acc,int)}
ssać: imperf: {np(str)} + {prepnp(od,gen)} + {xp(locat)}
ssać: imperf: {np(str)} + {prepnp(z,gen)} + {xp(locat)}
ssać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ssać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
staczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
staczać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
staczać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
stać: imperf: {np(dat)} + {np(gen)}
stać: imperf: {np(str)} + {cp(żeby)}
stać: imperf: {np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
stać: imperf: {prepncp(na,loc,że)}
stać: imperf: subj,controller{np(str)} + controllee{xp(mod)}
stać: imperf: subj{cp(żeby)} + {xp(locat)}
stać: imperf: subj{cp(że)} + {np(dat)} + {lexnp(inst,sg,'kość',natr)} + {preplexnp(w,loc,sg,'gardło',natr)}
stać: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(na,loc,sg,'przeszkoda',natr)}
stać: imperf: subj{cp(że)} + {xp(locat)}
stać: imperf: subj{ncp(str,że)} + {np(dat)} + {lexnp(inst,sg,'ość',natr)} + {preplexnp(w,loc,sg,'gardło',natr)}
stać: imperf: subj{nonch} + {cp(że)} + {preplexnp(na,loc,sg,'przeszkoda',natr)}
stać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {preplexnp(na,loc,sg,'przeszkoda',natr)}
stać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {preplexnp(na,loc,sg,'przeszkoda',natr)}
stać: imperf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'kość',natr)} + {preplexnp(w,loc,sg,'gardło',natr)}
stać: imperf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'ość',natr)} + {preplexnp(w,loc,sg,'gardło',natr)}
stać: imperf: subj{np(str)} + {np(dat); ncp(dat,że); ncp(dat,żeby)} + {preplexnp(na,loc,sg,'przeszkoda',natr)}
stać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,loc,sg,'droga',natr)}
stać: imperf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
stać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
stać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
stać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)} + {fixed('dęba')}
stać: imperf: subj{np(str)} + {np(gen); ncp(gen,że)} + {preplexnp(u,gen,pl,'podstawa',natr)}
stać: imperf: subj{np(str)} + {np(inst)}
stać: imperf: subj{np(str)} + {preplexnp(pod,inst,sg,'pręgierz',atr)}
stać: imperf: subj{np(str)} + {preplexnp(w,loc,sg,'oblicze',ratr)}
stać: imperf: subj{np(str)} + {prepnp(do,gen)} + {preplexnp(w,loc,sg,'sprzeczność',atr)}
stać: imperf: subj{np(str)} + {prepnp(między,inst)}
stać: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
stać: imperf: subj{np(str)} + {prepnp(o,acc)}
stać: imperf: subj{np(str)} + {prepnp(po,acc)}
stać: imperf: subj{np(str)} + {prepnp(przeciw,dat)} + {lexnp(inst,sg,'mur',natr)}
stać: imperf: subj{np(str)} + {prepnp(przed,inst)}
stać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {lexnp(inst,sg,'otwór',natr)}
stać: imperf: subj{np(str)} + {prepnp(przy,loc)}
stać: imperf: subj{np(str)} + {prepnp(w,loc)}
stać: imperf: subj{np(str)} + {prepnp(wobec,gen)}
stać: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,int); prepncp(za,inst,że); prepncp(za,inst,żeby)}
stać: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,że); prepncp(za,inst,żeby)} + {lexnp(inst,sg,'mur',natr)}
stać: imperf: subj{np(str)} + {prepnp(z,gen)} + {advp(misc)}
stać: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)} + {preplexnp(w,loc,sg,'sprzeczność',atr)}
stać: imperf: subj{or} + {xp(locat)}
stać: imperf: subj{prepnp(o,loc); prepncp(o,loc,że)} + {xp(locat)}
stać się: perf: {cp(że)} + {advp(misc)}
stać się: perf: {np(dat)} + {advp(misc)}
stać się: perf: subj,controller{cp(int)} + controllee{adjp(pred)}
stać się: perf: subj,controller{cp(int)} + controllee{np(inst)}
stać się: perf: subj,controller{cp(żeby)} + controllee{adjp(pred)}
stać się: perf: subj,controller{cp(żeby)} + controllee{np(inst)}
stać się: perf: subj,controller{cp(że)} + controllee{adjp(pred)}
stać się: perf: subj,controller{cp(że)} + controllee{np(inst)}
stać się: perf: subj,controller{ncp(str,int)} + controllee{adjp(pred)}
stać się: perf: subj,controller{ncp(str,int)} + controllee{np(inst)}
stać się: perf: subj,controller{ncp(str,żeby)} + controllee{np(inst)}
stać się: perf: subj,controller{ncp(str,że)} + controllee{adjp(pred)}
stać się: perf: subj,controller{ncp(str,że)} + controllee{np(inst)}
stać się: perf: subj,controller{np(str)} + controllee{adjp(pred)} + {np(dat)} + {prepadjp(z,gen)}
stać się: perf: subj,controller{np(str)} + controllee{np(inst)} + {np(dat)} + {prepnp(z,gen)}
stać się: perf: subj,controller{np(str); ncp(str,żeby)} + controllee{adjp(pred)}
stać się: perf: subj{cp(że)}
stać się: perf: subj{nonch} + {np(dat)} + {prepnp(z,inst)}
stanąć: perf: {np(dat)} + {np(gen)}
stanąć: perf: {prepadjp(na,loc)}
stanąć: perf: {prepnp(na,loc); prepncp(na,loc,że); prepncp(na,loc,żeby)}
stanąć: perf: subj{lexnp(str,pl,'oko',natr)} + {np(dat)} + {preplexnp(w,acc,sg,'słup',natr)}
stanąć: perf: subj{lexnp(str,pl,'świeczka',natr)} + {np(dat)} + {preplexnp(w,loc,pl,'oko',natr)}
stanąć: perf: subj{lexnp(str,sg,'język',natr)} + {np(dat)} + {lexnp(inst,sg,'kołek',natr)}
stanąć: perf: subj{np(str)} + {lexnp(gen,sg,'słupek',natr)}
stanąć: perf: subj{np(str)} + {lexnp(inst,sg,'sztorc',natr)}
stanąć: perf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'kość',natr)} + {preplexnp(w,loc,sg,'gardło',natr)}
stanąć: perf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'okoń',natr)}
stanąć: perf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'ość',natr)} + {preplexnp(w,loc,sg,'gardło',natr)}
stanąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
stanąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
stanąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
stanąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)} + {fixed('dęba')}
stanąć: perf: subj{np(str)} + {preplexnp(pod,inst,sg,'pręgierz',atr)}
stanąć: perf: subj{np(str)} + {preplexnp(w,acc,pl,'szranki',atr)}
stanąć: perf: subj{np(str)} + {preplexnp(w,loc,sg,'oblicze',ratr)}
stanąć: perf: subj{np(str)} + {prepnp(do,gen)}
stanąć: perf: subj{np(str)} + {prepnp(między,inst)}
stanąć: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
stanąć: perf: subj{np(str)} + {prepnp(przeciw,dat)} + {lexnp(inst,sg,'mur',natr)}
stanąć: perf: subj{np(str)} + {prepnp(przed,inst)} + {lexnp(inst,sg,'otwór',natr)}
stanąć: perf: subj{np(str)} + {prepnp(przed,inst); prepncp(przed,inst,że)}
stanąć: perf: subj{np(str)} + {prepnp(przy,loc)}
stanąć: perf: subj{np(str)} + {prepnp(w,loc)}
stanąć: perf: subj{np(str)} + {prepnp(wobec,gen)}
stanąć: perf: subj{np(str)} + {prepnp(za,inst)} + {lexnp(inst,sg,'mur',natr)}
stanowić: imperf: subj{cp(że)} + {np(str)}
stanowić: imperf: subj{ncp(str,że)} + {prepnp(o,loc)}
stanowić: imperf: subj{np(str)} + {cp(że)}
stanowić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
stanowić: imperf: subj{np(str)} + obj{np(str)}
stanowić: imperf: subj{np(str)} + {prepncp(o,loc,int)}
stanowić: imperf: subj{np(str)} + {prepncp(o,loc,że)}
stanowić: imperf: subj{np(str)} + {prepncp(o,loc,żeby2)}
stanowić: imperf: subj{np(str)} + {prepnp(o,loc)}
starać się: imperf: subj,controller{np(str)} + controllee{prepnp(o,acc); cp(żeby); prepncp(o,acc,żeby); infp(_)}
starczać: imperf: {np(dat)} + {np(gen)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
starczać: imperf: {np(dat)} + {np(gen)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
starczać: imperf: {np(gen)} + {prepnp(dla,gen)} + {prepnp(na,acc)}
starczać: imperf: subj,controller{np(str); cp(gdy); cp(żeby); ncp(str,że); infp(_)} + controllee{np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
starczać: imperf: subj{cp(jeśli)} + {np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
starczać: imperf: subj{cp(że)} + {np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
starczać: imperf: subj{cp(że)} + {np(dat)} + {prepnp(za,acc)}
starczać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(za,acc)}
starczać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); cp(żeby); prepncp(na,acc,żeby)}
starczać: imperf: subj{np(str)} + {prepnp(dla,gen)} + {prepnp(do,gen)}
starczać: imperf: subj{np(str)} + {prepnp(dla,gen)} + {prepnp(na,acc)}
starczyć: perf: {np(dat)} + {np(gen)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
starczyć: perf: {np(dat)} + {np(gen)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
starczyć: perf: {np(dat)} + {np(gen)} + {prepnp(za,acc)}
starczyć: perf: {np(gen)} + {prepnp(dla,gen)} + {prepnp(na,acc)}
starczyć: perf: subj,controllee{np(str); cp(gdy); cp(żeby); ncp(str,że); infp(_)} + controller{np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
starczyć: perf: subj{cp(jeśli)} + {np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
starczyć: perf: subj{cp(że)} + {np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
starczyć: perf: subj{cp(że)} + {np(dat)} + {prepnp(za,acc)}
starczyć: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(za,acc)}
starczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); cp(żeby); prepncp(na,acc,żeby)}
starczyć: perf: subj{np(str)} + {prepnp(dla,gen)} + {prepnp(do,gen)}
starczyć: perf: subj{np(str)} + {prepnp(dla,gen)} + {prepnp(na,acc)}
startować: imperf: subj{np(str)} + {prepnp(do,gen)}
startować: imperf: subj{np(str)} + {prepnp(w,loc)}
startować: imperf: subj{np(str)} + {xp(abl)}
starzeć się: imperf: subj{np(str)} + {advp(misc)}
stawać: imperf: {np(dat)} + {np(gen)}
stawać: imperf: {prepadjp(na,loc)}
stawać: imperf: {prepnp(na,loc); prepncp(na,loc,że)}
stawać: imperf: subj{lexnp(str,pl,'oko',natr)} + {np(dat)} + {preplexnp(w,acc,sg,'słup',natr)}
stawać: imperf: subj{lexnp(str,pl,'świeczka',natr)} + {np(dat)} + {preplexnp(w,loc,pl,'oko',natr)}
stawać: imperf: subj{lexnp(str,sg,'język',natr)} + {np(dat)} + {lexnp(inst,sg,'kołek',natr)}
stawać: imperf: subj{np(str)} + {lexnp(gen,sg,'słupek',natr)}
stawać: imperf: subj{np(str)} + {lexnp(inst,sg,'sztorc',natr)}
stawać: imperf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'kość',natr)} + {preplexnp(w,loc,sg,'gardło',natr)}
stawać: imperf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'okoń',natr)}
stawać: imperf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'ość',natr)} + {preplexnp(w,loc,sg,'gardło',natr)}
stawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
stawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
stawać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
stawać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)} + {fixed('dęba')}
stawać: imperf: subj{np(str)} + {preplexnp(pod,inst,sg,'pręgierz',atr)}
stawać: imperf: subj{np(str)} + {preplexnp(w,acc,pl,'szranki',atr)}
stawać: imperf: subj{np(str)} + {preplexnp(w,loc,sg,'oblicze',ratr)}
stawać: imperf: subj{np(str)} + {prepnp(do,gen)}
stawać: imperf: subj{np(str)} + {prepnp(między,inst)}
stawać: imperf: subj{np(str)} + {prepnp(przeciw,dat)} + {lexnp(inst,sg,'mur',natr)}
stawać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {lexnp(inst,sg,'otwór',natr)}
stawać: imperf: subj{np(str)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)}
stawać: imperf: subj{np(str)} + {prepnp(przy,loc)}
stawać: imperf: subj{np(str)} + {prepnp(w,loc)}
stawać: imperf: subj{np(str)} + {prepnp(wobec,gen)}
stawać: imperf: subj{np(str)} + {prepnp(za,inst)} + {lexnp(inst,sg,'mur',natr)}
stawać się: imperf: {advp(misc)}
stawać się: imperf: {np(dat)} + {advp(misc)}
stawać się: imperf: subj,controller{cp(int)} + controllee{adjp(pred)}
stawać się: imperf: subj,controller{cp(int)} + controllee{np(inst)}
stawać się: imperf: subj,controller{cp(żeby)} + controllee{adjp(pred)}
stawać się: imperf: subj,controller{cp(żeby)} + controllee{np(inst)}
stawać się: imperf: subj,controller{cp(że)} + controllee{adjp(pred)}
stawać się: imperf: subj,controller{cp(że)} + controllee{np(inst)}
stawać się: imperf: subj,controller{ncp(str,int)} + controllee{adjp(pred)}
stawać się: imperf: subj,controller{ncp(str,int)} + controllee{np(inst)}
stawać się: imperf: subj,controller{ncp(str,żeby)} + controllee{adjp(pred)}
stawać się: imperf: subj,controller{ncp(str,żeby)} + controllee{np(inst)}
stawać się: imperf: subj,controller{ncp(str,że)} + controllee{adjp(pred)}
stawać się: imperf: subj,controller{ncp(str,że)} + controllee{np(inst)}
stawać się: imperf: subj,controller{np(str)} + controllee{adjp(pred)} + {prepadjp(z,gen)}
stawać się: imperf: subj,controller{np(str)} + controllee{np(inst)} + {prepnp(z,gen)}
stawać się: imperf: subj{nonch} + {prepnp(z,inst)}
stawać się: imperf: subj{np(str)} + {np(dat)}
stawiać: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'czoło',natr)}
stawiać: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc)} + {cp(że)}
stawiać: imperf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(dat)} + {prepnp(za,acc)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,acc,sg,'pręgierz',ratr)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'pręgierz',ratr)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
stawiać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
stawiać: imperf: subj{np(str)} + {prepadjp(na,loc)}
stawiać: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
stawiać: imperf: subj{np(str)} + {prepnp(za,acc)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)}
stawiać: imperf: subj{np(str)} + {prepnp(za,acc)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
stawiać: imperf: subj{np(str)} + {prepnp(za,acc)} + {infp(_)} + {lexnp(dat,_,'siebie',natr)}
stawiać się: imperf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'kant',natr)}
stawiać się: imperf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'okoń',natr)}
stawiać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {lexnp(inst,sg,'sztorc',natr)}
stawiać się: imperf: subj{np(str)} + {prepnp(u,gen)}
stawiać się: imperf: subj{np(str)} + {prepnp(wobec,gen)}
stawiać się: imperf: subj{np(str)} + {xp(adl)}
stawiać się: imperf: subj{np(str)} + {xp(locat)}
stawić: perf: subj{np(str)} + {np(dat)} + {np(str)}
stawić się: perf: subj,controller{np(str)} + controllee{xp(mod)}
stawić się: perf: subj{np(str)} + {np(dat)}
stawić się: perf: subj{np(str)} + {prepnp(do,gen)}
stawić się: perf: subj{np(str)} + {prepnp(na,acc)}
stawić się: perf: subj{np(str)} + {xp(adl)}
stawić się: perf: subj{np(str)} + {xp(locat)}
stemplować: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
stemplować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
sterczeć: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
sterczeć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
sterować: imperf: subj{np(str)} + obj{np(inst)} + {np(inst)}
sterować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
stękać: imperf: subj{np(str)} + {np(dat)} + {or}
stękać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
stękać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); cp(że); prepncp(o,loc,że)}
stękać: imperf: subj{np(str)} + {prepnp(pod,inst)}
stękać: imperf: subj{np(str)} + {xp(mod)}
stęsknić się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,żeby)}
stęsknić się: perf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,int); prepncp(za,inst,żeby)}
stłuc: perf: subj{np(str)} + obj{np(str)} + {fixed('na kwaśne jabłko')}
stłuc: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
stłuc: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'miazga',atr)}
stłuc się: perf: subj{np(str)} + {np(inst)}
stłuc się: perf: subj{np(str)} + {prepnp(o,acc)}
stoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
stoczyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
stoczyć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
stołować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
stołować się: imperf: subj{np(str)} + {prepnp(z,inst)}
stołować się: imperf: subj{np(str)} + {xp(locat)}
stosować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
stosować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
stosować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
stosować się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
stracić: perf: subj{np(str)} + {lexnp(str,sg,'grunt',natr)} + {preplexnp(pod,inst,pl,'noga',natr)}
stracić: perf: subj{np(str)} + {np(str)} + {preplexnp(z,gen,pl,'oko',natr)}
stracić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
stracić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
stracić: perf: subj{np(str)} + {preplexnp(w,loc,pl,'oko',ratr)}
stracić: perf: subj{np(str)} + {prepnp(dla,gen)} + {lexnp(str,sg,'serce',natr)}
stracić: perf: subj{np(str)} + {prepnp(do,gen)} + {lexnp(str,sg,'serce',natr)}
stracić: perf: subj{np(str)} + {prepnp(z,gen)} + {nonch}
strajkować: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,że)}
straszyć: imperf: subj{np(str)} + {cp(że)} + {refl}
straszyć: imperf: subj{np(str)} + {np(inst)} + {refl}
straszyć: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
straszyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst); cp(że)}
straszyć: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
straszyć: imperf: subj{np(str)} + {or}
strącać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
strącać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
strącić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
strącić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
streszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
streszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
streszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc); prepncp(w,loc,że)}
streszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
streszczać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
streszczać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
streszczać się: imperf: subj{np(str)} + {prepnp(z,inst)}
streścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
streścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
streścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc); prepncp(w,loc,że)}
streścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
streścić się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
streścić się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
strofować: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
strofować: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
strofować: imperf: subj{np(str)} + obj{np(str)} + {or}
strofować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
stroić: imperf: subj,controller{np(str)} + controllee{prepnp(na,acc)} + {refl}
stroić: imperf: subj{np(str)} + {advp(misc)} + {refl}
stroić: imperf: subj{np(str)} + {np(dat)} + {refl}
stroić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(na,acc)}
stroić: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
stroić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
stroić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
stroić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
stroić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
stroić: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
stroić: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
stroić: imperf: subj{np(str)} + {prepnp(z,gen)} + {lexnp(dat,_,'siebie',natr)} + {lexnp(str,pl,'żart',natr)}
stroić: imperf: subj{np(str)} + {xp(adl)} + {refl}
stronić: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,żeby)}
stropić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {advp(misc)}
stropić się: perf: subj{np(str)} + {advp(misc)} + {or}
stropić się: perf: subj{np(str)} + {cp(gdy)}
stropić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
strugać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(z,gen)}
strugać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
strugać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
strząsnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
strząsnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {xp(adl)} + {xp(mod)}
strząsnąć się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
strzec: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(od,gen); prepncp(od,gen,żeby)}
strzec: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(przed,inst)}
strzec się: imperf: subj{np(str)} + {np(gen); ncp(gen,żeby)}
strzec się: imperf: subj{np(str)} + {prepnp(przed,inst); prepncp(przed,inst,żeby)}
strzelać: imperf: {np(dat)} + {prepnp(w,loc)}
strzelać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
strzelać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
strzelać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
strzelać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
strzelać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
strzelać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
strzelać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
strzelać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
strzelać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
strzelać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
strzelać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
strzelać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
strzelać się: imperf: subj{np(str)} + {prepnp(o,acc)}
strzelać się: imperf: subj{np(str)} + {prepnp(z,gen)}
strzelać się: imperf: subj{np(str)} + {prepnp(z,inst)}
strzelić: perf: {np(dat)} + {prepnp(w,loc)}
strzelić: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
strzelić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
strzelić: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
strzelić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
strzelić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
strzelić: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
strzelić: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
strzelić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
strzelić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
strzelić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
strzelić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
strzelić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
strzelić: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
strzepnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)} + {xp(adl)}
strzyc: imperf: subj{np(str)} + {lexnp(inst,pl,'ucho',natr)}
strzyc: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
strzyc: imperf: subj{np(str)} + {refl}
strzyc się: imperf: subj{np(str)} + {prepnp(u,gen)}
strzyc się: imperf: subj{np(str)} + {xp(locat)}
studiować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
studiować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
studiować: imperf: subj{np(str)} + {prepnp(na,loc)}
studzić: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
studzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
studzić się: imperf: subj{np(str)} + {xp(locat)}
stukać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
stukać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
stukać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
stukać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
stukać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
stukać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
stukać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
stukać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
stuknąć: perf: subj{np(str)} + {np(dat)}
stuknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
stuknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
stuknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
stuknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
stuknąć się: perf: subj{np(str)} + {np(inst)}
stwarzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
stwarzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
stwarzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
stwierdzać: imperf: subj{np(str)} + {cp(int)}
stwierdzać: imperf: subj{np(str)} + {cp(że)}
stwierdzać: imperf: subj{np(str)} + obj{np(str)}
stwierdzać: imperf: subj{np(str)} + {or}
stwierdzić: perf: subj{np(str)} + {cp(int)}
stwierdzić: perf: subj{np(str)} + {cp(że)}
stwierdzić: perf: subj{np(str)} + obj{np(str)}
stwierdzić: perf: subj{np(str)} + {or}
stworzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
stworzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
stworzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
stworzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
stworzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
stworzyć się: perf: subj{np(str)} + {prepnp(z,gen)}
stygnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
stygnąć: imperf: subj{np(str)} + {prepnp(na,loc)}
stygnąć: imperf: subj{np(str)} + {prepnp(od,gen)}
stygnąć: imperf: subj{np(str)} + {prepnp(w,loc)}
stykać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
stykać się: imperf: subj{np(str)} + {prepnp(z,inst)}
stymulować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
sugerować: imperf: subj{np(str)} + {np(dat)} + {or}
sugerować: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)}
sugerować: imperf: subj{np(str)} + obj{cp(jakoby)} + {np(dat)} + {np(inst)}
sugerować: imperf: subj{np(str)} + obj{cp(żeby)} + {np(dat)} + {np(inst)}
sugerować: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
sugerować: imperf: subj{np(str)} + obj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {np(inst)}
sugerować się: imperf: subj{np(str)} + {cp(że)}
sugerować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
sumować: imperf: subj{np(str)} + {cp(int)}
sumować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
sumować się: imperf: subj{np(str)} + {prepnp(do,gen)}
sumować się: imperf: subj{np(str)} + {prepnp(na,acc)}
sumować się: imperf: subj{np(str)} + {prepnp(w,acc)}
sumować się: imperf: subj{np(str)} + {prepnp(z,inst)}
sunąć: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
sunąć: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
sunąć: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
sunąć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
sunąć: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
sunąć: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
sunąć: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(perl)}
sunąć: imperf: subj{np(str)} + {prepnp(za,inst)}
sunąć się: imperf: subj{np(str)} + {prepnp(po,loc)}
sunąć się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
sunąć się: imperf: subj{np(str)} + {xp(perl)}
suszyć: imperf: {np(str)}
suszyć: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {lexnp(str,sg,'głowa',natr)}
suszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)} + {lexnp(str,sg,'głowa',natr)}
suszyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
suszyć się: imperf: subj{np(str)} + {prepnp(przy,loc)}
swędzić: imperf: {np(str)} + {xp(locat)}
swędzić: imperf: subj{cp(żeby)} + {np(str)}
swędzić: imperf: subj{np(str)} + {np(str)} + {cp(żeby)}
swędzieć: imperf: {np(str)} + {xp(locat)}
swędzieć: imperf: subj{cp(żeby)} + {np(str)}
swędzieć: imperf: subj{np(str)} + {np(str)} + {cp(żeby)}
sycić: imperf: subj{np(str)} + obj{np(str)} + {ncp(inst,int)}
sycić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
sycić się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
syczeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {or}
syczeć: imperf: subj{np(str)} + {prepnp(na,acc)}
sygnalizować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
sygnalizować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
sygnalizować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,loc); prepncp(o,loc,że)}
sygnalizować: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
sygnalizować: imperf: subj{np(str)} + obj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {np(inst)}
sygnować: _: subj{np(str)} + obj{np(str)} + {np(inst)}
syknąć: perf: subj{np(str)} + {np(dat)} + {xp(adl)} + {or}
syknąć: perf: subj{np(str)} + {np(str)} + {prepnp(ku,dat)}
syknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
syknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
syknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
syknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
symbolizować: imperf: subj{np(str)} + {cp(int)}
symbolizować: imperf: subj{np(str)} + {cp(że)}
symbolizować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
sympatyzować: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
sympatyzować: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
sypać: imperf: {np(inst)}
sypać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
sypać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
sypać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)}
sypać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(adl)}
sypać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
sypać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
sypać się: imperf: subj{np(str)} + {prepnp(na,acc)}
sypnąć: perf: {np(inst)}
sypnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
sypnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
sypnąć: perf: subj{np(str)} + {np(inst)} + {xp(abl)}
sypnąć: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(adl)}
sypnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
sypnąć się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
sypnąć się: perf: subj{np(str)} + {prepnp(na,acc)}
sytuować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {advp(misc)}
sytuować się: imperf: subj{np(str)} + {xp(locat)} + {advp(misc)}
szacować: imperf: subj{np(str)} + {cp(że)}
szacować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
szafować: imperf: subj{np(str)} + {np(inst)} + {xp(mod)}
szaleć: imperf: subj{np(str)} + {np(inst)}
szaleć: imperf: subj{np(str)} + {preplexnp(na,loc,sg,'punkt',ratr)}
szaleć: imperf: subj{np(str)} + {prepnp(na,loc)}
szaleć: imperf: subj{np(str)} + {prepnp(w,loc)}
szaleć: imperf: subj{np(str)} + {prepnp(za,inst)}
szaleć: imperf: subj{np(str)} + {prepnp(z,gen)}
szaleć: imperf: subj{np(str)} + {prepnp(z,inst)}
szaleć: imperf: subj{np(str)} + {xp(locat)}
szamotać: imperf: subj{np(str)} + obj{np(inst)}
szamotać: imperf: subj{np(str)} + obj{np(str)}
szamotać się: imperf: subj{np(str)} + {prepnp(z,inst)}
szanować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
szanować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
szanować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
szanować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
szanować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
szanować się: imperf: subj{np(str)}
szantażować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); cp(że); ncp(inst,że)}
szarpać: imperf: {np(inst)} + {prepnp(po,loc)}
szarpać: imperf: {np(inst)} + {xp(adl)}
szarpać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
szarpać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)}
szarpać: imperf: subj{np(str)} + obj{np(inst)} + {prepnp(po,loc)}
szarpać: imperf: subj{np(str)} + obj{np(inst)} + {xp(adl)}
szarpać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
szarpać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
szarpać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
szarpać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
szarpać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
szarpać się: imperf: subj{np(str)} + {prepnp(na,acc)}
szarpać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
szarpać się: imperf: subj{np(str)} + {xp(adl)}
szarpnąć: perf: {np(inst)} + {xp(adl)}
szarpnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
szarpnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)}
szarpnąć: perf: subj{np(str)} + obj{np(inst)} + {prepnp(po,loc)}
szarpnąć: perf: subj{np(str)} + obj{np(inst)} + {xp(adl)}
szarpnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
szarpnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
szarpnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
szarpnąć się: perf: subj{np(str)} + {prepnp(na,acc)}
szarpnąć się: perf: subj{np(str)} + {xp(adl)}
szarżować: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
szarżować: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
szczekać: imperf: subj{np(str)} + {np(str)}
szczekać: imperf: subj{np(str)} + {or}
szczekać: imperf: subj{np(str)} + {prepnp(na,acc)}
szczekać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
szczekać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
szczekać: imperf: subj{np(str)} + {prepnp(o,loc)}
szczekać: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
szczepić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
szczepić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
szczepić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
szczepić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
szczepić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
szczepić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
szczepić się: imperf: subj{np(str)} + {np(inst)}
szczepić się: imperf: subj{np(str)} + {prepnp(na,acc)}
szczepić się: imperf: subj{np(str)} + {prepnp(od,gen)}
szczepić się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
szczerzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
szczerzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
szczerzyć się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
szczerzyć się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
szczędzić: imperf: subj{np(str)} + obj{np(part); ncp(part,że)} + {np(dat)}
szczędzić: imperf: subj{np(str)} + obj{np(part)} + {prepnp(na,acc)}
szczędzić: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
szczędzić: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
szczycić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(przed,inst)}
szczycić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
szczycić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
szczycić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
szczypać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
szczypać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
szczypać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
szczypać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
szczypać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
szczypać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
szczypać się: imperf: subj{np(str)} + {prepnp(z,inst)}
szeleścić: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
szeleścić: imperf: subj{np(str)} + {np(inst)}
szeleścić: imperf: subj{np(str)} + {or}
szeleścić: imperf: subj{np(str)} + {prepnp(od,gen)}
szemrać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',ratr)} + {or}
szemrać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,acc,sg,'ucho',ratr)} + {or}
szemrać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); cp(int); cp(że); cp(żeby); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
szemrać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {preplexnp(na,acc,sg,'ucho',ratr)}
szemrać: imperf: subj{np(str)} + {prepadjp(po,postp)} + {cp(że)}
szemrać: imperf: subj{np(str)} + {prepnp(na,acc)}
szemrać: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(int)} + {preplexnp(do,gen,sg,'ucho',natr)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(int)} + {preplexnp(na,acc,sg,'ucho',natr)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {preplexnp(do,gen,sg,'ucho',natr)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {preplexnp(na,acc,sg,'ucho',natr)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(do,gen,sg,'ucho',natr)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(na,acc,sg,'ucho',natr)}
szepnąć: perf: subj{np(str)} + {np(dat)} + {or}
szepnąć: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',natr)} + {or}
szepnąć: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'ucho',natr)} + {or}
szepnąć: perf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
szepnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {comprepnp(na temat)}
szepnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
szepnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
szepnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
szepnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
szepnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
szeptać: imperf: subj{np(str)} + {cp(int)} + {preplexnp(między,inst,sg,'siebie',natr)}
szeptać: imperf: subj{np(str)} + {cp(żeby)} + {preplexnp(między,inst,sg,'siebie',natr)}
szeptać: imperf: subj{np(str)} + {cp(że)} + {preplexnp(między,inst,sg,'siebie',natr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {cp(int)} + {preplexnp(do,gen,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {cp(int)} + {preplexnp(na,acc,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {preplexnp(do,gen,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {preplexnp(na,acc,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(do,gen,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(na,acc,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {prepadjp(po,postp)} + {preplexnp(do,gen,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {prepadjp(po,postp)} + {preplexnp(na,acc,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',natr)} + {or}
szeptać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'ucho',ratr)} + {or}
szeptać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc)} + {preplexnp(na,acc,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jakoby); prepncp(o,loc,że)} + {preplexnp(do,gen,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'ucho',ratr)}
szeptać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(między,inst,sg,'siebie',natr)}
szeptać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
szeptać: imperf: subj{np(str)} + {prepadjp(po,postp)} + {preplexnp(między,inst,sg,'siebie',natr)}
szeptać: imperf: subj{np(str)} + {preplexnp(między,inst,sg,'siebie',natr)} + {or}
szeptać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
szeptać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
szeptać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
szeptać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
szeptać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepadjp(po,postp)}
szeptać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)}
szeptać: imperf: subj{np(str)} + {prepnp(o,loc)} + {preplexnp(między,inst,sg,'siebie',natr)}
szeptać: imperf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(z,inst)}
szeptać: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepadjp(po,postp)}
szerzyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
szerzyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
szerzyć: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
szerzyć się: imperf: subj{np(str)} + {xp(adl)}
szerzyć się: imperf: subj{np(str)} + {xp(locat)}
szkicować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc); prepnp(w,loc)}
szkicować: imperf: subj{np(str)} + {refl}
szkicować się: imperf: subj{np(str)} + {np(dat)}
szkoda: imperf: controller{np(dat)} + controllee{infp(_)}
szkoda: imperf: {np(dat)} + {cp(gdy)}
szkoda: imperf: {np(dat)} + {cp(jak)}
szkoda: imperf: {np(dat)} + {cp(kiedy)}
szkoda: imperf: {np(dat)} + {cp(że)}
szkoda: imperf: {np(dat)} + {np(gen)} + {cp(żeby)}
szkoda: imperf: {np(dat)} + {np(gen); ncp(gen,że)}
szkoda: imperf: {np(dat)} + {np(gen)} + {prepnp(dla,gen)}
szkoda: imperf: {np(dat)} + {np(gen)} + {prepnp(do,gen)}
szkoda: imperf: {np(dat)} + {np(gen)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
szkodzić: imperf: subj,controllee{infp(_)} + controller{np(dat)} + {nonch}
szkodzić: imperf: subj{cp(żeby2)} + {np(dat)} + {nonch}
szkodzić: imperf: subj{cp(że)} + {np(dat)} + {nonch}
szkodzić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat); ncp(dat,żeby)} + {prepnp(na,acc)}
szkolić: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
szkolić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
szkolić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
szkolić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
szkolić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
szkolić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
szkolić się: imperf: subj{np(str)} + {cp(int)}
szkolić się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
szkolić się: imperf: subj{np(str)} + {prepnp(na,acc)}
szkolić się: imperf: subj{np(str)} + {prepnp(na,loc)}
szkolić się: imperf: subj{np(str)} + {prepnp(w,loc)}
szkolić się: imperf: subj{np(str)} + {prepnp(z,gen)}
szokować: imperf: subj{cp(że)} + {np(str)}
szokować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst); ncp(inst,że); ncp(str,int)} + {np(str)}
szorować: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
szorować: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
szorować: imperf: subj{np(str)} + {np(inst)} + {refl}
szorować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
szorować: imperf: subj{np(str)} + {xp(adl)}
szpecić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(mod)}
szperać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
szpiegować: imperf: subj{np(str)} + {np(dat)}
szpiegować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
szpiegować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
szpiegować: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'rzecz',ratr)}
szpiegować: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
szturchać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
szturchać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {cp(żeby)}
szturchać się: imperf: subj{np(str)} + {np(inst)}
szturchać się: imperf: subj{np(str)} + {prepnp(z,inst)}
szturchać się: imperf: subj{np(str)} + {xp(mod)}
szturmować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
szukać: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(u,gen); xp(locat)}
szukać: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(w,loc)}
szukać: imperf: subj{np(str)} + {xp(locat)} + {refl}
szumieć: imperf: {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
szumieć: imperf: {np(dat)} + {preplexnp(w,loc,_,'ucho',natr)}
szumieć: imperf: {prepnp(o,loc); prepncp(o,loc,że)} + {xp(locat)}
szumieć: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
szumieć: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'ucho',natr)}
szumieć: imperf: subj{np(str)} + {np(inst)}
szumieć: imperf: subj{np(str)} + {prepnp(od,gen)}
szumieć: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
szumieć: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
szurać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
szurać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
szurać: imperf: subj{np(str)} + {prepnp(do,gen)}
szurać: imperf: subj{np(str)} + {xp(abl)}
szurać: imperf: subj{np(str)} + {xp(adl)}
szyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
szyć: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
szyć: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
szyć: imperf: subj{np(str)} + {xp(perl)}
szydzić: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
szydzić: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
szydzić: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
szykować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
szykować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
szykować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
szykować: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
szykować: imperf: subj{np(str)} + {prepnp(na,acc)} + {refl}
szykować się: imperf: subj,controller{np(str)} + controllee{infp(_)}
szykować się: imperf: subj{np(str)} + {xp(locat)}
ściąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ściąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ściąć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,pl,'noga',natr)}
ściąć się: perf: subj{np(str)}
ściągać: imperf: subj,controller{np(str)} + controllee{infp(_)} + {xp(adl)}
ściągać: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {preplexnp(na,acc,sg,'głowa',natr)}
ściągać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ściągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ściągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
ściągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
ściągać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
ściągnąć: perf: subj{np(str)} + {np(dat)} + {np(str)} + {preplexnp(na,acc,sg,'głowa',natr)}
ściągnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ściągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ściągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
ściągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
ściągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
ściągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ściągnąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
ściągnąć się: perf: subj{np(str)} + {np(dat)}
ściekać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
ściemniać: imperf: subj{np(str)} + {np(dat)} + {comprepnp(na temat)}
ściemniać: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w kwestii)}
ściemniać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
ściemniać: imperf: subj{np(str)} + {np(dat)} + {or}
ściemniać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)} + {nonch}
ściemniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ściemniać się: imperf: subj{E} + {xp(locat)}
ścierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
ścierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
ścierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
ścierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
ścierać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'proch',atr)}
ścierać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'pył',atr)}
ścierać się: imperf: subj{np(str)} + {np(dat)}
ścierać się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int)} + {prepnp(z,inst)}
ścigać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
ścigać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
ścigać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int)} + {prepnp(z,inst)}
ścinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ścinać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,pl,'noga',natr)}
ścinać się: imperf: subj{np(str)}
ścinać się: imperf: subj{np(str)} + {prepnp(z,inst)}
ściskać: imperf: subj{np(str)} + {np(inst)} + {refl}
ściskać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
ściskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ściskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ściskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ściskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
ściskać się: imperf: subj{np(str)} + {prepnp(z,inst)}
ścisnąć: perf: {np(str)} + {xp(locat)}
ścisnąć: perf: subj{np(str)} + {np(inst)} + {refl}
ścisnąć: perf: subj{np(str)} + {np(str)} + {xp(locat)}
ścisnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ścisnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ścisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ścisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
ścisnąć się: perf: subj{np(str)} + {np(dat)}
ściszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
śledzić: imperf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int)} + {np(inst)}
ślęczeć: imperf: subj{np(str)} + {prepnp(nad,inst)}
ślęczeć: imperf: subj{np(str)} + {xp(locat)}
ślinić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ślinić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
ślinić się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
ślinić się: imperf: subj{np(str)} + {prepnp(z,inst)}
ślizgać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
ślizgać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
ślizgać się: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
ślizgać się: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
ślizgać się: imperf: subj{np(str)} + {prepnp(na,loc)}
ślubować: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że); infp(_)} + {np(dat)} + {prepnp(na,acc)}
śmiać się: imperf: subj{lexnp(str,_,'oko',natr)} + {np(dat)} + {prepnp(do,gen)}
śmiać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
śmiać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
śmiać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
śmiać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
śmiecić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
śmiecić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
śmieć: imperf: subj,controller{np(str)} + controllee{infp(_)}
śmierdzieć: imperf: controller{np(dat)} + controllee{xp(mod)} + {xp(abl)}
śmierdzieć: imperf: controller{prepnp(od,gen)} + controllee{xp(mod)}
śmierdzieć: imperf: controller{xp(locat)} + controllee{xp(mod)}
śmierdzieć: imperf: {np(dat)} + {np(inst)} + {xp(abl)}
śmierdzieć: imperf: {np(inst)} + {prepnp(od,gen)}
śmierdzieć: imperf: {np(inst)} + {xp(locat)}
śmierdzieć: imperf: subj,controller{np(str)} + controllee{xp(mod)}
śmierdzieć: imperf: subj{np(str)} + {np(inst)}
śmieszyć: imperf: subj{cp(gdy)} + {np(str)}
śmieszyć: imperf: subj{cp(int)} + {np(str)}
śmieszyć: imperf: subj{cp(jak)} + {np(str)}
śmieszyć: imperf: subj{cp(jeśli)} + {np(str)}
śmieszyć: imperf: subj{cp(kiedy)} + {np(str)}
śmieszyć: imperf: subj{cp(że)} + {np(str)}
śmieszyć: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,jeśli); ncp(str,kiedy); ncp(str,że)} + {np(str)}
śmigać: imperf: subj{np(str)} + {np(dat)} + {xp(perl)}
śmigać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
śmigać: imperf: subj{np(str)} + {np(inst)} + {xp(perl)}
śnić: imperf: subj{np(str)} + {cp(jak)}
śnić: imperf: subj{np(str)} + {np(str)}
śnić: imperf: subj{np(str)} + {prepnp(o,loc); cp(że); prepncp(o,loc,że)}
śnić się: imperf: controller{np(dat)} + controllee{infp(_)}
śnić się: imperf: {np(dat)} + {prepnp(o,loc)}
śnić się: imperf: subj{cp(jak)} + {np(dat)}
śnić się: imperf: subj{cp(żeby)} + {np(dat)}
śnić się: imperf: subj{np(str); cp(że); ncp(str,że)} + {np(dat)}
śpieszyć: imperf: subj,controller{np(str)} + controllee{infp(_)}
śpieszyć: imperf: subj{np(str)} + {np(dat)} + {np(str)}
śpieszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
śpieszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
śpieszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
śpieszyć: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(ku,dat); prepnp(na,acc); xp(adl)} + {xp(perl)}
śpieszyć się: imperf: {np(dat)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,żeby); xp(adl)}
śpieszyć się: imperf: subj,controller{np(str)} + controllee{infp(_)}
śpieszyć się: imperf: subj{np(str)} + {np(dat)} + {np(str)}
śpieszyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
śpieszyć się: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc); prepncp(do,gen,żeby); xp(adl)}
śpieszyć się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)}
śpiewać: imperf: subj{np(str)} + {cp(że)}
śpiewać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
śpiewać: imperf: subj{np(str)} + {np(inst)} + {or}
śpiewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
świadczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
świadczyć: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'rzecz',ratr)}
świadczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
świadczyć: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'korzyść',ratr)}
świadczyć: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'niekorzyść',ratr)}
świadczyć: imperf: subj{np(str)} + {prepnp(o,loc); cp(int); cp(że); prepncp(o,loc,int); prepncp(o,loc,że)} + {advp(misc)}
świadczyć: imperf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(przed,inst)}
świadczyć: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepnp(za,inst)} + {prepnp(przed,inst)} + {cp(że)}
świecić: imperf: subj{np(str)} + {cp(że)} + {lexnp(inst,pl,'oko',natr)}
świecić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
świecić: imperf: subj{np(str)} + {np(inst)}
świecić: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(za,acc)} + {lexnp(inst,pl,'oko',natr)}
świecić się: imperf: subj{lexnp(str,pl,'oko',atr)} + {np(dat)} + {prepnp(do,gen)}
świecić się: imperf: subj{np(str)}
święcić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
święcić: imperf: subj{np(str)} + obj{np(str)}
święcić się: imperf: subj{np(str)}
świętować: imperf: subj{np(str)} + {np(inst)} + {cp(że)}
świętować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
świtać: perf: {np(dat)} + {advp(misc)}
świtać: perf: subj{cp(że)} + {np(dat)} + {prepnp(w,loc)}
świtać: perf: subj{ncp(str,że)} + {np(dat)} + {prepnp(w,loc)}
świtać: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
świtać: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
taić: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(przed,inst)}
taić: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
taić się: imperf: subj{np(str)} + {cp(że)}
taić się: imperf: subj{np(str)} + {prepnp(w,loc)}
taić się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
taić się: imperf: subj{np(str)} + {xp(locat)}
tamować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
tamować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
tamować się: imperf: subj{np(str)} + {np(inst)}
tankować: imperf: subj{np(str)} + obj{np(str)} + {fixed('do pełna')}
tankować: imperf: subj{np(str)} + obj{np(str)} + {fixed('pod korek')}
tankować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
tankować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {prepnp(z,gen)}
tańczyć: imperf: subj{np(str)} + {np(dat)} + {preplexnp(przed,inst,pl,'oko',natr)}
tańczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
tańczyć: imperf: subj{np(str)} + {prepnp(koło,gen)}
tańczyć: imperf: subj{np(str)} + {prepnp(wokół,gen)}
targać: imperf: subj{np(str)} + {np(inst)}
targać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
targać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
targać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
targać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
targać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
targać: imperf: subj{np(str)} + {prepnp(za,acc)} + {refl}
targać się: imperf: subj{np(str)} + {prepnp(do,gen)}
targać się: imperf: subj{np(str)} + {prepnp(na,acc)}
targać się: imperf: subj{np(str)} + {prepnp(po,loc)}
targać się: imperf: subj{np(str)} + {prepnp(za,acc)}
targnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
targnąć: perf: subj{np(str)} + obj{np(inst)} + {np(dat)} + {xp(adl)}
targnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
targnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
targnąć się: perf: subj{np(str)} + {prepnp(na,acc)}
targować: imperf: subj{np(str)} + {np(str)}
targować się: imperf: subj{np(str)} + {cp(int)}
targować się: imperf: subj{np(str)} + {or}
targować się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(z,inst)}
tarzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
tarzać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
tarzać się: imperf: subj{np(str)} + {prepnp(w,loc)}
tarzać się: imperf: subj{np(str)} + {prepnp(z,gen)}
tarzać się: imperf: subj{np(str)} + {xp(locat)}
tchnąć: imperf: {np(inst)} + {prepnp(od,gen)}
tchnąć: imperf: {np(inst)} + {xp(abl)}
tchnąć: imperf: {np(inst)} + {xp(locat)}
tchnąć: imperf: subj{np(str)} + {np(inst)}
tchnąć: perf: subj{np(inst)} + obj{np(str)} + {prepnp(w,acc)}
telefonować: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(o,acc)} + {prepnp(od,gen); xp(abl)}
telefonować: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {comprepnp(w sprawie)}
telefonować: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {cp(int); cp(że); cp(żeby)}
telefonować: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {prepnp(po,acc)}
telefonować: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {prepnp(z,inst); prepncp(z,inst,że)}
terminować: imperf: subj{np(str)} + {prepnp(u,gen)}
terminować: imperf: subj{np(str)} + {prepnp(w,loc)}
terminować: imperf: subj{np(str)} + {xp(locat)}
terroryzować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
testować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,inst,sg,'wzgląd',ratr)}
testować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
tępić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
tępić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {lexnp(dat,_,'siebie',natr)}
tępić się: imperf: subj{np(str)} + {np(dat)}
tęsknić: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
tęsknić: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,int); prepncp(za,inst,że); prepncp(za,inst,żeby)}
tęsknić się: imperf: {np(dat)} + {prepnp(do,gen)}
tęsknić się: imperf: {np(dat)} + {prepnp(za,inst)}
tętnić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
tężeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
tężeć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
tężeć: imperf: subj{np(str)} + {prepnp(na,acc)}
tężeć: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(mod)}
tężeć: imperf: subj{np(str)} + {prepnp(w,acc)}
tkać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
tkać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
tkać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
tknąć: perf: {np(str)} + {cp(żeby)} + {nonch}
tknąć: perf: {np(str)} + {cp(że)} + {nonch}
tknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
tknąć się: perf: subj{np(str)} + {np(gen)}
tkwić: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
tkwić: imperf: subj{np(str)} + {xp(locat)}
tlić się: imperf: subj{np(str)} + {np(inst)}
tlić się: imperf: subj{np(str)} + {prepnp(w,loc)}
tlić się: imperf: subj{np(str)} + {xp(locat)}
tłoczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
tłoczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
tłoczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
tłoczyć się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
tłoczyć się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
tłuc: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
tłuc: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(do,gen,_,'głowa',atr)}
tłuc: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc); prepnp(w,acc)}
tłuc: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
tłuc: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(do,gen,_,'głowa',atr)}
tłuc: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
tłuc: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'miazga',atr)}
tłuc się: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
tłuc się: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
tłuc się: imperf: subj{np(str)} + {prepnp(na,loc)}
tłuc się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
tłuc się: imperf: subj{np(str)} + {prepnp(w,acc)}
tłuc się: imperf: subj{np(str)} + {xp(locat)}
tłuc się: imperf: subj{np(str)} + {xp(perl)}
tłumaczyć: imperf: subj{np(str); ncp(str,że)} + {np(str)}
tłumaczyć: imperf: subj{np(str)} + {np(dat)} + {or}
tłumaczyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {prepadjp(na,acc)} + {prepadjp(z,gen)}
tłumaczyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
tłumaczyć: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); cp(żeby); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
tłumaczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
tłumaczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
tłumaczyć się: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
tłumaczyć się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
tłumaczyć się: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
tłumaczyć się: imperf: subj{np(str)} + {np(dat)} + {or}
tłumaczyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
tłumaczyć się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
tłumaczyć się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
tłumaczyć się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
tłumaczyć się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
tłumaczyć się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
tłumić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
to: imperf: subj,controller{cp(żeby)} + controllee{advp(misc)}
to: imperf: subj,controller{cp(żeby)} + controllee{np(nom)}
to: imperf: subj,controller{cp(że)} + controllee{advp(misc)}
to: imperf: subj,controller{cp(że)} + controllee{np(nom)}
to: imperf: subj,controller{infp(_)} + controllee{infp(_)}
to: imperf: subj,controller{infp(_)} + controllee{np(nom)}
to: imperf: subj,controller{np(str); ncp(str,że)} + controllee{np(nom)}
toczyć: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
toczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
toczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
toczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
toczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
toczyć: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
toczyć się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
toczyć się: imperf: subj{lexnp(str,sg,'fortuna',natr)} + {lexnp(inst,sg,'koło',natr)}
toczyć się: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
toczyć się: imperf: subj{np(str)} + {xp(adl)}
toczyć się: imperf: subj{np(str)} + {xp(locat)}
tolerować: imperf: subj{np(str)} + {cp(gdy)}
tolerować: imperf: subj{np(str)} + {cp(jak)}
tolerować: imperf: subj{np(str)} + {cp(jeśli)}
tolerować: imperf: subj{np(str)} + {cp(kiedy)}
tolerować: imperf: subj{np(str)} + {cp(że)}
tolerować: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)}
tolerować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
tolerować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
tolerować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
tonąć: imperf: subj{np(str)} + {prepnp(po,acc)} + {prepnp(w,loc)}
topić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
topić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
topić się: imperf: subj{np(str)} + {np(dat)}
topnieć: imperf: subj{np(str)} + {np(dat)}
topnieć: imperf: subj{np(str)} + {prepnp(od,gen)}
topnieć: imperf: subj{np(str)} + {prepnp(w,loc)}
torować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
torować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
torturować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(dur)} + {xp(locat)}
towarzyszyć: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
towarzyszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
towarzyszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
towarzyszyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
towarzyszyć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
towarzyszyć: imperf: subj{np(str)} + {np(dat)} + {xp(temp)}
tracić: imperf: subj{np(str)} + {lexnp(str,sg,'grunt',natr)} + {preplexnp(pod,inst,pl,'noga',natr)}
tracić: imperf: subj{np(str)} + {np(str)} + {preplexnp(z,gen,pl,'oko',natr)}
tracić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
tracić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
tracić: imperf: subj{np(str)} + {preplexnp(w,loc,pl,'oko',ratr)}
tracić: imperf: subj{np(str)} + {prepnp(dla,gen)} + {lexnp(str,sg,'serce',natr)}
tracić: imperf: subj{np(str)} + {prepnp(do,gen)} + {lexnp(str,sg,'serce',natr)}
tracić: imperf: subj{np(str)} + {prepnp(z,gen)} + {nonch}
trafiać: imperf: {prepnp(na,acc)}
trafiać: imperf: subj{cp(int)} + {prepnp(do,gen)}
trafiać: imperf: subj{cp(że)} + {np(dat)} + {prepnp(do,gen)}
trafiać: imperf: subj{cp(że)} + {prepnp(do,gen)}
trafiać: imperf: subj{np(str); ncp(str,że)} + {prepnp(do,gen)}
trafiać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
trafiać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
trafiać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
trafiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
trafiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
trafiać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
trafiać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
trafiać: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
trafiać: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
trafiać: imperf: subj{np(str)} + {prepnp(za,acc)}
trafiać: imperf: subj{np(str)} + {prepnp(z,inst)} + {advp(misc)}
trafiać: imperf: subj{np(str)} + {xp(adl)}
trafiać się: imperf: subj,controllee{infp(_)} + controller{np(dat)}
trafiać się: imperf: subj{cp(że)} + {np(dat)}
trafiać się: imperf: subj{np(str)} + {np(dat)}
trafić: perf: {prepnp(na,acc)}
trafić: perf: subj{cp(int)} + {prepnp(do,gen)}
trafić: perf: subj{cp(że)} + {np(dat)} + {prepnp(do,gen)}
trafić: perf: subj{cp(że)} + {prepnp(do,gen)}
trafić: perf: subj{np(str); ncp(str,że)} + {prepnp(do,gen)}
trafić: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
trafić: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
trafić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
trafić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
trafić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
trafić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
trafić: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
trafić: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
trafić: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
trafić: perf: subj{np(str)} + {prepnp(za,inst)}
trafić: perf: subj{np(str)} + {prepnp(z,inst)} + {advp(misc)}
trafić: perf: subj{np(str)} + {xp(adl)}
trafić się: perf: subj,controllee{infp(_)} + controller{np(dat)}
trafić się: perf: subj{cp(że)} + {np(dat)}
trafić się: perf: subj{np(str)} + {np(dat)}
traktować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
traktować: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {refl}
traktować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
traktować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
traktować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
traktować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
traktować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
traktować: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
transmitować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {fixed('na żywo')}
transmitować: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
transportować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
transportować: imperf: subj{np(str)} + obj{np(str)} + {np(str)} + {xp(abl)} + {xp(adl)} + {xp(locat)}
trapić: imperf: subj{cp(int)} + {np(str)}
trapić: imperf: subj{cp(że)} + {np(str)}
trapić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
trapić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
trapić się: imperf: subj{np(str)} + {cp(int)}
trapić się: imperf: subj{np(str)} + {cp(że)}
trapić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
trapić się: imperf: subj{np(str)} + {or}
trapić się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
trawić: imperf: subj{np(str)} + {cp(gdy); cp(kiedy)}
trawić: imperf: subj{np(str)} + {cp(jak)}
trawić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)} + {np(inst)}
trawić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
trawić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
trawić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
trawić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
trawić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
trawić się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
trawić się: imperf: subj{np(str)} + {np(inst)}
trąbić: imperf: subj{np(str)} + {comprepnp(na temat)}
trąbić: imperf: subj{np(str)} + {cp(int)} + {xp(abl)}
trąbić: imperf: subj{np(str)} + {cp(int)} + {xp(adl)}
trąbić: imperf: subj{np(str)} + {cp(int)} + {xp(locat)}
trąbić: imperf: subj{np(str)} + {cp(żeby)} + {xp(abl)}
trąbić: imperf: subj{np(str)} + {cp(żeby)} + {xp(adl)}
trąbić: imperf: subj{np(str)} + {cp(żeby)} + {xp(locat)}
trąbić: imperf: subj{np(str)} + {cp(że)} + {xp(abl)}
trąbić: imperf: subj{np(str)} + {cp(że)} + {xp(adl)}
trąbić: imperf: subj{np(str)} + {cp(że)} + {xp(locat)}
trąbić: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
trąbić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
trąbić: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
trąbić: imperf: subj{np(str)} + {np(dat)} + {or}
trąbić: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,_,'ucho',atr)}
trąbić: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
trąbić: imperf: subj{np(str)} + {np(inst)}
trąbić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
trąbić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
trąbić: imperf: subj{np(str)} + {prepnp(do,gen)}
trąbić: imperf: subj{np(str)} + {prepnp(na,acc)}
trąbić: imperf: subj{np(str)} + {prepnp(na,loc)}
trąbić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {xp(abl)}
trąbić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {xp(adl)}
trąbić: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {xp(locat)}
trąbić: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
trąbić: imperf: subj{np(str)} + {prepnp(w,acc)}
trąbić: imperf: subj{np(str)} + {xp(abl)} + {or}
trąbić: imperf: subj{np(str)} + {xp(adl)} + {or}
trąbić: imperf: subj{np(str)} + {xp(locat)} + {or}
trącać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
trącać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
trącić: imperf: subj{np(str)} + {np(inst)}
trącić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
trącić się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
trenować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
trenować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
trenować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
trenować: imperf: subj{np(str)} + {prepnp(od,gen)} + {prepnp(z,inst)}
trenować: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
trenować się: imperf: subj{np(str)} + {prepnp(w,loc)}
triumfować: imperf: subj{np(str)} + {cp(że)}
triumfować: imperf: subj{np(str)} + {np(inst)}
triumfować: imperf: subj{np(str)} + {or}
triumfować: imperf: subj{np(str)} + {prepnp(nad,inst)} + {prepnp(w,loc)}
tropić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
tropić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
tropić: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
tropić: imperf: subj{np(str)} + {prepnp(za,inst)} + {xp(locat)}
tropić: imperf: subj{np(str)} + {prepnp(za,inst)} + {xp(perl)}
tropić się: imperf: subj{np(str)}
troszczyć się: imperf: subj{np(str)} + {cp(int)}
troszczyć się: imperf: subj{np(str)} + {cp(że)}
troszczyć się: imperf: subj{np(str)} + {cp(żeby)}
troszczyć się: imperf: subj{np(str)} + {np(inst)}
troszczyć się: imperf: subj{np(str)} + {or}
troszczyć się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
truć: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {cp(że)}
truć: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {cp(żeby)}
truć: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
truć: imperf: subj{np(str)} + {np(inst)} + {refl}
truć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
truć się: imperf: subj{np(str)} + {np(inst)}
trudnić się: imperf: subj{np(str)} + {np(inst)}
trwać: imperf: subj,controller{np(str)} + controllee{xp(mod)}
trwać: imperf: subj{np(str)} + {prepnp(przy,loc)}
trwać: imperf: subj{np(str)} + {prepnp(w,loc)}
trwać: imperf: subj{np(str)} + {xp(dur)}
trwać: imperf: subj{np(str)} + {xp(locat)}
trwonić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
tryskać: imperf: {np(inst)} + {prepnp(od,gen)}
tryskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {prepnp(z,gen)}
tryskać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
tryskać: imperf: subj{np(str)} + {prepnp(od,gen)}
trysnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
trysnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
trysnąć: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
trzaskać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
trzaskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
trzaskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
trzaskać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
trzaskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
trzaskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
trzaskać: imperf: subj{np(str)} + {prepnp(z,gen)}
trzasnąć: perf: subj{np(str)}
trzasnąć: perf: subj{np(str)} + {np(inst)}
trzasnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
trzasnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
trzasnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
trzasnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
trzasnąć: perf: subj{np(str)} + {prepnp(o,acc)}
trzasnąć: perf: subj{np(str)} + {prepnp(z,gen)}
trząść: imperf: {np(inst)}
trząść: imperf: obj{np(str)}
trząść: imperf: subj{np(str)} + {np(inst)} + {prepnp(nad,inst)}
trząść: imperf: subj{np(str)} + obj{np(str)}
trząść się: imperf: subj,controller{np(str)} + controllee{prepnp(jak,str)}
trząść się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen); prepnp(z,gen)}
trząść się: imperf: subj{np(str)} + {prepnp(do,gen)}
trząść się: imperf: subj{np(str)} + {prepnp(nad,inst)}
trząść się: imperf: subj{np(str)} + {prepnp(o,acc)}
trzeba: imperf: {advp(pron)}
trzeba: imperf: controller{np(dat)} + controllee{infp(_)} + {cp(żeby)}
trzeba: imperf: {np(dat)} + {np(gen)} + {cp(żeby)}
trzeba: imperf: {np(dat)} + {np(gen)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
trzeba: imperf: {np(dat)} + {np(gen)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
trzeba: imperf: {np(gen)} + {cp(że)}
trzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
trzeć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
trzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
trzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
trzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
trzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
trzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
trzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
trzepać: imperf: subj{np(str)} + {np(inst)} + {cp(że)}
trzepać: imperf: subj{np(str)} + {np(inst)} + {or}
trzepać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
trzepać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
trzepać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
trzepać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
trzepać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
trzepać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
trzepać się: imperf: subj{np(str)} + {xp(locat)}
trzepnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
trzepnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
trzepnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
trzepnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
trzepnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
trzepotać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
trzepotać: imperf: subj{np(str)} + {np(inst)}
trzepotać: imperf: subj{np(str)} + {prepnp(na,loc)}
trzepotać: imperf: subj{np(str)} + {prepnp(od,gen)}
trzepotać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
trzymać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
trzymać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
trzymać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
trzymać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
trzymać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
trzymać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
trzymać: imperf: subj{np(str)} + {prepnp(za,acc)} + {refl}
trzymać się: imperf: subj{np(str)} + {np(gen)} + {np(inst)}
trzymać się: imperf: subj{np(str)} + {prepnp(na,loc)}
trzymać się: imperf: subj{np(str)} + {prepnp(pod,acc)}
trzymać się: imperf: subj{np(str)} + {prepnp(za,inst)}
trzymać się: imperf: subj{np(str)} + {prepnp(z,inst)}
tulić: imperf: subj{np(str)} + {lexnp(str,pl,'ucho',natr)} + {preplexnp(po,loc,_,'siebie',natr)}
tulić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
tulić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
tulić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
tulić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
tulić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
tulić się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
tulić się: imperf: subj{np(str)} + {prepnp(w,loc)}
tułać się: imperf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
tułać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
tułać się: imperf: subj{np(str)} + {xp(perl)}
tupać: imperf: subj{np(str)} + {cp(żeby)}
tupać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
tupać: imperf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst)}
tupać: imperf: subj{np(str)} + {np(inst)} + {cp(że)}
tupać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(dur)} + {xp(locat)}
tupać: imperf: subj{np(str)} + {np(inst)} + {xp(mod)} + {xp(temp)}
tupać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
tupać: imperf: subj{np(str)} + {or}
twierdzić: imperf: subj{np(str)} + {advp(pron)}
twierdzić: imperf: subj{np(str)} + {cp(jakoby)}
twierdzić: imperf: subj{np(str)} + {cp(że)}
twierdzić: imperf: subj{np(str)} + {cp(żeby)}
twierdzić: imperf: subj{np(str)} + {nonch}
twierdzić: imperf: subj{np(str)} + {or}
tworzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
tworzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
tworzyć się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
tworzyć się: imperf: subj{np(str)} + {prepnp(z,gen)}
tyć: imperf: subj{np(str)} + {comprepnp(z powodu)}
tyć: imperf: subj{np(str)} + {np(str)}
tyć: imperf: subj{np(str)} + {prepnp(na,loc)}
tyć: imperf: subj{np(str)} + {prepnp(o,acc)}
tyć: imperf: subj{np(str)} + {prepnp(od,gen)}
tyć: imperf: subj{np(str)} + {prepnp(z,gen)}
tykać: imperf: subj{np(str)} + obj{np(gen)} + {np(inst)}
tykać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
tykać się: imperf: subj{np(str)} + {np(gen)}
typować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
typować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
typować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
typować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
tytułować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
tytułować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(jako,str)}
tytułować się: imperf: subj{np(str)} + {np(inst)}
tytułować się: imperf: subj{np(str)} + {or}
tytułować się: imperf: subj{np(str)} + {prepnp(jako,str)}
uaktualnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {advp(misc)}
uaktualnić się: perf: subj{np(str)} + {np(dat)} + {advp(misc)}
ubawić: perf: subj{cp(int)} + {np(str)}
ubawić: perf: subj{cp(że)} + {np(str)}
ubawić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
ubawić: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
ubawić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
ubezpieczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)} + {prepnp(u,gen); xp(locat)}
ubezpieczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
ubezpieczać się: imperf: subj{np(str)} + {prepnp(na,gen); prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)} + {prepnp(u,gen); xp(locat)}
ubezpieczać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
ubezpieczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)} + {prepnp(u,gen); xp(locat)}
ubezpieczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
ubezpieczyć się: perf: subj{np(str)} + {prepnp(na,acc); prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)} + {prepnp(u,gen); xp(locat)}
ubezpieczyć się: perf: subj{np(str)} + {prepnp(przed,inst)}
ubić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ubić się: perf: subj{np(str)}
ubiec: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
ubiec: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
ubiegać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
ubiegać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
ubiegać się: imperf: subj{np(str)} + {cp(żeby)}
ubiegać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
ubierać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
ubierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ubierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ubierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ubierać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
ubierać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
ubierać się: imperf: subj{np(str)} + {prepnp(u,gen)}
ubierać się: imperf: subj{np(str)} + {xp(locat)}
ubijać: imperf: subj{np(str)} + obj{lexnp(str,_,'interes',atr)} + {prepnp(z,inst)}
ubijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
ubijać się: imperf: subj{np(str)} + {prepnp(od,gen)}
ubijać się: imperf: subj{np(str)} + {prepnp(w,acc)}
ubliżać: imperf: subj{ncp(str,int)} + {np(dat)}
ubliżać: imperf: subj{ncp(str,że)} + {np(dat)}
ubliżać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
ubliżać: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
ubolewać: imperf: subj{np(str)} + {cp(że)}
ubolewać: imperf: subj{np(str)} + {or}
ubolewać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
ubóstwiać: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
ubóstwiać: imperf: subj{np(str)} + {cp(gdy)}
ubóstwiać: imperf: subj{np(str)} + {cp(jak)}
ubóstwiać: imperf: subj{np(str)} + {cp(kiedy)}
ubóstwiać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(w,loc)}
ubóstwiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
ubrać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
ubrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ubrać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ubrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ubrać: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
ubrać się: perf: subj,controller{np(str)} + controllee{xp(mod)}
ubrać się: perf: subj{np(str)} + {prepnp(u,gen)}
ubrać się: perf: subj{np(str)} + {xp(locat)}
ubyć: perf: {np(dat)} + {np(gen)} + {prepnp(od,gen)}
ubyć: perf: {np(dat)} + {np(gen)} + {xp(abl)}
ubyć: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
ubyć: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
ubywać: imperf: {np(dat)} + {np(gen)} + {prepnp(od,gen)}
ubywać: imperf: {np(dat)} + {np(gen)} + {xp(abl)}
ubywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
ubywać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
ubzdurać: perf: subj,controller{np(str)} + controllee{infp(_)} + {lexnp(dat,_,'sobie',natr)}
ubzdurać: perf: subj{np(str)} + {cp(żeby)} + {lexnp(dat,_,'sobie',natr)}
ubzdurać: perf: subj{np(str)} + {cp(że)} + {lexnp(dat,_,'sobie',natr)}
ubzdurać: perf: subj{np(str)} + {np(str); ncp(str,że)} + {lexnp(dat,_,'sobie',natr)}
ubzdurać się: perf: controller{np(dat)} + controllee{infp(_)}
ubzdurać się: perf: {np(dat)} + {cp(że)}
ubzdurać się: perf: subj{np(str); ncp(str,że)} + {np(dat)}
uchodzić: imperf: controller{np(dat)} + controllee{infp(_)}
uchodzić: imperf: subj,controller{cp(że)} + controllee{prepnp(za,acc)}
uchodzić: imperf: subj,controller{infp(_)} + controllee{prepnp(za,acc)}
uchodzić: imperf: subj,controller{np(str)} + controllee{prepadjp(za,acc)}
uchodzić: imperf: subj,controller{np(str)} + controllee{prepnp(za,acc)}
uchodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
uchodzić: imperf: subj{np(str)} + {xp(abl)}
uchronić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
uchronić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)}
uchronić się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,że); prepncp(od,gen,żeby)}
uchronić się: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,że); prepncp(przed,inst,żeby)}
uchwalać: imperf: subj{np(str)} + {cp(że)}
uchwalać: imperf: subj{np(str)} + {cp(żeby)}
uchwalać: imperf: subj{np(str)} + obj{np(str)}
uchwalić: perf: subj{np(str)} + {cp(że)}
uchwalić: perf: subj{np(str)} + {cp(żeby)}
uchwalić: perf: subj{np(str)} + obj{np(str)}
uchwalić: perf: subj{np(str)} + {or}
uchwycić: perf: subj{np(str)} + obj{cp(int)} + {np(inst)}
uchwycić: perf: subj{np(str)} + obj{cp(jak)} + {np(inst)}
uchwycić: perf: subj{np(str)} + obj{cp(kiedy)} + {np(inst)}
uchwycić: perf: subj{np(str)} + obj{cp(że)} + {np(inst)}
uchwycić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(inst)}
uchwycić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
uchwycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
uchwycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
uchwycić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
uchwycić: perf: subj{np(str)} + {prepnp(na,loc)} + {refl}
uchwycić: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
uchwycić się: perf: subj{np(str)} + {np(gen)} + {np(inst)}
uchwycić się: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)}
uchybić: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
uchybić: perf: subj{np(str)} + {prepnp(w,loc)}
uchylać: imperf: subj{np(str)} + {np(dat)} + {np(gen)} + {lexnp(gen,sg,'rąbek',natr)}
uchylać: imperf: subj{np(str)} + {np(gen)} + {prepnp(przed,inst)} + {lexnp(str,sg,'rąbek',natr)}
uchylać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
uchylać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
uchylać się: imperf: subj{np(str)} + {prepnp(od,gen)}
uchylać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
uchylać się: imperf: subj{np(str)} + {xp(adl)}
uchylić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
uchylić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
uchylić się: perf: subj{np(str)} + {prepnp(od,gen)}
uchylić się: perf: subj{np(str)} + {prepnp(przed,inst)}
uchylić się: perf: subj{np(str)} + {xp(adl)}
uciąć: perf: subj{np(str)} + obj{lexnp(str,sg,'drzemka',atr)} + {xp(locat)} + {lexnp(dat,_,'siebie',natr)}
uciąć: perf: subj{np(str)} + obj{lexnp(str,sg,'partyjka',atr)} + {lexnp(dat,_,'siebie',natr)}
uciąć: perf: subj{np(str)} + obj{lexnp(str,sg,'pogawędka',atr)} + {prepnp(z,inst)} + {lexnp(dat,_,'siebie',natr)}
uciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uciąć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uciąć: perf: subj{np(str)} + obj{np(str)} + {prepncp(na,loc,że)}
uciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
uciąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
uciąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
uciąć się: perf: subj{np(str)} + {np(dat)}
uciąć się: perf: subj{np(str)} + {xp(locat)}
uciec: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
uciec: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
uciec: perf: subj{np(str)} + {prepnp(do,gen)}
uciec: perf: subj{np(str)} + {prepnp(od,gen)}
uciec: perf: subj{np(str)} + {prepnp(przed,inst)}
uciec: perf: subj{np(str)} + {prepnp(z,inst)}
uciec się: perf: subj{np(str)} + {prepnp(do,gen)}
uciec się: perf: subj{np(str)} + {prepnp(pod,acc)}
uciekać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
uciekać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
uciekać: imperf: subj{np(str)} + {prepnp(do,gen)}
uciekać: imperf: subj{np(str)} + {prepnp(od,gen)}
uciekać: imperf: subj{np(str)} + {prepnp(przed,inst)}
uciekać: imperf: subj{np(str)} + {prepnp(z,inst)}
uciekać się: imperf: subj{np(str)} + {prepnp(do,gen)}
uciekać się: imperf: subj{np(str)} + {prepnp(pod,acc)}
ucierpieć: perf: subj{np(str)} + {prepnp(od,gen); prepnp(przez,acc); comprepnp(z powodu); prepncp(od,gen,że); prepncp(przez,acc,że); xp(temp); preplexnp(na,acc,sg,'skutek',natr); preplexnp(w,loc,sg,'wynik',natr)} + {advp(misc)}
ucieszyć: perf: subj{cp(że)} + {np(str)}
ucieszyć: perf: subj{np(str); ncp(str,że)} + obj{np(str)}
ucieszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ucieszyć się: perf: subj{np(str)} + {cp(że)}
ucieszyć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
ucieszyć się: perf: subj{np(str)} + {or}
ucieszyć się: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
ucinać: imperf: subj{np(str)} + obj{lexnp(str,sg,'drzemka',atr)} + {xp(locat)} + {lexnp(dat,_,'siebie',natr)}
ucinać: imperf: subj{np(str)} + obj{lexnp(str,sg,'partyjka',atr)} + {lexnp(dat,_,'siebie',natr)}
ucinać: imperf: subj{np(str)} + obj{lexnp(str,sg,'pogawędka',atr)} + {prepnp(z,inst)} + {lexnp(dat,_,'siebie',natr)}
ucinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ucinać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
ucinać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(na,loc,że)}
ucinać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ucinać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
ucinać się: imperf: subj{np(str)} + {np(dat)}
ucinać się: imperf: subj{np(str)} + {xp(locat)}
uciskać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
uciskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uciskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {fixed('miejsce przy miejscu')}
uciskać: imperf: subj{np(str)} + obj{np(str)} + {np(str)} + {xp(adl)}
uciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
uciskać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
uciszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
uciszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {or}
uciszać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
uciszać się: imperf: subj{np(str)}
uciszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
uciszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {or}
uciszyć się: perf: subj{np(str)}
uczcić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
uczestniczyć: imperf: subj{np(str)} + {prepnp(w,loc)}
uczęszczać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
uczęszczać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
uczulać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
uczulać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
uczulać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
uczulać: imperf: subj{np(str)} + obj{np(str)} + {or}
uczulać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
uczulać się: imperf: subj{np(str)} + {prepnp(na,acc)}
uczulać się: imperf: subj{np(str)} + {prepnp(od,gen)}
uczulić: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
uczulić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
uczulić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
uczulić: perf: subj{np(str)} + obj{np(str)} + {or}
uczulić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
uczulić się: perf: subj{np(str)} + {prepnp(na,acc)}
uczulić się: perf: subj{np(str)} + {prepnp(od,gen)}
uczyć: imperf: subj{np(str)} + {np(gen)} + {xp(locat)}
uczyć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(gen); prepnp(o,loc); cp(int); cp(że); cp(żeby); ncp(gen,int); ncp(gen,że); ncp(gen,żeby); prepncp(o,loc,int); prepncp(o,loc,że); infp(imperf)} + {np(inst)}
uczyć: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)} + {nonch}
uczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
uczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {nonch}
uczyć się: imperf: subj,controller{np(str)} + controllee{np(gen); prepnp(o,loc); cp(int); cp(że); cp(żeby); ncp(gen,int); ncp(gen,że); ncp(gen,żeby); prepncp(o,loc,int); prepncp(o,loc,że); infp(imperf)} + {prepnp(od,gen); prepnp(z,gen); prepnp(z,inst)}
uczyć się: imperf: subj{np(str)} + {advp(misc)}
uczyć się: imperf: subj{np(str)} + {comprepnp(na temat)} + {nonch}
uczyć się: imperf: subj{np(str)} + {np(gen)} + {prepnp(do,gen)}
uczyć się: imperf: subj{np(str)} + {np(gen)} + {prepnp(u,gen)}
uczyć się: imperf: subj{np(str)} + {np(gen)} + {xp(locat)}
uczyć się: imperf: subj{np(str)} + {preplexnp(na,loc,pl,'błąd',batr)}
uczyć się: imperf: subj{np(str)} + {prepnp(na,acc)}
uczyć się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(od,gen); prepnp(z,gen)} + {nonch}
uczynić: perf: subj{np(str)} + {cp(że)} + {advp(misc)}
uczynić: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {lexnp(str,sg,'wrażenie',atr)}
uczynić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
uczynić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
uczynić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
uczynić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
uczynić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
uczynić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
uczynić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
uczynić się: perf: {np(dat)} + {xp(locat)} + {advp(misc)}
uczynić się: perf: subj,controller{np(str)} + controllee{adjp(pred)}
udać: perf: subj,controller{np(str)} + controllee{adjp(str)}
udać: perf: subj,controller{np(str)} + controllee{np(str)}
udać: perf: subj{np(str)} + {cp(że)}
udać: perf: subj{np(str)} + obj{np(str)}
udać się: perf: controller{np(dat)} + controllee{infp(_)}
udać się: perf: subj{np(str)} + {np(dat)}
udać się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
udać się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
udać się: perf: subj{np(str)} + {xp(adl)}
udaremnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
udawać: imperf: subj,controller{np(str)} + controllee{adjp(str)}
udawać: imperf: subj,controller{np(str)} + controllee{np(str)}
udawać: imperf: subj{np(str)} + {cp(że)}
udawać: imperf: subj{np(str)} + obj{np(str)}
udawać się: imperf: controller{np(dat)} + controllee{infp(_)}
udawać się: imperf: subj{np(str)} + {np(dat)}
udawać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
udawać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
udawać się: imperf: subj{np(str)} + {xp(adl)}
uderzać: imperf: subj{cp(że)} + {np(str)}
uderzać: imperf: subj{lexnp(str,sg,'serce',natr)} + {np(dat)} + {advp(misc)}
uderzać: imperf: subj{np(str); ncp(str,że)} + {np(str)}
uderzać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
uderzać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
uderzać: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
uderzać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
uderzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
uderzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
uderzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
uderzać: imperf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w sprawie)}
uderzać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
uderzać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
uderzać: imperf: subj{np(str)} + {prepnp(na,acc)}
uderzać: imperf: subj{np(str)} + {prepnp(na,loc)}
uderzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
uderzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
uderzać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,acc)}
uderzyć: perf: subj{cp(że)} + {np(str)}
uderzyć: perf: subj{np(str); ncp(str,że)} + {np(str)}
uderzyć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
uderzyć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
uderzyć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
uderzyć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
uderzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
uderzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
uderzyć: perf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w sprawie)}
uderzyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
uderzyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
uderzyć: perf: subj{np(str)} + {prepnp(na,acc)}
uderzyć: perf: subj{np(str)} + {prepnp(na,loc)}
uderzyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
uderzyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
uderzyć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,acc)}
udobruchać: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
udobruchać: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
udobruchać się: perf: subj{np(str)}
udokumentować: perf: subj{np(str)} + obj{cp(int); cp(że)} + {np(inst)}
udokumentować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
udostępniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepnp(na,acc); prepnp(pod,acc)} + {xp(locat)}
udostępniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
udostępnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepnp(na,acc); prepnp(pod,acc)} + {xp(locat)}
udostępnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
udowadniać: imperf: subj{np(str)} + {np(dat)} + {or}
udowadniać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)}
udowadniać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
udowadniać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
udowodnić: perf: subj{np(str)} + {np(dat)} + {or}
udowodnić: perf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)}
udowodnić: perf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
udowodnić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
udzielać: imperf: subj{np(str)} + obj{np(gen)} + {np(dat)}
udzielać się: imperf: subj{np(str)} + {advp(misc)}
udzielać się: imperf: subj{np(str)} + {np(dat)}
udzielać się: imperf: subj{np(str)} + {prepnp(na,loc)}
udzielać się: imperf: subj{np(str)} + {prepnp(w,loc)}
udzielić: perf: subj{np(str)} + obj{np(gen)} + {np(dat)}
udzielić się: perf: subj{np(str)} + {advp(misc)}
udzielić się: perf: subj{np(str)} + {np(dat)}
udzielić się: perf: subj{np(str)} + {prepnp(na,loc)}
udzielić się: perf: subj{np(str)} + {prepnp(w,loc)}
ufać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
ufać: imperf: subj{np(str)} + {np(dat); ncp(dat,że)}
ufać: imperf: subj{np(str)} + {prepnp(w,acc); prepncp(w,acc,że)}
ufundować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ufundować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
uganiać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {prepnp(za,inst)}
uganiać się: imperf: subj{np(str)} + {prepnp(za,inst)} + {xp(locat)}
ugiąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ugiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
ugiąć: perf: subj{np(str)} + {prepnp(przed,inst)} + {lexnp(gen,sg,'kark',batr)}
ugiąć się: perf: subj{np(str)} + {prepnp(od,gen)}
ugiąć się: perf: subj{np(str)} + {prepnp(pod,inst)}
ugiąć się: perf: subj{np(str)} + {prepnp(przed,inst)}
uginać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
uginać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
uginać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {lexnp(gen,sg,'kark',batr)}
uginać się: perf: subj{np(str)} + {prepnp(od,gen)}
uginać się: perf: subj{np(str)} + {prepnp(pod,inst)}
uginać się: perf: subj{np(str)} + {prepnp(przed,inst)}
ugościć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ugościć: perf: subj{np(str)} + obj{np(str)} + {prepadjp(po,postp)}
ugościć: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
ugościć się: perf: subj{np(str)} + {np(inst)}
ugotować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
ugotować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
ugotować się: perf: subj{np(str)} + {prepnp(od,gen)}
ugotować się: perf: subj{np(str)} + {prepnp(w,loc)}
ugotować się: perf: subj{np(str)} + {xp(locat)}
ugryźć: perf: subj{np(str)} + {np(str); ncp(str,int); ncp(str,że)}
ugryźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ugryźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ugryźć: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
uhonorować: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst); ncp(inst,że)}
uiścić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ujadać: imperf: subj{np(str)} + {or}
ujadać: imperf: subj{np(str)} + {prepnp(na,acc)}
ujadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
ujadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
ujadać: imperf: subj{np(str)} + {prepnp(o,acc)}
ujadać: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
ujarzmić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ujawniać: imperf: subj{np(str)} + obj{cp(int); cp(że)}
ujawniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ujawniać się: imperf: subj{np(str)} + {np(dat)}
ujawniać się: imperf: subj{np(str)} + {xp(locat)}
ujawniać się: imperf: subj{np(str)} + {xp(temp)}
ujawnić: perf: subj{np(str)} + obj{cp(int); cp(że)} + {np(dat)}
ujawnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ujawnić się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
ujawnić się: perf: subj{np(str)} + {np(dat)}
ujawnić się: perf: subj{np(str)} + {xp(locat)}
ujawnić się: perf: subj{np(str)} + {xp(temp)}
ująć: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)} + {or}
ująć: perf: subj{cp(że)} + {np(str)} + {prepnp(w,loc)}
ująć: perf: subj{np(str); ncp(str,że)} + {np(str)} + {prepnp(w,loc)}
ująć: perf: subj{np(str)} + {np(dat)} + {np(gen)}
ująć: perf: subj{np(str)} + {np(gen)} + {prepnp(z,gen)}
ująć: perf: subj{np(str)} + obj{cp(że)}
ująć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ująć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
ująć: perf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
ująć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
ująć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ująć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ująć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
ująć: perf: subj{np(str)} + {prepnp(pod,acc)} + {refl}
ująć: perf: subj{np(str)} + {prepnp(za,acc)} + {refl}
ująć się: perf: subj{np(str)} + {lexnp(inst,sg,'honor',natr)}
ująć się: perf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,żeby)} + {or}
ujednolicać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,inst)}
ujednolicać się: imperf: subj{np(str)} + {prepnp(z,inst)}
ujednolicić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,inst)}
ujednolicić się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
ujmować: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)} + {or}
ujmować: imperf: subj{cp(że)} + {np(str)} + {prepnp(w,loc)}
ujmować: imperf: subj{np(str); ncp(str,że)} + {np(str)} + {prepnp(w,loc)}
ujmować: imperf: subj{np(str)} + {np(dat)} + {np(gen)}
ujmować: imperf: subj{np(str)} + {np(gen)} + {prepnp(z,gen)}
ujmować: imperf: subj{np(str)} + obj{cp(że)}
ujmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ujmować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
ujmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(między,acc)}
ujmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
ujmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ujmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ujmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
ujmować: imperf: subj{np(str)} + {prepnp(pod,acc)} + {refl}
ujmować: imperf: subj{np(str)} + {prepnp(za,acc)} + {refl}
ujmować się: imperf: subj{np(str)} + {lexnp(inst,sg,'honor',natr)}
ujmować się: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,żeby)} + {or}
ujrzeć: perf: subj{np(str)} + {cp(int)}
ujrzeć: perf: subj{np(str)} + {cp(jak)}
ujrzeć: perf: subj{np(str)} + {cp(że)}
ujrzeć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,pl,'oko',batr)}
ujrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ujść: perf: controller{np(dat)} + controllee{infp(_)}
ujść: perf: subj,controller{cp(że)} + controllee{prepnp(za,acc)}
ujść: perf: subj,controller{infp(_)} + controllee{prepnp(za,acc)}
ujść: perf: subj,controller{np(str)} + controllee{prepadjp(za,acc)}
ujść: perf: subj,controller{np(str)} + controllee{prepnp(za,acc)}
ujść: perf: subj{np(str)} + {np(dat)} + {fixed('na sucho')}
ujść: perf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'płaz',natr)}
ujść: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ujść: perf: subj{np(str)} + {xp(abl)}
ukarać: perf: subj{np(str)} + {np(inst)} + {prepncp(za,acc,że)} + {refl}
ukarać: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
ukarać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepncp(za,acc,że)}
ukarać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
ukazać: perf: subj{np(str)} + {cp(int)}
ukazać: perf: subj{np(str)} + {cp(że)}
ukazać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
ukazać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
ukazać się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
ukazać się: perf: subj{np(str)} + {np(dat)}
ukazać się: perf: subj{np(str)} + {xp(locat)}
ukazywać: imperf: subj{np(str)} + {cp(int)}
ukazywać: imperf: subj{np(str)} + {cp(że)}
ukazywać: imperf: subj{np(str)} + {ncp(str,int)}
ukazywać: imperf: subj{np(str)} + {ncp(str,że)}
ukazywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
ukazywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ukazywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
ukazywać się: imperf: subj{np(str)} + {np(dat)}
ukazywać się: imperf: subj{np(str)} + {xp(locat)}
układać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(imperf)}
układać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
układać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
układać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
układać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
układać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
układać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
układać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
układać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
układać się: imperf: {np(dat)} + {prepnp(z,inst)} + {advp(misc)}
układać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
układać się: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
układać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
układać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
układać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {advp(misc)}
układać się: imperf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
układać się: imperf: subj{np(str)} + {prepnp(pod,acc)}
układać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
układać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
układać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
układać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
układać się: imperf: subj{np(str)} + {xp(locat)}
ukłonić się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {prepnp(od,gen)}
ukłonić się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(abl)}
ukłonić się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
ukonstytuować: perf: subj{np(str)} + obj{np(str)}
ukonstytuować się: perf: subj{np(str)} + {np(dat)} + {xp(temp)}
ukonstytuować się: perf: subj{np(str)} + {preplexnp(w,loc,sg,'skład',ratr)}
ukończyć: perf: subj{np(str)} + obj{np(str)}
ukraść: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ukrócić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
ukryć: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {prepnp(przed,inst)} + {xp(locat)}
ukryć: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
ukryć: perf: subj{np(str)} + {prepnp(przed,inst)} + {xp(locat)} + {refl}
ukrywać: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {prepnp(przed,inst)} + {xp(locat)}
ukrywać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,loc,sg,'sobie',natr)}
ukrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
ukrywać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
ukrywać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(locat)} + {refl}
ukrywać się: imperf: subj{np(str)} + {prepnp(pod,inst)}
ukrywać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,inst)}
ukształtować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ukształtować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ukształtować się: perf: subj{np(str)} + {np(inst)}
ukształtować się: perf: subj{np(str)} + {xp(locat)}
ulać: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(z,gen)}
ulać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ulać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
ulać się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ulać się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
ulatniać się: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
ulatywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ulatywać: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(przez,acc)} + {xp(abl)} + {xp(adl)}
ulatywać: imperf: subj{np(str)} + {prepnp(z,inst)}
ulec: perf: subj{np(str)} + {np(dat)} + {comprepnp(w kwestii)}
ulec: perf: subj{np(str)} + {np(dat)} + {comprepnp(w sprawie)}
ulec: perf: subj{np(str)} + {np(dat); ncp(dat,że)}
ulec: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
ulecieć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
ulecieć: perf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(przez,acc)} + {xp(abl)} + {xp(adl)}
ulecieć: perf: subj{np(str)} + {prepnp(z,inst)}
uleczyć: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
uleczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
uleczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
uleczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
uleczyć: perf: subj{np(str)} + {prepnp(z,gen)} + {preplexnp(za,inst,sg,'pomoc',ratr)} + {refl}
ulegać: imperf: subj{cp(int)} + {lexnp(dat,sg,'kwestia',atr)}
ulegać: imperf: subj{cp(int)} + {lexnp(dat,sg,'wątpliwość',atr)}
ulegać: imperf: subj{cp(że)} + {lexnp(dat,sg,'kwestia',atr)}
ulegać: imperf: subj{cp(że)} + {lexnp(dat,sg,'wątpliwość',atr)}
ulegać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {lexnp(dat,sg,'kwestia',atr)}
ulegać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {lexnp(dat,sg,'wątpliwość',atr)}
ulegać: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w kwestii)}
ulegać: imperf: subj{np(str)} + {np(dat)} + {comprepnp(w sprawie)}
ulegać: imperf: subj{np(str)} + {np(dat); ncp(dat,że)}
ulegać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
ulepszać: imperf: subj{np(str)} + obj{np(str)}
ulepszyć: perf: subj{np(str)} + obj{np(str)}
ulokować: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
ulokować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ulokować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ulokować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
ulokować się: perf: subj{np(str)} + {prepnp(u,gen)}
ulokować się: perf: subj{np(str)} + {xp(locat)}
ulotnić się: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
ulżyć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
ulżyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
ułatwiać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)}
ułatwić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)}
ułożyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{infp(imperf)}
ułożyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
ułożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
ułożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
ułożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
ułożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
ułożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ułożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
ułożyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
ułożyć się: perf: {np(dat)} + {prepnp(z,inst)} + {advp(misc)}
ułożyć się: perf: subj,controller{np(str)} + controllee{infp(_)}
ułożyć się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(na,loc)}
ułożyć się: perf: subj{np(str)} + {np(dat)} + {advp(misc)}
ułożyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
ułożyć się: perf: subj{np(str)} + {prepnp(do,gen)} + {advp(misc)}
ułożyć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
ułożyć się: perf: subj{np(str)} + {prepnp(pod,acc)}
ułożyć się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
ułożyć się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
ułożyć się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
ułożyć się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
ułożyć się: perf: subj{np(str)} + {xp(locat)}
umacniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
umacniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
umacniać się: imperf: subj{np(str)} + {prepnp(w,loc)}
umarzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
umawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
umawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
umawiać się: imperf: subj{np(str)} + {prepnp(co do,gen); prepncp(co do,gen,int); prepncp(co do,gen,że)} + {prepnp(z,inst)}
umawiać się: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc)} + {prepnp(z,inst)}
umawiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
umawiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
umawiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
umawiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepncp(na,acc,int)}
umawiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepncp(na,acc,że)}
umawiać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)} + {xp(temp)}
umieć: imperf: subj,controller{np(str)} + controllee{np(str); infp(_)}
umieć: imperf: subj{np(str)} + {prepadjp(po,postp)}
umiejscowić: perf: subj{np(str)} + {np(dat)} + {xp(locat)} + {refl}
umiejscowić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
umiejscowić się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
umierać: imperf: subj{np(str)} + {lexnp(inst,sg,'śmierć',atr)}
umierać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepnp(od,gen); prepnp(wskutek,gen); prepnp(z,gen); comprepnp(z powodu)}
umierać: imperf: subj{np(str)} + {prepnp(dla,gen)}
umierać: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że); prepncp(za,acc,żeby)}
umieszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
umieszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); xp(locat)}
umieszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
umieszczać się: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
umieścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
umieścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); xp(locat)}
umieścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
umieścić się: perf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
umilać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
umilić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
umknąć: perf: subj{cp(int)} + {lexnp(gen,sg,'uwaga',ratr)}
umknąć: perf: subj{cp(int)} + {np(dat)}
umknąć: perf: subj{cp(że)} + {lexnp(gen,sg,'uwaga',ratr)}
umknąć: perf: subj{cp(że)} + {np(dat)}
umknąć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {lexnp(gen,sg,'uwaga',ratr)}
umknąć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
umknąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
umknąć: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)} + {xp(adl)}
umknąć: perf: subj{np(str)} + {prepnp(przed,inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
umniejszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
umocnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
umocnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
umocnić się: perf: subj{np(str)} + {np(inst)}
umocnić się: perf: subj{np(str)} + {prepnp(w,loc)}
umorzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
umożliwiać: imperf: subj{ncp(str,że)} + obj{np(str)}
umożliwiać: imperf: subj{np(str)} + {cp(że)}
umożliwiać: imperf: subj{np(str)} + {cp(żeby)}
umożliwiać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {infp(_)}
umożliwiać: imperf: subj{np(str)} + obj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {np(inst)}
umożliwić: perf: subj{ncp(str,że)} + obj{np(str)}
umożliwić: perf: subj{np(str)} + {cp(że)}
umożliwić: perf: subj{np(str)} + {cp(żeby)}
umożliwić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {infp(_)}
umożliwić: perf: subj{np(str)} + obj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {np(inst)}
umówić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
umówić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
umówić się: perf: subj{np(str)} + {prepnp(co do,gen); prepncp(co do,gen,int); prepncp(co do,gen,że)} + {prepnp(z,inst)}
umówić się: perf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc)} + {prepnp(z,inst)}
umówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
umówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
umówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {prepncp(na,acc,int)}
umówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {prepncp(na,acc,że)}
umówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)} + {xp(temp)}
umrzeć: perf: {preplexnp(w,loc,pl,'but',natr)}
umrzeć: perf: subj{np(str)} + {lexnp(inst,sg,'śmierć',atr)}
umrzeć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepnp(od,gen); prepnp(wskutek,gen); prepnp(z,gen); comprepnp(z powodu)}
umrzeć: perf: subj{np(str)} + {prepnp(dla,gen)}
umrzeć: perf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że); prepncp(za,acc,żeby)}
umyć: perf: subj{np(str)} + {np(inst)} + {refl}
umyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
umyć: perf: subj{np(str)} + {prepnp(od,gen)} + {lexnp(str,pl,'ręka',natr)}
umykać: imperf: subj{cp(int)} + {lexnp(gen,sg,'uwaga',ratr)}
umykać: imperf: subj{cp(int)} + {np(dat)}
umykać: imperf: subj{cp(że)} + {lexnp(gen,sg,'uwaga',ratr)}
umykać: imperf: subj{cp(że)} + {np(dat)}
umykać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {lexnp(gen,sg,'uwaga',ratr)}
umykać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
umykać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
umykać: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)} + {xp(adl)} + {xp(perl)}
umykać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
umywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
umywać: imperf: subj{np(str)} + {prepnp(od,gen)} + {lexnp(str,pl,'ręka',natr)}
umywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
umywać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {preplexnp(pod,inst,sg,'wzgląd',natr)}
uniemożliwiać: imperf: subj{np(str)} + {cp(żeby)}
uniemożliwiać: imperf: subj{np(str)} + {ncp(str,żeby)}
uniemożliwiać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {infp(_)}
uniemożliwiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uniemożliwić: perf: subj{np(str)} + {cp(żeby)}
uniemożliwić: perf: subj{np(str)} + {ncp(str,żeby)}
uniemożliwić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {infp(_)}
uniemożliwić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
unieruchomić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
unieruchomić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
unieszkodliwić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
unieszkodliwić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
unieść: perf: subj{np(str)} + {np(str)} + {or}
unieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
unieść się: perf: subj{np(str)} + {np(inst)}
unieść się: perf: subj{np(str)} + {or}
unieść się: perf: subj{np(str)} + {prepnp(nad,acc)}
unieść się: perf: subj{np(str)} + {prepnp(nad,inst)}
unieść się: perf: subj{np(str)} + {xp(adl)}
unieść się: perf: subj{np(str)} + {xp(locat)}
unieważniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
unieważnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
uniewinniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
uniewinniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
uniewinniać: imperf: subj{np(str)} + {or} + {refl}
uniewinnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
uniewinnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
uniewinnić: perf: subj{np(str)} + {refl}
uniezależnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int)} + {advp(misc)}
uniezależnić się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int)} + {advp(misc)}
unikać: imperf: subj{np(str)} + obj{np(gen); ncp(gen,że); ncp(gen,żeby)}
uniknąć: perf: subj{np(str)} + obj{np(gen); ncp(gen,że); ncp(gen,żeby)}
unosić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
unosić się: imperf: subj{np(str)} + {np(inst)}
unosić się: imperf: subj{np(str)} + {prepnp(nad,inst)}
unosić się: imperf: subj{np(str)} + {xp(locat)}
unowocześnić: perf: subj{np(str)} + obj{np(str)}
unowocześnić się: perf: subj{np(str)}
uodparniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
uodparniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
uodparniać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
uodparniać się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
uodpornić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
uodpornić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
uodpornić się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
uodpornić się: perf: subj{np(str)} + {prepnp(przeciw,dat)}
uogólniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
uogólniać się: imperf: subj{np(str)} + {prepnp(na,acc)}
uogólnić: perf: subj{np(str)} + {cp(że)}
uogólnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
uogólnić się: perf: subj{np(str)} + {prepnp(na,acc)}
uosabiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
upadać: imperf: subj{np(str)} + {advp(misc)}
upadać: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
upadać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
upadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)}
upadać: imperf: subj{np(str)} + {prepnp(na,loc)}
upadać: imperf: subj{np(str)} + {prepnp(pod,inst)}
upadać: imperf: subj{np(str)} + {prepnp(z,gen)}
upajać: imperf: subj{cp(int)} + {np(str)}
upajać: imperf: subj{cp(że)} + {np(str)}
upajać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
upajać: imperf: subj{np(str)} + {np(inst)} + {np(str)}
upajać się: imperf: subj{np(str)} + {cp(int)}
upajać się: imperf: subj{np(str)} + {cp(że)}
upajać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
upajać się: imperf: subj{np(str)} + {np(inst)} + {or}
upamiętniać: imperf: subj{np(str)} + {cp(że)}
upamiętniać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
upamiętniać się: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
upamiętnić: perf: subj{np(str)} + {cp(że)}
upamiętnić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
upamiętnić się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
upamiętnić się: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
upaść: perf: subj{np(str)} + {advp(misc)}
upaść: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
upaść: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
upaść: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
upaść: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
upaść: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)}
upaść: perf: subj{np(str)} + {prepnp(pod,inst)}
upaść: perf: subj{np(str)} + {prepnp(z,gen)}
upaść się: perf: subj{np(str)} + {np(inst)}
upaść się: perf: subj{np(str)} + {prepnp(na,loc)}
upatrywać: imperf: subj{np(str)} + {np(gen)} + {xp(locat)}
upatrywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,acc)}
upatrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
upatrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że); prepncp(w,loc,żeby)}
upatrywać: imperf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
upatrzyć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
upatrzyć: perf: subj{np(str)} + {np(dat)} + {cp(kiedy)}
upatrzyć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
upatrzyć: perf: subj{np(str)} + {np(dat)} + {or}
upatrzyć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
upatrzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(jako,str)}
upatrzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
upchać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
upchać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
upchać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
upchać: perf: subj{np(str)} + {xp(locat)} + {refl}
upewniać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
upewniać: imperf: subj{np(str)} + obj{np(str)} + {or}
upewniać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(co do,gen,że)}
upewniać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(o,loc,że)}
upewniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(co do,gen)}
upewniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc)}
upewniać się: imperf: subj{np(str)} + {cp(int)}
upewniać się: imperf: subj{np(str)} + {cp(że)}
upewniać się: imperf: subj{np(str)} + {or}
upewniać się: imperf: subj{np(str)} + {prepncp(o,loc,że)}
upewniać się: imperf: subj{np(str)} + {prepncp(w,loc,że)}
upewniać się: imperf: subj{np(str)} + {prepnp(co do,gen)}
upewniać się: imperf: subj{np(str)} + {prepnp(o,loc)}
upewniać się: imperf: subj{np(str)} + {prepnp(w,loc)}
upewnić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
upewnić: perf: subj{np(str)} + obj{np(str)} + {prepncp(co do,gen,że)}
upewnić: perf: subj{np(str)} + obj{np(str)} + {prepncp(o,loc,że)}
upewnić: perf: subj{np(str)} + obj{np(str)} + {prepncp(w,loc,że)}
upewnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(co do,gen)}
upewnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc)}
upewnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
upewnić się: perf: subj{np(str)} + {cp(int)}
upewnić się: perf: subj{np(str)} + {cp(że)}
upewnić się: perf: subj{np(str)} + {or}
upewnić się: perf: subj{np(str)} + {prepncp(o,loc,int)}
upewnić się: perf: subj{np(str)} + {prepncp(o,loc,że)}
upewnić się: perf: subj{np(str)} + {prepncp(w,loc,int)}
upewnić się: perf: subj{np(str)} + {prepncp(w,loc,że)}
upewnić się: perf: subj{np(str)} + {prepnp(co do,gen)}
upewnić się: perf: subj{np(str)} + {prepnp(o,loc)}
upewnić się: perf: subj{np(str)} + {prepnp(w,loc)}
upić: perf: subj{np(str)} + obj{np(part)} + {prepnp(z,gen)}
upić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
upić się: perf: subj,controller{np(str)} + controllee{xp(mod)}
upić się: perf: subj{np(str)} + {np(inst)}
upiec: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
upiec: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
upiec: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
upiec się: perf: {np(dat)}
upiec się: perf: subj{np(str)} + {prepnp(na,loc)}
upiec się: perf: subj{np(str)} + {prepnp(w,loc)}
upierać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
upierać się: imperf: subj{np(str)} + {cp(że)}
upierać się: imperf: subj{np(str)} + {prepnp(na,acc); cp(żeby); prepncp(na,acc,żeby)}
upierać się: imperf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,że); prepncp(przy,loc,żeby)} + {or}
upiększać: imperf: subj{np(str)} + {np(inst)} + {refl}
upiększać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
upijać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(z,gen)}
upijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
upijać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
upijać się: imperf: subj{np(str)} + {np(inst)}
uplasować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
uplasować się: perf: subj{np(str)} + {xp(locat)}
upłynąć: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
upłynąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
upłynąć: perf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
upłynąć: perf: subj{np(str)} + {np(dat)} + {prepnp(wśród,gen)}
upłynąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
upłynąć: perf: subj{np(str)} + {np(str)}
upłynąć: perf: subj{np(str)} + {xp(temp)}
upływać: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
upływać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
upływać: imperf: subj{np(str)} + {np(dat)} + {prepnp(przy,loc)}
upływać: imperf: subj{np(str)} + {np(dat)} + {prepnp(wśród,gen)}
upływać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
upływać: imperf: subj{np(str)} + {xp(temp)}
upodabniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
upodabniać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
upodobnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
upodobnić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
upokarzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
upokarzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(wobec,gen)}
upokarzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
upokarzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(wobec,gen)}
upokorzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
upokorzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(wobec,gen)}
upokorzyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
upokorzyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(wobec,gen)}
upominać: imperf: subj{np(str)} + obj{np(str)} + {cp(że); cp(żeby)}
upominać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {or}
upominać się: imperf: subj{np(str)} + {cp(żeby)} + {xp(locat)}
upominać się: imperf: subj{np(str)} + {or}
upominać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)} + {xp(locat)}
upominać się: imperf: subj{np(str)} + {prepnp(za,inst)}
upomnieć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
upomnieć: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
upomnieć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
upomnieć: perf: subj{np(str)} + obj{np(str)} + {or}
upomnieć: perf: subj{np(str)} + obj{np(str)} + {prepncp(za,acc,że)}
upomnieć się: perf: subj{np(str)} + {cp(że)}
upomnieć się: perf: subj{np(str)} + {prepncp(o,acc,żeby)}
upomnieć się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(u,gen)} + {or}
upomnieć się: perf: subj{np(str)} + {prepnp(u,gen)} + {cp(żeby)}
upomnieć się: perf: subj{np(str)} + {prepnp(za,inst)}
uporać się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że); prepncp(z,inst,żeby)}
uporządkować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uporządkować się: perf: subj{np(str)}
upoważniać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
upoważniać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(do,gen,żeby)}
upoważniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
upoważnić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
upoważnić: perf: subj{np(str)} + obj{np(str)} + {prepncp(do,gen,żeby)}
upoważnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
upowszechniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
upowszechniać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
upowszechniać się: imperf: subj{np(str)} + {prepnp(wśród,gen)}
upowszechniać się: imperf: subj{np(str)} + {xp(locat)}
upowszechnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
upowszechnić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
upowszechnić się: perf: subj{np(str)} + {prepnp(wśród,gen)}
upowszechnić się: perf: subj{np(str)} + {xp(locat)}
upraszczać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
upraszczać się: imperf: subj{np(str)}
uprawiać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
uprawić: perf: subj{np(str)} + obj{np(str)}
uprawniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
uprościć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
uprościć się: perf: subj{np(str)}
uprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
uprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(locat)}
uprzeć się: perf: subj,controller{np(str)} + controllee{infp(_)}
uprzeć się: perf: subj{np(str)} + {cp(że)}
uprzeć się: perf: subj{np(str)} + {prepnp(na,acc); cp(żeby); prepncp(na,acc,żeby)} + {or}
uprzeć się: perf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,że); prepncp(przy,loc,żeby)} + {or}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {cp(że); cp(żeby)}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {or}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(o,loc,żeby)}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
uprzedzać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
uprzedzać się: imperf: subj{np(str)} + {prepnp(do,gen)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {cp(że); cp(żeby)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {or}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {prepncp(o,loc,żeby)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(co do,gen)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
uprzedzić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
uprzedzić się: perf: subj{np(str)} + {prepnp(do,gen)}
uprzemysłowić: perf: subj{np(str)} + obj{np(str)}
uprzemysłowić się: perf: subj{np(str)}
uprzytomnić: perf: subj{np(str)} + {np(dat)} + {cp(int); ncp(str,int)} + {xp(mod)}
uprzytomnić: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {xp(mod)}
uprzytomnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(mod)}
upuścić: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(z,gen)}
upuścić: perf: subj{np(str)} + obj{np(str)}
upychać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
upychać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
urastać: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(locat)}
urastać: imperf: subj{np(str)} + {prepnp(w,acc)}
uratować: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {prepnp(przed,inst)}
uratować: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(od,gen)}
uratować: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {refl}
uratować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
uratować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
uratować: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
uratować: perf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
uratować: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
urazić: perf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
urazić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
urazić: perf: subj{np(str)} + {prepnp(o,acc)} + {refl}
urazić: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
urazić się: perf: subj{np(str)}
urągać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
urągać: imperf: subj{np(str)} + {np(dat)} + {or}
urągać: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
uregulować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
uregulować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
uregulować się: perf: subj{np(str)}
urodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
urodzić się: perf: subj,controller{np(str)} + controllee{adjp(pred)} + {np(dat)}
urodzić się: perf: subj,controller{np(str)} + controllee{np(inst)}
urodzić się: perf: subj{np(str)} + {np(dat)}
urodzić się: perf: subj{np(str)} + {prepnp(w,loc)}
urodzić się: perf: subj{np(str)} + {xp(locat)}
urodzić się: perf: subj{np(str)} + {xp(temp)}
urosnąć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)}
urosnąć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
urosnąć: imperf: subj{np(str)} + {prepnp(w,acc)}
urozmaicać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
urozmaicać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc); prepncp(o,acc,int)}
urozmaicić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
urozmaicić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc); prepncp(o,acc,int)}
uruchamiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uruchamiać się: imperf: subj{np(str)} + {np(dat)}
uruchomić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uruchomić się: perf: subj{np(str)} + {np(dat)}
urwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
urwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
urwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(z,gen)}
urwać: perf: subj{np(str)} + {or}
urwać się: perf: {E}
urwać się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
urwać się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
urwać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
urwać się: perf: subj{np(str)} + {xp(locat)}
urywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
urywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
urywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(z,gen)}
urywać: imperf: subj{np(str)} + {or}
urywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
urywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
urywać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
urywać się: imperf: subj{np(str)} + {xp(locat)}
urządzać: imperf: subj{np(str)} + {np(str)}
urządzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
urządzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
urządzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
urządzać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
urządzać się: imperf: subj{np(str)} + {prepnp(u,gen)}
urządzać się: imperf: subj{np(str)} + {xp(locat)}
urządzić: perf: subj{np(str)} + {np(inst)} + {refl}
urządzić: perf: subj{np(str)} + {np(str)}
urządzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
urządzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
urządzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
urządzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
urządzić się: perf: subj{np(str)} + {prepnp(u,gen)}
urządzić się: perf: subj{np(str)} + {xp(locat)}
urzec: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
urzeczywistniać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
urzeczywistniać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
urzeczywistniać się: imperf: subj{np(str)} + {prepnp(w,loc)}
urzeczywistnić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
urzeczywistnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
urzeczywistnić się: perf: subj{np(str)}
urzekać: imperf: subj{np(str)} + obj{np(str)} + {ncp(inst,int)}
urzekać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
urzędować: imperf: subj{np(str)} + {xp(dur)} + {xp(locat)}
usadowić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
usadowić się: perf: subj{np(str)} + {xp(locat)}
usadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
usadzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
usamodzielnić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{cp(żeby)}
usamodzielnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {advp(misc)}
usamodzielnić się: perf: subj,controller{np(str)} + controllee{cp(żeby)}
usamodzielnić się: perf: subj{np(str)} + {prepnp(od,gen)} + {advp(misc)}
uschnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
uschnąć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
uschnąć: imperf: subj{np(str)} + {xp(mod)}
usiąść: perf: subj{np(str)} + {prepnp(do,gen)}
usiąść: perf: subj{np(str)} + {prepnp(na,loc)}
usiąść: perf: subj{np(str)} + {xp(locat)}
usiłować: imperf: subj,controller{np(str)} + controllee{infp(_)}
usługiwać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przy,loc)}
usługiwać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
usłyszeć: perf: subj{np(str)} + {cp(int)} + {preplexnp(na,acc,pl,'ucho',batr)}
usłyszeć: perf: subj{np(str)} + {cp(jakoby)}
usłyszeć: perf: subj{np(str)} + {cp(jak)} + {preplexnp(na,acc,pl,'ucho',batr)}
usłyszeć: perf: subj{np(str)} + {cp(żeby2)}
usłyszeć: perf: subj{np(str)} + {cp(że)} + {preplexnp(na,acc,pl,'ucho',batr)}
usłyszeć: perf: subj{np(str)} + {np(str)} + {preplexnp(na,acc,pl,'ucho',batr)}
usłyszeć: perf: subj{np(str)} + {np(str); prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że)} + {prepnp(od,gen)}
usłyszeć: perf: subj{np(str)} + obj{np(str); cp(int); cp(jak); cp(że); ncp(str,że)} + {np(inst)}
usłyszeć: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(int)}
usłyszeć: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(jak)}
usłyszeć: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(że)}
usłyszeć: perf: subj{np(str)} + {prepnp(od,gen)} + {or}
usłyszeć: perf: subj{np(str)} + {refl}
usnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
usnąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
usnąć: perf: subj{np(str)} + {np(inst)}
usnąć: perf: subj{np(str)} + {prepnp(nad,inst)}
usnąć: perf: subj{np(str)} + {prepnp(w,loc)}
usnąć: perf: subj{np(str)} + {prepnp(z,gen)}
uspokajać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)}
uspokajać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
uspokajać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
uspokajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uspokajać: imperf: subj{np(str)} + obj{np(str)} + {or}
uspokajać się: imperf: subj{np(str)} + {cp(że)}
uspokajać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
uspokoić: perf: subj{np(str); ncp(str,że)} + obj{np(str)}
uspokoić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
uspokoić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
uspokoić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uspokoić: perf: subj{np(str)} + obj{np(str)} + {or}
uspokoić się: perf: subj{np(str)} + {cp(że)}
uspokoić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
uspołecznić: perf: subj{np(str)} + obj{np(str)}
uspołecznić się: perf: subj{np(str)}
usprawiedliwiać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(z,gen)}
usprawiedliwiać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(inst)}
usprawiedliwiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
usprawiedliwiać: imperf: subj{np(str)} + obj{np(str)} + {or}
usprawiedliwiać się: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
usprawiedliwiać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
usprawiedliwiać się: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
usprawiedliwiać się: imperf: subj{np(str)} + {np(dat)} + {or}
usprawiedliwiać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
usprawiedliwiać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
usprawiedliwiać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
usprawiedliwiać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
usprawiedliwić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(z,gen)}
usprawiedliwić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(inst)}
usprawiedliwić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
usprawiedliwić: perf: subj{np(str)} + obj{np(str)} + {or}
usprawiedliwić się: perf: subj{np(str)} + {np(dat)} + {cp(int)}
usprawiedliwić się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
usprawiedliwić się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
usprawiedliwić się: perf: subj{np(str)} + {np(dat)} + {or}
usprawiedliwić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
usprawiedliwić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
usprawiedliwić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
usprawiedliwić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {or}
usprawniać: imperf: subj{np(str)} + obj{np(str)}
usprawniać się: imperf: subj{np(str)}
usprawnić: perf: subj{np(str)} + obj{np(str)}
usprawnić się: perf: subj{np(str)}
ustać: perf: subj{np(str)} + obj{np(str)}
ustać: perf: subj{np(str)} + {prepnp(w,loc)}
ustać się: perf: subj{np(str)}
ustalać: imperf: subj{np(str)} + {cp(int)}
ustalać: imperf: subj{np(str)} + {cp(żeby)}
ustalać: imperf: subj{np(str)} + obj{np(str); ncp(str,int)}
ustalić: perf: subj{np(str)} + {cp(int); cp(że)}
ustalić: perf: subj{np(str)} + {cp(żeby2)}
ustalić: perf: subj{np(str)} + obj{np(str); ncp(str,int)}
ustanawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ustanowić: perf: subj{np(str)} + {np(inst)} + {refl}
ustanowić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
ustawać: imperf: subj{np(str)} + obj{np(str)}
ustawać: imperf: subj{np(str)} + {prepnp(w,loc)}
ustawiać: imperf: subj{np(str)} + obj{np(str)} + {or}
ustawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
ustawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
ustawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
ustawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ustawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ustawiać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
ustawiać się: imperf: subj{np(str)} + {prepnp(do,gen)}
ustawiać się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
ustawiać się: imperf: subj{np(str)} + {prepnp(w,loc)}
ustawiać się: imperf: subj{np(str)} + {xp(locat)}
ustawić: perf: subj{np(str)} + obj{np(str)} + {or}
ustawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
ustawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
ustawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
ustawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ustawić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
ustawić się: perf: subj{np(str)} + {prepnp(do,gen)}
ustawić się: perf: subj{np(str)} + {prepnp(w,loc)}
ustawić się: perf: subj{np(str)} + {xp(locat)}
ustąpić: perf: subj{np(str)} + {np(dat)} + {np(gen)}
ustąpić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
ustąpić: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
ustąpić: perf: subj{np(str)} + {prepnp(od,gen)}
ustąpić: perf: subj{np(str)} + {prepnp(przed,inst)}
ustąpić: perf: subj{np(str)} + {prepnp(z,gen)}
ustępować: imperf: subj{np(str)} + {np(dat)} + {np(gen)}
ustępować: imperf: subj{np(str)} + {np(dat)} + {np(inst); prepnp(w,loc); prepncp(w,loc,że); advp(misc); preplexnp(pod,inst,sg,'wzgląd',atr)}
ustępować: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
ustępować: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
ustępować: imperf: subj{np(str)} + {prepnp(od,gen)}
ustępować: imperf: subj{np(str)} + {prepnp(przed,inst)}
ustępować: imperf: subj{np(str)} + {prepnp(z,gen)}
ustosunkować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {xp(mod)}
ustosunkować się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {xp(mod)}
ustosunkowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {xp(mod)}
ustosunkowywać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
ustosunkowywać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {xp(mod)}
usunąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
usunąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
usunąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(spod,gen)}
usunąć się: perf: subj{np(str)} + {prepnp(w,acc)}
usunąć się: perf: subj{np(str)} + {prepnp(z,gen)}
usuwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
usuwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
usuwać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(spod,gen)}
usuwać się: imperf: subj{np(str)} + {prepnp(od,gen)}
usuwać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
usypiać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
usypiać: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
usypiać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
usypiać: perf: subj{np(str)} + {xp(locat)}
usytuować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
usytuować się: perf: subj{np(str)} + {xp(locat)}
uszczęśliwiać: imperf: subj{cp(gdy)} + obj{np(str)}
uszczęśliwiać: imperf: subj{cp(jeśli)} + obj{np(str)}
uszczęśliwiać: imperf: subj{cp(kiedy)} + obj{np(str)}
uszczęśliwiać: imperf: subj{cp(że)} + obj{np(str)}
uszczęśliwiać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uszczęśliwiać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {refl}
uszczęśliwić: perf: subj{cp(gdy)} + obj{np(str)}
uszczęśliwić: perf: subj{cp(jeśli)} + obj{np(str)}
uszczęśliwić: perf: subj{cp(kiedy)} + obj{np(str)}
uszczęśliwić: perf: subj{cp(że)} + obj{np(str)}
uszczęśliwić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uszczęśliwić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {refl}
uszczknąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
uszczknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(z,gen)}
uszczknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
uszczuplać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
uszczuplać się: imperf: subj{np(str)} + {prepnp(o,acc)}
uszczuplić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
uszczuplić się: perf: subj{np(str)} + {prepnp(o,acc)}
uszkadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uszkadzać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
uszkodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uszkodzić się: perf: subj{np(str)} + {np(dat)}
uściślać: imperf: subj{np(str)} + obj{cp(int)}
uściślać: imperf: subj{np(str)} + obj{cp(że)}
uściślać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
uściślać: imperf: subj{np(str)} + {or}
uściślać się: imperf: subj{np(str)}
uściślić: perf: subj{np(str)} + obj{cp(int)}
uściślić: perf: subj{np(str)} + obj{cp(że)}
uściślić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
uściślić: perf: subj{np(str)} + {or}
uściślić się: perf: subj{np(str)}
uśmiechać się: imperf: subj,controllee{infp(_)} + controller{np(dat)}
uśmiechać się: imperf: subj{cp(żeby)} + {np(dat)}
uśmiechać się: imperf: subj{np(str)} + {cp(że)}
uśmiechać się: imperf: subj{np(str); ncp(str,że)} + {np(dat)}
uśmiechać się: imperf: subj{np(str)} + {or}
uśmiechać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
uśmiechać się: imperf: subj{np(str)} + {prepnp(na,acc)}
uśmiechnąć się: perf: subj{np(str)} + {cp(że)}
uśmiechnąć się: perf: subj{np(str)} + {or}
uśmiechnąć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
uśmiechnąć się: perf: subj{np(str)} + {prepnp(na,acc)}
uśmierzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uśmierzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(za,gen,sg,'pomoc',ratr)}
uśpić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)}
uśpić: perf: subj{np(str)} + {np(inst)} + {refl}
uświadamiać: imperf: subj{np(str)} + {np(dat)} + {or}
uświadamiać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
uświadamiać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(w kwestii)}
uświadamiać: imperf: subj{np(str)} + obj{np(str)} + {cp(int); cp(że)}
uświadamiać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
uświadamiać: imperf: subj{np(str)} + obj{np(str)} + {or}
uświadamiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(co do,gen)}
uświadomić: perf: subj{np(str)} + {np(dat)} + {or}
uświadomić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
uświadomić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w kwestii)}
uświadomić: perf: subj{np(str)} + obj{np(str)} + {cp(int); cp(że)}
uświadomić: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
uświadomić: perf: subj{np(str)} + obj{np(str)} + {or}
uświadomić: perf: subj{np(str)} + obj{np(str)} + {prepnp(co do,gen)}
uświetniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uświetnić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uświęcać: imperf: subj{lexnp(inst,sg,'cel',natr)} + obj{lexnp(acc,pl,'środek',natr)}
uświęcać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(mod)} + {xp(temp)}
utknąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
utkwić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
utkwić: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
utkwić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
utkwić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
utonąć: perf: subj{np(str)} + {prepnp(w,loc)}
utopić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
utopić się: perf: subj{np(str)} + {prepnp(w,loc)}
utożsamiać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
utożsamiać się: imperf: subj{np(str)} + {prepnp(z,inst)}
utożsamić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
utożsamić się: perf: subj{np(str)} + {prepnp(z,inst)}
utracić: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na rzecz)}
utrudniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
utrudnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
utrwalać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {cp(że)}
utrwalać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {prepnp(w,loc)}
utrwalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
utrwalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
utrwalać: imperf: subj{np(str)} + {prepnp(na,loc)} + {cp(int)}
utrwalać: imperf: subj{np(str)} + {prepnp(na,loc)} + {cp(jak)}
utrwalać się: imperf: subj,controller{np(str); ncp(str,że)} + controllee{prepnp(jako,nom)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(w,loc)}
utrwalać się: imperf: subj{cp(int)} + {np(dat)} + {prepnp(w,loc)}
utrwalać się: imperf: subj{cp(że)} + {np(dat)} + {prepnp(w,loc)}
utrwalać się: imperf: subj{np(str)} + {prepnp(u,gen)}
utrwalić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {cp(że)}
utrwalić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(w,loc)}
utrwalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
utrwalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
utrwalić: perf: subj{np(str)} + {prepnp(na,loc)} + {cp(int)}
utrwalić: perf: subj{np(str)} + {prepnp(na,loc)} + {cp(jak)}
utrwalić się: perf: subj{cp(int)} + {np(dat)} + {prepnp(w,loc)}
utrwalić się: perf: subj{cp(że)} + {np(dat)} + {prepnp(w,loc)}
utrwalić się: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(w,loc)}
utrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
utrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
utrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
utrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
utrzymać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
utrzymać: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
utrzymać się: perf: subj{np(str)} + {prepnp(przy,loc)}
utrzymać się: perf: subj{np(str)} + {xp(locat)}
utrzymywać: imperf: subj{np(str)} + {cp(jakoby)}
utrzymywać: imperf: subj{np(str)} + {cp(że)}
utrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
utrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
utrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
utrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
utrzymywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
utrzymywać: imperf: subj{np(str)} + {or}
utrzymywać: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
utrzymywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
utrzymywać się: imperf: subj{np(str)} + {prepnp(przy,loc)}
utrzymywać się: imperf: subj{np(str)} + {xp(locat)}
utwierdzać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {cp(że)}
utwierdzać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc); prepncp(w,loc,że)}
utwierdzać się: imperf: subj{np(str)} + {cp(int)}
utwierdzać się: imperf: subj{np(str)} + {cp(że)}
utwierdzać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
utwierdzić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {cp(że)}
utwierdzić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc); prepncp(w,loc,że)}
utwierdzić się: perf: subj{np(str)} + {cp(int)}
utwierdzić się: perf: subj{np(str)} + {cp(że)}
utwierdzić się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
utworzyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
utworzyć się: perf: subj{np(str)} + {xp(locat)}
utyć: perf: subj{np(str)} + {comprepnp(z powodu)}
utyć: perf: subj{np(str)} + {np(str)}
utyć: perf: subj{np(str)} + {prepnp(na,loc)}
utyć: perf: subj{np(str)} + {prepnp(o,acc)}
utyć: perf: subj{np(str)} + {prepnp(od,gen)}
utyć: perf: subj{np(str)} + {prepnp(z,gen)}
utykać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
utykać: imperf: subj{np(str)} + {prepnp(na,acc)}
utyskiwać: imperf: subj{np(str)} + {cp(int)}
utyskiwać: imperf: subj{np(str)} + {cp(że)}
utyskiwać: imperf: subj{np(str)} + {or}
utyskiwać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
utyskiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(na,acc,int); prepncp(za,acc,że)}
uwalniać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
uwalniać: imperf: subj{np(str)} + {np(inst)} + {prepnp(spod,gen)} + {refl}
uwalniać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
uwalniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
uwalniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(spod,gen)}
uwalniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
uwalniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
uwalniać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
uważać: imperf: subj,controller{np(str)} + controllee{prepadjp(za,acc)} + {refl}
uważać: imperf: subj,controller{np(str)} + controllee{prepnp(za,acc)} + {refl}
uważać: imperf: subj{np(str)} + {comprepnp(na temat)} + {nonch}
uważać: imperf: subj{np(str)} + controller{infp(_)} + controllee{prepadjp(za,acc)}
uważać: imperf: subj{np(str)} + obj,controller{cp(że)} + controllee{prepadjp(za,acc)}
uważać: imperf: subj{np(str)} + obj,controller{cp(że)} + controllee{prepnp(za,acc)}
uważać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
uważać: imperf: subj{np(str)} + obj,controller{np(str); ncp(str,int); ncp(str,że)} + controllee{prepadjp(za,acc)}
uważać: imperf: subj{np(str)} + obj{cp(że)}
uważać: imperf: subj{np(str)} + {or}
uważać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(czy)}
uważać: imperf: subj{np(str)} + {prepnp(na,acc); cp(żeby); prepncp(na,acc,int); prepncp(na,acc,żeby)}
uważać: imperf: subj{np(str)} + {prepnp(o,loc)} + {advp(pron)}
uważać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)} + {nonch}
uwidaczniać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
uwidaczniać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
uwidaczniać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
uwidocznić: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
uwidocznić się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
uwidocznić się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
uwiecznić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
uwiecznić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
uwiecznić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
uwiecznić się: perf: subj{np(str)} + {np(inst)}
uwiecznić się: perf: subj{np(str)} + {prepnp(w,loc)}
uwiecznić się: perf: subj{np(str)} + {xp(locat)}
uwielbiać: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
uwielbiać: imperf: subj{np(str)} + obj{np(str); cp(gdy); cp(jak); cp(kiedy); ncp(str,że)} + {prepnp(w,loc)}
uwielbiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
uwierać: imperf: subj{np(str)} + {np(inst)}
uwierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
uwierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {xp(mod)}
uwierać: imperf: subj{np(str)} + {prepnp(na,acc)}
uwierać: imperf: subj{np(str)} + {xp(locat)}
uwierzyć: perf: subj{np(str)} + {np(dat)} + {cp(gdy)}
uwierzyć: perf: subj{np(str)} + {np(dat)} + {cp(kiedy)}
uwierzyć: perf: subj{np(str)} + {np(dat)} + {cp(żeby2)}
uwierzyć: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(na,acc,sg,'słowa',natr)}
uwierzyć: perf: subj{np(str)} + {np(dat); prepnp(w,acc)}
uwierzyć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc); cp(że); prepncp(w,acc,że); prepncp(w,acc,żeby2)}
uwieść: perf: subj{cp(że)} + obj{np(str)}
uwieść: perf: subj{np(str); ncp(str,że)} + obj{np(str)}
uwieść: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
uwieść: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uwijać się: imperf: subj{np(str)} + {prepnp(przy,loc)} + {prepnp(z,inst)}
uwijać się: imperf: subj{np(str)} + {prepnp(w,loc)} + {infp(imperf)}
uwijać się: imperf: subj{np(str)} + {xp(mod)}
uwikłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
uwikłać się: perf: subj{np(str)} + {prepnp(w,acc)}
uwłaczać: imperf: subj{cp(gdy)} + {np(dat)}
uwłaczać: imperf: subj{cp(int)} + {np(dat)}
uwłaczać: imperf: subj{cp(jak)} + {np(dat)}
uwłaczać: imperf: subj{cp(jeśli)} + {np(dat)}
uwłaczać: imperf: subj{cp(kiedy)} + {np(dat)}
uwłaczać: imperf: subj{cp(że)} + {np(dat)}
uwłaczać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
uwłaszczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
uwłaszczyć się: perf: subj{np(str)} + {prepnp(na,loc)}
uwodzić: imperf: subj{cp(że)} + obj{np(str)}
uwodzić: imperf: subj{np(str); ncp(str,że)} + obj{np(str)}
uwodzić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
uwodzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
uwolnić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
uwolnić: perf: subj{np(str)} + {np(inst)} + {prepnp(spod,gen)} + {refl}
uwolnić: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
uwolnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
uwolnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(spod,gen)}
uwolnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
uwolnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
uwolnić się: perf: subj{np(str)} + {prepnp(do,gen)}
uwydatniać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {cp(int)}
uwydatniać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {cp(że)}
uwydatniać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
uwydatniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uwydatniać się: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
uwydatniać się: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {xp(locat)}
uwydatnić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {cp(int)}
uwydatnić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {cp(że)}
uwydatnić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
uwydatnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
uwydatnić się: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
uwydatnić się: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {xp(locat)}
uwypuklać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {cp(int)}
uwypuklać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {cp(że)}
uwypuklać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
uwypuklać się: imperf: subj{np(str)} + {prepnp(z,gen)}
uwypuklać się: imperf: subj{np(str)} + {xp(locat)}
uwypuklać się: imperf: subj{np(str)} + {xp(temp)}
uwypuklić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {cp(int)}
uwypuklić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {cp(że)}
uwypuklić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
uwypuklić się: imperf: subj{np(str)} + {prepnp(z,gen)}
uwypuklić się: imperf: subj{np(str)} + {xp(locat)}
uwypuklić się: imperf: subj{np(str)} + {xp(temp)}
uwzględniać: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(w,inst)}
uwzględnić: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(w,inst)}
uwziąć się: perf: subj,controller{np(str)} + controllee{infp(_)}
uwziąć się: perf: subj{np(str)} + {cp(że)}
uwziąć się: perf: subj{np(str)} + {cp(żeby)}
uwziąć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
uzależniać: imperf: subj{np(str)} + obj{np(str); ncp(str,int)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że); prepncp(od,gen,żeby)}
uzależniać: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int)} + {cp(int)}
uzależniać się: imperf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że); prepncp(od,gen,żeby)}
uzależnić: perf: subj{np(str)} + obj{np(str); ncp(str,int)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że); prepncp(od,gen,żeby)}
uzależnić: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int)} + {cp(int)}
uzależnić się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,int); prepncp(od,gen,że); prepncp(od,gen,żeby)}
uzasadniać: imperf: subj{np(str)} + {cp(int)}
uzasadniać: imperf: subj{np(str)} + {cp(że)}
uzasadniać: imperf: subj{np(str)} + {ncp(str,że)}
uzasadniać: imperf: subj{np(str)} + obj{np(str)} + {ncp(inst,że)}
uzasadniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
uzasadniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
uzasadniać: imperf: subj{np(str)} + {or}
uzasadnić: perf: subj{np(str)} + {cp(int)}
uzasadnić: perf: subj{np(str)} + {cp(że)}
uzasadnić: perf: subj{np(str)} + obj{np(str)} + {ncp(inst,że)}
uzasadnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
uzasadnić: perf: subj{np(str)} + {or}
uzbierać: perf: subj{np(str)} + {np(part)} + {xp(adl)} + {xp(mod)}
uzbierać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
uzbierać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)} + {xp(mod)}
uzbierać: perf: subj{np(str)} + {prepnp(po,loc)}
uzbierać się: perf: {np(dat)} + {np(gen)}
uzbierać się: perf: {np(gen)} + {prepnp(na,acc)}
uzbierać się: perf: subj{np(str)} + {np(dat)}
uzbrajać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
uzbrajać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
uzbroić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
uzbroić: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
uzdrawiać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
uzdrawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
uzdrowić: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
uzdrowić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
uzgadniać: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(z,inst)}
uzgadniać: imperf: subj{np(str)} + obj{ncp(str,int)} + {prepnp(z,inst)}
uzgadniać: imperf: subj{np(str)} + obj{np(str); cp(int)} + {prepnp(z,inst)}
uzgadniać: imperf: subj{np(str)} + {prepnp(z,inst)} + {ncp(str,że)}
uzgodnić: perf: subj{np(str)} + obj{cp(że)} + {prepnp(z,inst)}
uzgodnić: perf: subj{np(str)} + obj{ncp(str,że)} + {prepnp(z,inst)}
uzgodnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
uzgodnić: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
uzgodnić: perf: subj{np(str)} + {prepnp(z,inst)} + {ncp(str,int)}
uzmysłowić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(dat)}
uzmysłowić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
uzmysłowić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
uzmysłowić: perf: subj{np(str)} + {np(dat)} + {or}
uzmysłowić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
uznać: perf: subj,controller{np(str)} + controllee{adjp(inst)} + {refl}
uznać: perf: subj,controller{np(str)} + controllee,controller2{infp(_)} + controllee2{adjp(inst)}
uznać: perf: subj,controller{np(str)} + controllee,controller2{infp(_)} + controllee2{prepadjp(za,acc)}
uznać: perf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
uznać: perf: subj,controller{np(str)} + controllee{prepadjp(za,acc)} + {refl}
uznać: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
uznać: perf: subj,controller{np(str)} + controllee{prepnp(za,acc)} + {refl}
uznać: perf: subj{np(str)} + controller{cp(że)} + controllee{prepadjp(za,acc)}
uznać: perf: subj{np(str)} + controller{cp(że)} + controllee{prepnp(za,acc)}
uznać: perf: subj{np(str)} + {cp(int)}
uznać: perf: subj{np(str)} + {cp(żeby)}
uznać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
uznać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
uznać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
uznać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
uznać: perf: subj{np(str)} + obj,controller{np(str); ncp(str,int); ncp(str,że)} + controllee{prepnp(za,acc)}
uznać: perf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepadjp(za,acc)}
uznać: perf: subj{np(str)} + obj{cp(że)}
uznawać: imperf: subj,controller{np(str)} + controllee{adjp(inst)} + {refl}
uznawać: imperf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
uznawać: imperf: subj,controller{np(str)} + controllee{prepadjp(za,acc)} + {refl}
uznawać: imperf: subj,controller{np(str)} + controllee{prepnp(za,acc)} + {refl}
uznawać: imperf: subj,controller{np(str)} + obj,controllee,controller2{infp(_)} + controllee2{prepnp(za,acc)}
uznawać: imperf: subj{np(str)} + controller{cp(że)} + controllee{prepadjp(jako,str)}
uznawać: imperf: subj{np(str)} + controller{cp(że)} + controllee{prepnp(jako,str)}
uznawać: imperf: subj{np(str)} + controller{cp(że)} + controllee{prepnp(za,acc)}
uznawać: imperf: subj{np(str)} + {cp(int)}
uznawać: imperf: subj{np(str)} + {cp(żeby)}
uznawać: imperf: subj{np(str)} + obj,controller{cp(że)} + controllee{prepadjp(za,acc)}
uznawać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
uznawać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
uznawać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
uznawać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
uznawać: imperf: subj{np(str)} + obj,controller{np(str); ncp(str,int); ncp(str,że)} + controllee{prepnp(za,acc)}
uznawać: imperf: subj{np(str)} + obj,controller{np(str); ncp(str,że)} + controllee{prepadjp(za,acc)}
uznawać: imperf: subj{np(str)} + obj{cp(że)}
uzupełniać: imperf: subj{np(str)} + {cp(że)}
uzupełniać: imperf: subj{np(str)} + obj{np(str)} + {ncp(inst,że)}
uzupełniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
uzupełniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
uzupełniać: imperf: subj{np(str)} + {or}
uzupełnić: perf: subj{np(str)} + {cp(że)}
uzupełnić: perf: subj{np(str)} + obj{np(str)} + {ncp(inst,że)}
uzupełnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
uzupełnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
uzupełnić: perf: subj{np(str)} + {or}
uzyskać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
uzyskiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
użalać się: imperf: subj{np(str)} + {np(dat)} + {cp(int); cp(że)}
użalać się: imperf: subj{np(str)} + {np(dat)} + {or}
użalać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
użalać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
użalać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {prepnp(przed,inst)}
użalać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)} + {prepnp(przed,inst)}
użalać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int); cp(że)}
użalać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
użerać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)} + {prepnp(z,inst)}
użerać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
użerać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
użerać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
użyczać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(do,gen)}
użyczać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(na,acc)}
użyczać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(pod,acc)}
użyczać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(dla,gen)}
użyczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
użyczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
użyczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
użyczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
użyczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
użyczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
użyczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(pod,acc)}
użyczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
użyć: perf: subj{np(str)} + obj,controller{np(gen)} + controllee{prepnp(jako,str)}
użyć: perf: subj{np(str)} + obj{np(gen)} + {prepncp(do,gen,żeby)}
użyć: perf: subj{np(str)} + obj{np(gen)} + {prepnp(dla,gen)}
użyć: perf: subj{np(str)} + obj{np(gen)} + {prepnp(do,gen)}
użyć: perf: subj{np(str)} + {prepnp(na,loc)} + {lexnp(dat,_,'siebie',natr)}
użytkować: imperf: subj{np(str)} + obj{np(str)}
używać: imperf: subj{np(str)} + obj,controller{np(gen)} + controllee{prepnp(jako,str)}
używać: imperf: subj{np(str)} + obj{np(gen)} + {prepncp(do,gen,żeby)}
używać: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(dla,gen)}
używać: imperf: subj{np(str)} + obj{np(gen)} + {prepnp(do,gen)}
używać: imperf: subj{np(str)} + {prepnp(na,loc)} + {lexnp(dat,_,'siebie',natr)}
wabić: imperf: subj{np(str)} + {cp(że)}
wabić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
wabić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wabić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
wabić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
wabić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
wabić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
wabić się: imperf: subj,controller{np(str)} + controllee{np(nom)}
wahać: imperf: subj{np(str)} + {np(inst)}
wahać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
wahać się: imperf: subj{np(str)} + {cp(int)}
wahać się: imperf: subj{np(str)} + {cp(żeby)}
wahać się: imperf: subj{np(str)} + {prepncp(nad,inst,żeby)}
wahać się: imperf: subj{np(str)} + {prepncp(przed,inst,żeby2)}
wahać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
wahać się: imperf: subj{np(str)} + {prepnp(między,inst)}
wahać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)}
wahać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
walczyć: imperf: subj{np(str)} + {np(inst)} + {prepnp(przeciw,dat); prepnp(z,inst)}
walczyć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
walczyć: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)} + {prepnp(przeciw,dat); prepnp(z,inst)}
walczyć: imperf: subj{np(str)} + {prepnp(pod,inst)} + {prepnp(przeciw,dat); prepnp(z,inst)}
walczyć: imperf: subj{np(str)} + {prepnp(w,loc)}
walczyć: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc); prepncp(za,acc,żeby)}
walić: imperf: {np(dat)} + {np(inst)} + {xp(abl)}
walić: imperf: {np(dat)} + {xp(locat)}
walić: imperf: subj{cp(int)} + {np(str)}
walić: imperf: subj{cp(że)} + {np(str)}
walić: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
walić: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
walić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
walić: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
walić: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
walić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,acc)} + {refl}
walić: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
walić: imperf: subj{np(str)} + {np(str); ncp(str,int); ncp(str,że)}
walić: imperf: subj{np(str)} + obj{np(str)}
walić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
walić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,acc)}
walić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
walić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
walić: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
walić: imperf: subj{np(str)} + {prepnp(z,gen)} + {prepnp(za,inst)}
walić: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
walić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
walić się: imperf: subj{np(str)} + {prepnp(z,inst)}
walić się: imperf: subj{np(str)} + {xp(adl)}
walnąć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
walnąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
walnąć: perf: subj{np(str)} + {np(dat)} + {or}
walnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
walnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
walnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)} + {refl}
walnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
walnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
walnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
walnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
walnąć: perf: subj{np(str)} + {prepnp(z,gen)} + {prepnp(za,inst)}
walnąć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
walnąć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
walnąć się: perf: subj{np(str)} + {prepnp(o,acc)}
walnąć się: perf: subj{np(str)} + {xp(adl)}
wałęsać się: imperf: subj{np(str)} + {xp(locat)}
warczeć: imperf: subj{np(str)} + {nonch}
warczeć: imperf: subj{np(str)} + {np(inst)}
warczeć: imperf: subj{np(str)} + {np(str)}
warczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
warczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
warczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
warczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
warczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
warczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
warknąć: perf: subj{np(str)} + {np(inst)}
warknąć: perf: subj{np(str)} + {or}
warknąć: perf: subj{np(str)} + {prepnp(na,acc)}
warto: imperf: {cp(żeby)}
warto: imperf: {infp(_)}
ważyć: imperf: subj{np(str)} + {np(inst)} + {refl}
ważyć: imperf: subj{np(str)} + {np(str)}
ważyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
ważyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
ważyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
ważyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
ważyć: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int); prepncp(na,loc,że)}
ważyć: imperf: subj{np(str)} + {prepnp(na,loc)} + {refl}
ważyć się: imperf: subj,controller{np(str)} + controllee{infp(_)}
ważyć się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
ważyć się: imperf: subj{np(str)} + {prepnp(na,loc)}
wąchać: imperf: subj{np(str)} + {lexnp(str,pl,'kwiatek',natr)} + {preplexnp(od,gen,sg,'spód',natr)}
wąchać: imperf: subj{np(str)} + obj{np(str); cp(int)}
wątpić: imperf: subj{np(str)} + {cp(czy)}
wątpić: imperf: subj{np(str)} + {cp(że)}
wątpić: imperf: subj{np(str)} + {cp(żeby)}
wątpić: imperf: subj{np(str)} + {or}
wątpić: imperf: subj{np(str)} + {prepncp(w,acc,żeby)}
wątpić: imperf: subj{np(str)} + {prepnp(o,loc)}
wątpić: imperf: subj{np(str)} + {prepnp(w,acc); prepncp(w,acc,czy); prepncp(w,acc,że)}
wbić: perf: subj{np(str)} + {cp(żeby)}
wbić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wbić: perf: subj{np(str)} + {np(inst)} + {prepnp(pod,acc)} + {refl}
wbić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
wbić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepnp(w,acc)}
wbić się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc); prepnp(w,acc)}
wbić się: perf: subj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
wbiec: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
wbiegać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
wbijać: imperf: subj{np(str)} + {cp(żeby)}
wbijać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wbijać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wbijać: imperf: subj{np(str)} + {np(inst)} + {prepnp(pod,acc)} + {refl}
wbijać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
wbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wbijać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepnp(na,acc)}
wbijać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
wbijać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wbudować: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wbudować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wchłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wchłaniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wchłaniać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wchłaniać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wchłaniać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wchłaniać się: imperf: subj{np(str)} + {xp(locat)}
wchłonąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wchłonąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wchłonąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wchłonąć się: perf: subj{np(str)} + {prepnp(w,acc)}
wchłonąć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wchłonąć się: perf: subj{np(str)} + {xp(locat)}
wchodzić: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wchodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wchodzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wchodzić: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
wchodzić: imperf: subj{np(str)} + {xp(perl)}
wchodzić: imperf: subj{np(str)} + {xp(temp)} + {preplexnp(w,acc,sg,'życie',natr)}
wciągać: imperf: subj{np(str)} + {np(inst)} + {xp(adl)} + {refl}
wciągać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
wciągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wciągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wciągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
wciągać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wciągać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wciągnąć: perf: subj{np(str)} + {np(inst)} + {xp(adl)} + {refl}
wciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
wciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
wciągnąć się: perf: subj{np(str)} + {prepnp(do,gen)}
wciągnąć się: perf: subj{np(str)} + {prepnp(w,acc)}
wcielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wcielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wcielać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wcielać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wcielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wcielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wcielić się: perf: subj{np(str)} + {prepnp(do,gen)}
wcielić się: perf: subj{np(str)} + {prepnp(w,acc)}
wcinać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wcinać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wcinać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
wcinać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wcinać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wcinać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
wciskać: imperf: subj{np(str)} + obj{lexnp(str,sg,'gaz',natr)} + {preplexnp(do,gen,sg,'decha',natr)}
wciskać: imperf: subj{np(str)} + obj{np(str); cp(że)} + {np(dat)} + {prepnp(do,gen)}
wciskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wciskać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wciskać się: imperf: subj{np(str)} + {xp(adl)}
wcisnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wcisnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wcisnąć się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wcisnąć się: perf: subj{np(str)} + {prepnp(w,acc)}
wczuć się: perf: subj{np(str)} + {prepnp(w,acc)}
wczuwać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wdać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wdawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wdepnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wdepnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
wdepnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
wdepnąć: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
wdepnąć: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
wdrapać się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wdrapać się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wdrapać się: perf: subj{np(str)} + {xp(perl)}
wdrapywać się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wdrapywać się: perf: subj{np(str)} + {np(dat)} + {xp(adl)} + {xp(locat)} + {xp(perl)}
wdrażać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wdrażać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wdrażać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wdrażać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wdrożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wdrożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wdrożyć się: perf: subj{np(str)} + {prepnp(do,gen)}
wdrożyć się: perf: subj{np(str)} + {prepnp(w,acc)}
wdychać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wdychać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wdychać: imperf: subj{np(str)} + obj{np(str)} + {xp(perl)}
wdzierać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(perl)}
wdzierać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wdzierać się: imperf: subj{np(str)} + {xp(adl)} + {xp(perl)}
wedrzeć się: perf: subj{np(str)} + {xp(adl)} + {xp(mod)} + {xp(perl)} + {xp(temp)}
wegetować: imperf: subj,controller{np(str)} + controllee{xp(mod)}
wejść: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wejść: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wejść: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wejść: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wejść: perf: subj{np(str)} + {xp(perl)}
wejść: perf: subj{np(str)} + {xp(temp)} + {preplexnp(w,acc,sg,'życie',natr)}
werbować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
werbować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
werbować: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wertować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
weryfikować: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
weryfikować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
weryfikować: imperf: subj{np(str)} + obj{cp(int)}
weryfikować: imperf: subj{np(str)} + obj{cp(że)}
weryfikować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wesprzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wesprzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wesprzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
wesprzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wesprzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
wesprzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
westchnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
westchnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
westchnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
wetować: imperf: subj{np(str)} + {np(inst)} + {np(str)} + {lexnp(dat,_,'siebie',natr)}
wetować: imperf: subj{np(str)} + obj{np(str)}
wezwać: perf: subj{np(str)} + {np(gen)}
wezwać: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
wezwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wezwać: perf: subj{np(str)} + obj{np(str)} + {prepncp(do,gen,żeby)}
wezwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wędrować: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
wędrować: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
wędrować: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
wędrować: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
wędrować: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wędrować: imperf: subj{np(str)} + {prepnp(za,inst)} + {xp(adl)}
wędrować: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wgryźć się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
wgryźć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {advp(misc)}
wgryźć się: perf: subj{np(str)} + {prepnp(do,gen)}
wgryźć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
wiać: imperf: {np(inst)} + {prepnp(na,acc)}
wiać: imperf: {np(inst)} + {prepnp(od,gen)}
wiać: imperf: {np(inst)} + {xp(abl)}
wiać: imperf: {np(inst)} + {xp(adl)}
wiać: imperf: {np(inst)} + {xp(perl)}
wiać: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
wiać: imperf: subj{np(str)} + obj{np(str)}
wiać: imperf: subj{np(str)} + {prepnp(do,gen)}
wiać: imperf: subj{np(str)} + {prepnp(na,acc)}
wiać: imperf: subj{np(str)} + {prepnp(przed,inst)} + {xp(adl)}
wiać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wiać: imperf: subj{np(str)} + {xp(perl)}
wiadomo: imperf: {np(dat)} + {comprepnp(w kwestii)} + {nonch}
wiadomo: imperf: {np(dat)} + {comprepnp(w sprawie)} + {nonch}
wiadomo: imperf: {np(dat)} + {cp(jakoby); cp(żeby)} + {nonch}
wiadomo: imperf: {np(dat)} + {prepncp(o,loc,jakoby)} + {nonch}
wiadomo: imperf: {np(dat)} + {prepnp(o,loc); comprepnp(na temat); cp(int); cp(że); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {nonch}
wiadomo: imperf: {prepnp(z,inst)} + {nonch} + {fixed('nigdy')}
wiązać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wiązać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wiązać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wiązać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wiązać się: imperf: subj{np(str)} + {np(inst)}
wiązać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
wiązać się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
widać: imperf: {cp(jak); cp(że)}
widać: imperf: {np(str); ncp(str,że)} + {prepnp(po,loc); prepncp(po,loc,int)}
widać: imperf: {np(str)} + {prepnp(z,gen)}
widać: imperf: {np(str)} + {xp(locat)}
widać: imperf: {prepnp(po,loc)} + {cp(int)}
widać: imperf: {prepnp(po,loc)} + {cp(żeby2)}
widać: imperf: {prepnp(po,loc); prepncp(po,loc,int)} + {cp(że)}
widać: imperf: {prepnp(z,gen)} + {cp(int)}
widać: imperf: {prepnp(z,gen)} + {cp(że)}
widnieć: imperf: subj{E}
widnieć: imperf: subj{np(str)} + {prepnp(na,loc)}
widnieć: imperf: subj{np(str)} + {xp(locat)}
widywać: imperf: subj{np(str)} + {cp(jak)} + {preplexnp(na,acc,pl,'oko',batr)}
widywać: imperf: subj{np(str)} + {cp(żeby)}
widywać: imperf: subj{np(str)} + {cp(żeby2)} + {preplexnp(na,acc,pl,'oko',batr)}
widywać: imperf: subj{np(str)} + {cp(że)} + {preplexnp(na,acc,pl,'oko',batr)}
widywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(str)}
widywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
widywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)} + {preplexnp(na,acc,pl,'oko',batr)}
widywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
widzieć: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {refl}
widzieć: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {refl}
widzieć: imperf: subj{np(str)} + controller{np(str)} + controllee{adjp(pred)}
widzieć: imperf: subj{np(str)} + controller{np(str)} + controllee{np(inst)}
widzieć: imperf: subj{np(str)} + {cp(gdy)} + {preplexnp(na,acc,pl,'oko',batr)}
widzieć: imperf: subj{np(str)} + {cp(int)} + {preplexnp(na,acc,pl,'oko',batr)}
widzieć: imperf: subj{np(str)} + {cp(jakoby)} + {preplexnp(na,acc,pl,'oko',batr)}
widzieć: imperf: subj{np(str)} + {cp(jak)} + {preplexnp(na,acc,pl,'oko',batr)}
widzieć: imperf: subj{np(str)} + {cp(kiedy)} + {preplexnp(na,acc,pl,'oko',batr)}
widzieć: imperf: subj{np(str)} + {cp(żeby)} + {preplexnp(na,acc,pl,'oko',batr)}
widzieć: imperf: subj{np(str)} + {cp(że)} + {preplexnp(na,acc,pl,'oko',batr)}
widzieć: imperf: subj{np(str)} + {infp(_)} + {lexnp(str,sg,'potrzeba',atr)}
widzieć: imperf: subj{np(str)} + {infp(_)} + {lexnp(str,sg,'powód',atr)}
widzieć: imperf: subj{np(str)} + {infp(_)} + {lexnp(str,sg,'problem',atr)}
widzieć: imperf: subj{np(str)} + {infp(_)} + {lexnp(str,sg,'sens',atr)}
widzieć: imperf: subj{np(str)} + {lexnp(inst,pl,'oko',ratr)} + {refl}
widzieć: imperf: subj{np(str)} + {np(str); cp(int); cp(jak); cp(że); cp(żeby2); ncp(str,int); ncp(str,jak); ncp(str,że)}
widzieć: imperf: subj{np(str)} + {np(str); ncp(str,że)} + {preplexnp(na,acc,pl,'oko',batr)}
widzieć: imperf: subj{np(str)} + obj,controller{cp(żeby)} + controllee{xp(mod)}
widzieć: imperf: subj{np(str)} + obj,controller{cp(że)} + controllee{xp(mod)}
widzieć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
widzieć: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
widzieć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
widzieć: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
widzieć: imperf: subj{np(str)} + {xp(locat)} + {refl}
widzieć się: imperf: controller{np(dat)} + controllee{infp(_)}
widzieć się: imperf: subj,controller{np(str)} + controllee{adjp(pred)} + {np(dat)}
widzieć się: imperf: subj,controller{np(str)} + controllee{np(inst)} + {np(dat)}
widzieć się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
widzieć się: imperf: subj{cp(jakoby)} + {np(dat)}
widzieć się: imperf: subj{cp(żeby)} + {np(dat)}
widzieć się: imperf: subj{cp(że)} + {np(dat)}
widzieć się: imperf: subj{np(str)} + {np(dat)}
widzieć się: imperf: subj{np(str)} + {prepnp(z,inst)}
wiedzieć: imperf: subj{np(str)} + {cp(żeby2)} + {nonch}
wiedzieć: imperf: subj{np(str)} + {ncp(str,int)}
wiedzieć: imperf: subj{np(str)} + {np(str); ncp(str,że)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby2)}
wiedzieć: imperf: subj{np(str)} + {prepnp(o,loc); cp(int); cp(że); prepncp(o,loc,int); prepncp(o,loc,że)}
wiedzieć: imperf: subj{np(str)} + {prepnp(o,loc)} + {cp(że)}
wielbić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wielbić: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(w,loc)}
wielbić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wieńczyć: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wieńczyć: imperf: subj{np(str)} + obj{np(str)} + {or}
wierzyć: imperf: subj{np(str)} + {np(dat)} + {cp(gdy)}
wierzyć: imperf: subj{np(str)} + {np(dat)} + {cp(kiedy)}
wierzyć: imperf: subj{np(str)} + {np(dat)} + {cp(żeby2)}
wierzyć: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(na,acc,sg,'słowo',natr)}
wierzyć: imperf: subj{np(str)} + {np(dat); prepnp(w,acc)}
wierzyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc); cp(że); prepncp(w,acc,że); prepncp(w,acc,żeby2)}
wieszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {prepnp(za,acc); prepncp(za,acc,że)}
wieszać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wieszać: imperf: subj{np(str)} + {prepnp(na,loc)} + {refl}
wieszać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
wieszać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(u,gen)}
wieszać się: imperf: subj{np(str)} + {np(gen)}
wieścić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wieścić: imperf: subj{np(str)} + {np(dat)} + {or}
wieścić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wieść: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
wieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
wieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
wieść: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wieść się: imperf: controller{np(dat)} + controllee{xp(mod)} + {prepnp(w,loc)}
wietrzyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wietrzyć się: imperf: subj{np(str)} + {xp(locat)}
wieźć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wieźć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
wieźć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
więdnąć: imperf: subj{np(str)} + {np(dat)}
więzić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
więzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {xp(locat)}
wikłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wikłać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wikłać się: imperf: subj{np(str)} + {prepnp(w,loc)}
windować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
windować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
windować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(w,acc)}
windować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
windować się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
windować się: imperf: subj{np(str)} + {prepnp(na,acc)}
windować się: imperf: subj{np(str)} + {prepnp(w,acc)}
windować się: imperf: subj{np(str)} + {prepnp(w,loc)}
winić: imperf: subj{np(str)} + {cp(że)} + {refl}
winić: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
winić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
winić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
winić: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)} + {refl}
winić: imperf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)} + {refl}
winien: imperf: subj,controller{E} + controllee{infp(_)}
wiosłować: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
wiosłować: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wiosłować: imperf: subj{np(str)} + {xp(perl)}
wirować: imperf: {np(dat)} + {xp(locat)}
wirować: imperf: subj{np(str)} + {np(dat)} + {prepnp(wokół,gen)}
wirować: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wirować: imperf: subj{np(str)} + {np(inst)}
wirować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wirować: imperf: subj{np(str)} + {prepnp(na,loc)}
wirować: imperf: subj{np(str)} + {prepnp(za,inst)}
wirować: imperf: subj{np(str)} + {xp(adl)}
wisieć: imperf: subj{cp(int)} + {np(dat)} + {np(inst)}
wisieć: imperf: subj{cp(że)} + {np(dat)} + {np(inst)}
wisieć: imperf: subj{cp(że)} + {prepnp(nad,inst)}
wisieć: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
wisieć: imperf: subj{np(str); ncp(str,że)} + {prepnp(nad,inst)}
wisieć: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {prepnp(za,acc)}
wisieć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wisieć: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
wisieć: imperf: subj{np(str)} + {preplexnp(u,gen,sg,'klamka',ratr)}
wisieć: imperf: subj{np(str)} + {preplexnp(w,loc,sg,'powietrze',atr)}
wisieć: imperf: subj{np(str)} + {preplexnp(w,loc,sg,'próżnia',atr)}
wisieć: imperf: subj{np(str)} + {prepnp(na,loc)}
wisieć: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wisieć: imperf: subj{np(str)} + {prepnp(przy,loc)}
witać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
witać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
witać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
witać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
wiwatować: imperf: subj{np(str)} + {np(dat)}
wiwatować: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'cześć',ratr)}
wiwatować: imperf: subj{np(str)} + {xp(mod)}
wizytować: imperf: subj{np(str)} + obj{np(str)}
wjechać: perf: subj{np(str)} + {prepncp(z,inst,że)}
wjechać: perf: subj{np(str)} + {prepnp(do,gen); prepnp(na,acc)}
wjechać: perf: subj{np(str)} + {prepnp(w,acc)}
wjeżdżać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wjeżdżać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wjeżdżać: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
wjeżdżać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wkleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wkleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wkleić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wklejać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wkładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepnp(w,acc)}
wkładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wkładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc); prepncp(w,acc,żeby)}
wkomponować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wkomponować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wkomponować się: perf: subj{np(str)} + {prepnp(do,gen)}
wkomponować się: perf: subj{np(str)} + {prepnp(w,acc)} + {xp(mod)}
wkraczać: imperf: subj{np(str)} + {prepnp(do,gen)}
wkraczać: imperf: subj{np(str)} + {prepnp(na,acc)}
wkraczać: imperf: subj{np(str)} + {prepnp(w,acc)}
wkraczać: imperf: subj{np(str)} + {xp(adl)}
wkradać się: imperf: subj{np(str)} + {preplexnp(w,acc,pl,'łaska',ratr)}
wkradać się: imperf: subj{np(str)} + {xp(adl)} + {xp(perl)}
wkraść się: perf: subj{np(str)} + {preplexnp(w,acc,pl,'łaska',ratr)}
wkraść się: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
wkręcać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wkręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wkręcać: imperf: subj{np(str)} + {xp(adl)} + {refl}
wkręcać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
wkręcić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wkręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wkręcić: perf: subj{np(str)} + {xp(adl)} + {refl}
wkręcić się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wkroczyć: perf: subj{np(str)} + {prepnp(do,gen)}
wkroczyć: perf: subj{np(str)} + {prepnp(na,acc)}
wkroczyć: perf: subj{np(str)} + {prepnp(w,acc)}
wkroczyć: perf: subj{np(str)} + {xp(adl)}
wkurzać: imperf: subj{cp(gdy)} + obj{np(str)}
wkurzać: imperf: subj{cp(jak)} + obj{np(str)}
wkurzać: imperf: subj{cp(kiedy)} + obj{np(str)}
wkurzać: imperf: subj{cp(że)} + obj{np(str)}
wkurzać: imperf: subj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + obj{np(str)}
wkurzać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(z powodu)}
wkurzać: imperf: subj{np(str)} + obj{np(str)} + {cp(gdy)}
wkurzać: imperf: subj{np(str)} + obj{np(str)} + {cp(jak)}
wkurzać: imperf: subj{np(str)} + obj{np(str)} + {cp(kiedy)}
wkurzać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
wkurzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
wkurzać się: imperf: subj{np(str)} + {comprepnp(z powodu)}
wkurzać się: imperf: subj{np(str)} + {cp(gdy)}
wkurzać się: imperf: subj{np(str)} + {cp(jak)}
wkurzać się: imperf: subj{np(str)} + {cp(kiedy)}
wkurzać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
wkurzać się: imperf: subj{np(str)} + {or}
wkurzać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wkurzać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
wkurzać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
wkurzać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wkurzyć: perf: subj{cp(gdy)} + obj{np(str)}
wkurzyć: perf: subj{cp(jak)} + obj{np(str)}
wkurzyć: perf: subj{cp(kiedy)} + obj{np(str)}
wkurzyć: perf: subj{cp(że)} + obj{np(str)}
wkurzyć: perf: subj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + obj{np(str)}
wkurzyć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(z powodu)}
wkurzyć: perf: subj{np(str)} + obj{np(str)} + {cp(gdy)}
wkurzyć: perf: subj{np(str)} + obj{np(str)} + {cp(jak)}
wkurzyć: perf: subj{np(str)} + obj{np(str)} + {cp(kiedy)}
wkurzyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
wkurzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
wkurzyć się: perf: subj{np(str)} + {comprepnp(z powodu)}
wkurzyć się: perf: subj{np(str)} + {cp(gdy)}
wkurzyć się: perf: subj{np(str)} + {cp(jak)}
wkurzyć się: perf: subj{np(str)} + {cp(kiedy)}
wkurzyć się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
wkurzyć się: perf: subj{np(str)} + {or}
wkurzyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wkurzyć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
wkurzyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
wkurzyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wlać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(part)} + {prepnp(do,gen)}
wlać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
wlać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
wlać się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wlec: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {prepnp(za,inst)}
wlec: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wlec się: imperf: subj{np(str)} + {prepnp(za,inst)}
wlec się: imperf: subj{np(str)} + {prepnp(z,inst)}
wlec się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wlecieć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wlecieć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wlecieć: perf: subj{np(str)} + {np(dat)} + {xp(adl)} + {xp(perl)}
wlecieć: perf: subj{np(str)} + {prepnp(na,acc)}
wlecieć: perf: subj{np(str)} + {prepnp(pod,acc)}
wlepiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wlepiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wlepiać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wlepić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wlepić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wlepić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wlewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
wlewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
wlewać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
wliczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wliczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wliczać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wliczać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wliczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wliczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wliczyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wliczyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
władać: imperf: subj{np(str)} + obj{np(inst)}
włamać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
włamywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
włamywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
włazić: imperf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
włazić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
włazić: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
włazić: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
włazić: imperf: subj{np(str)} + {xp(perl)}
włączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
włączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
włączać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
włączać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {or}
włączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
włączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
włączyć się: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
włączyć się: perf: subj{np(str)} + {prepnp(w,acc)} + {or}
włożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen); prepnp(w,acc)}
włożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
włożyć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(między,acc,pl,'bajka',atr)}
włożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc); prepncp(w,acc,żeby)}
włóczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
włóczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {prepnp(za,acc)}
włóczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {prepnp(z,inst)}
włóczyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
włóczyć: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
włóczyć się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
włóczyć się: imperf: subj{np(str)} + {prepnp(po,loc)} + {prepnp(z,inst)}
włóczyć się: imperf: subj{np(str)} + {prepnp(za,inst)}
włóczyć się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wmawiać: imperf: subj{np(str)} + {np(dat)} + {or}
wmawiać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)}
wmawiać: imperf: subj{np(str)} + obj{cp(int)} + {prepnp(w,acc)}
wmawiać: imperf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
wmawiać: imperf: subj{np(str)} + obj{cp(żeby)} + {prepnp(w,acc)}
wmawiać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wmawiać: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(w,acc)}
wmawiać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)}
wmawiać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(w,acc)}
wmawiać: imperf: subj{np(str)} + {prepnp(w,acc)} + {or}
wmieszać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wmieszać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wmieszać się: perf: subj{np(str)} + {prepnp(do,gen)}
wmieszać się: perf: subj{np(str)} + {prepnp(w,acc)}
wmówić: perf: subj{np(str)} + {np(dat)} + {or}
wmówić: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
wmówić: perf: subj{np(str)} + obj{cp(int)} + {prepnp(w,acc)}
wmówić: perf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
wmówić: perf: subj{np(str)} + obj{cp(żeby)} + {prepnp(w,acc)}
wmówić: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wmówić: perf: subj{np(str)} + obj{cp(że)} + {prepnp(w,acc)}
wmówić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)}
wmówić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(w,acc)}
wmówić: perf: subj{np(str)} + {prepnp(w,acc)} + {or}
wmurować: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wnieść: imperf: subj{np(str)} + {cp(int)}
wnieść: imperf: subj{np(str)} + {cp(że)}
wnieść: imperf: subj{np(str)} + {cp(żeby)}
wnieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wnieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wnieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wnieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wnieść: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wnieść: imperf: subj{np(str)} + {prepncp(o,acc,żeby)}
wnieść: imperf: subj{np(str)} + {prepnp(o,acc)}
wnikać: imperf: subj{np(str)} + {xp(adl)} + {xp(perl)}
wniknąć: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
wnioskować: imperf: subj{np(str)} + {comprepnp(na temat)}
wnioskować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
wnioskować: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wnioskować: imperf: subj{np(str)} + {or}
wnioskować: imperf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w sprawie)}
wnioskować: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wnioskować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); cp(żeby); prepncp(o,acc,żeby)}
wnioskować: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
wnioskować: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wnioskować: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {advp(pron)}
wnioskować: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(int)}
wnioskować: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(że)}
wnioskować: imperf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(żeby2)}
wnioskować: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,żeby)}
wnioskować: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)} + {advp(pron)}
wnioskować: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)} + {cp(int)}
wnioskować: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)} + {cp(że)}
wnioskować: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)} + {cp(żeby2)}
wnosić: imperf: subj{np(str)} + {cp(int)}
wnosić: imperf: subj{np(str)} + {cp(że)}
wnosić: imperf: subj{np(str)} + {cp(żeby)}
wnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepnp(w,acc)}
wnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
wnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
wnosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wnosić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wnosić: imperf: subj{np(str)} + {prepncp(o,loc,int)}
wnosić: imperf: subj{np(str)} + {prepnp(o,loc)}
wodzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(po,loc)}
wodzić: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,inst)}
wodzić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'pokuszenie',natr)}
wodzić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,acc,sg,'nos',natr)}
wodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
wodzić się: imperf: subj{np(str)} + {prepnp(po,loc)} + {prepnp(z,inst)}
wodzić się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepnp(za,acc)}
woleć: imperf: subj,controller{np(str)} + controllee{infp(_)}
woleć: imperf: subj{np(str)} + controller{np(str)} + controllee{prepnp(niż,str)}
woleć: imperf: subj{np(str)} + {cp(gdy)}
woleć: imperf: subj{np(str)} + {cp(jak)}
woleć: imperf: subj{np(str)} + {cp(jeśli)}
woleć: imperf: subj{np(str)} + {cp(kiedy)}
woleć: imperf: subj{np(str)} + {cp(żeby)}
woleć: imperf: subj{np(str)} + {np(str)} + {prepnp(od,gen)}
wolno: imperf: controller{np(dat)} + controllee{infp(_)}
wolno: imperf: {cp(żeby)}
wolno: imperf: {np(dat)} + {advp(pron)}
wolno: imperf: {np(dat)} + {np(str)}
wołać: imperf: subj{np(str)} + controller{prepnp(na,acc)} + controllee{np(inst)}
wołać: imperf: subj{np(str)} + controller{prepnp(za,inst)} + controllee{np(nom)}
wołać: imperf: subj{np(str)} + {infp(_)}
wołać: imperf: subj{np(str)} + {np(gen)}
wołać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(nom)}
wołać: imperf: subj{np(str)} + obj,controller{prepnp(na,acc)} + controllee{np(nom)}
wołać: imperf: subj{np(str)} + {or}
wołać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
wołać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że); cp(żeby)}
wołać: imperf: subj{np(str)} + {prepnp(na,acc)}
wołać: imperf: subj{np(str)} + {prepnp(o,acc)}
wołać: imperf: subj{np(str)} + {prepnp(za,inst)} + {cp(żeby)}
wozić: imperf: subj{np(str)} + {np(inst); prepnp(na,loc); prepnp(w,loc)} + {prepnp(do,gen); prepnp(na,acc); xp(adl)} + {xp(abl)} + {refl}
wozić: imperf: subj{np(str)} + {np(inst); prepnp(na,loc); prepnp(w,loc)} + {xp(perl)} + {refl}
wozić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); prepnp(na,loc); prepnp(w,loc)}
wozić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); prepnp(na,loc); prepnp(w,loc)} + {prepnp(do,gen); prepnp(na,acc); xp(adl)} + {xp(abl)}
wozić: imperf: subj{np(str)} + obj{np(str)} + {np(inst); prepnp(na,loc); prepnp(w,loc)} + {xp(perl)}
wozić się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
wpadać: imperf: subj{cp(żeby)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wpadać: imperf: subj{cp(że)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wpadać: imperf: subj{infp(_)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wpadać: imperf: subj{np(str)} + {cp(int)}
wpadać: imperf: subj{np(str)} + {cp(że)}
wpadać: imperf: subj{np(str)} + {cp(żeby)}
wpadać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wpadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wpadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wpadać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
wpadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
wpadać: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
wpadać: imperf: subj{np(str)} + {prepnp(pod,acc)}
wpadać: imperf: subj{np(str)} + {prepnp(z,inst)}
wpajać: imperf: subj{np(str)} + obj{cp(int); ncp(str,int)} + {np(dat)}
wpajać: imperf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
wpajać: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
wpakować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wpakować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wpakować się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wpakować się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wpakować się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wpaść: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wpaść: perf: subj{cp(że)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wpaść: perf: subj{infp(_)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wpaść: perf: subj{np(str)} + {cp(int)}
wpaść: perf: subj{np(str)} + {cp(że)}
wpaść: perf: subj{np(str)} + {cp(żeby)}
wpaść: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',atr)}
wpaść: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wpaść: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wpaść: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
wpaść: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
wpaść: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
wpaść: perf: subj{np(str)} + {prepnp(pod,acc)}
wpaść: perf: subj{np(str)} + {prepnp(z,inst)}
wpatrywać się: imperf: subj{np(str)} + {cp(jak)}
wpatrywać się: imperf: subj{np(str)} + {prepncp(w,acc,jak)}
wpatrywać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wpędzać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
wpędzać: imperf: subj{np(str)} + {np(inst)} + {xp(adl)} + {refl}
wpędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wpędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
wpędzić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wpędzić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
wpędzić: perf: subj{np(str)} + {np(inst)} + {xp(adl)} + {refl}
wpędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)} + {xp(perl)}
wpisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wpisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wpisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wpisać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wpisać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wpisać się: perf: subj{np(str)} + {prepnp(w,acc)}
wpisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wpisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wpisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wpisywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wpisywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wpisywać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wpłacać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wpłacać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
wpłacić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wpłacić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wpłacić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
wpłynąć: perf: subj{np(str)} + {prepnp(do,gen)}
wpłynąć: perf: subj{np(str)} + {prepnp(na,acc)}
wpłynąć: perf: subj{np(str)} + {xp(adl)}
wpływać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wpływać: imperf: subj{np(str)} + {prepnp(na,acc)}
wpływać: imperf: subj{np(str)} + {xp(adl)}
wpoić: perf: subj{np(str)} + obj{cp(int); ncp(str,int)} + {np(dat)}
wpoić: perf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
wpoić: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
wprawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wprawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wprawiać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wprawiać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wprawiać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wprawić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
wprawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wprawić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(w,acc)}
wprawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wprawić się: perf: subj{np(str)} + {prepnp(do,gen)}
wprawić się: perf: subj{np(str)} + {prepnp(w,acc)}
wprawić się: perf: subj{np(str)} + {prepnp(w,loc)}
wprowadzać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
wprowadzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wprowadzać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wprowadzać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wprowadzać się: imperf: subj{np(str)} + {xp(adl)}
wprowadzić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
wprowadzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wprowadzić się: perf: subj{np(str)} + {prepnp(do,gen)}
wprowadzić się: perf: subj{np(str)} + {xp(adl)}
wpuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wpuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wpuszczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc); prepncp(w,acc,że)}
wpuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wpuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wpuścić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc); prepncp(w,acc,że)}
wracać: imperf: subj{np(str)} + {np(dat)} + {np(str)}
wracać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby); xp(adl)}
wracać: imperf: subj{np(str)} + {prepnp(na,acc)}
wracać: imperf: subj{np(str)} + {prepnp(od,gen)}
wracać: imperf: subj{np(str)} + {prepnp(po,acc)}
wracać: imperf: subj{np(str)} + {prepnp(z,gen)}
wracać: imperf: subj{np(str)} + {xp(abl)}
wracać: imperf: subj{np(str)} + {xp(temp)}
wracać się: imperf: subj{np(str)} + {np(dat)}
wracać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wracać się: imperf: subj{np(str)} + {prepnp(po,acc)}
wracać się: imperf: subj{np(str)} + {xp(abl)}
wracać się: imperf: subj{np(str)} + {xp(adl)}
wrastać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(w,acc)}
wrastać: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wrastać: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)} + {xp(perl)}
wręczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepncp(za,acc,żeby)}
wręczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
wręczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
wrosnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(w,acc)}
wrosnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wrosnąć: perf: subj{np(str)} + {prepnp(z,gen)} + {preplexnp(pod,acc,sg,'ziemia',natr)}
wrosnąć: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)} + {xp(perl)}
wrócić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wrócić: perf: subj{np(str)} + {preplexnp(na,loc,sg,'tarcza',natr); preplexnp(z,inst,sg,'tarcza',natr)}
wrócić: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(do,gen,żeby); xp(adl)}
wrócić: perf: subj{np(str)} + {prepnp(na,acc)}
wrócić: perf: subj{np(str)} + {prepnp(od,gen)}
wrócić: perf: subj{np(str)} + {prepnp(po,acc)}
wrócić: perf: subj{np(str)} + {prepnp(z,gen)}
wrócić: perf: subj{np(str)} + {xp(abl)}
wrócić: perf: subj{np(str)} + {xp(adl)}
wrócić: perf: subj{np(str)} + {xp(temp)}
wrócić się: perf: subj{np(str)} + {np(dat)}
wrócić się: perf: subj{np(str)} + {prepnp(do,gen)}
wrócić się: perf: subj{np(str)} + {prepnp(po,acc)}
wrócić się: perf: subj{np(str)} + {xp(abl)}
wrócić się: perf: subj{np(str)} + {xp(adl)}
wróżyć: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {advp(misc)}
wróżyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {cp(że)}
wróżyć: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(z,gen)}
wróżyć: imperf: subj{np(str)} + {or}
wróżyć: imperf: subj{np(str)} + {preplexnp(na,acc,sg,'dwoje',natr)}
wróżyć: imperf: subj{np(str)} + {prepnp(na,loc)}
wrzasnąć: perf: subj{np(str)} + {np(dat)} + {np(str)}
wrzasnąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {or}
wrzasnąć: perf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
wrzasnąć: perf: subj{np(str)} + {np(str)} + {prepnp(o,loc)}
wrzasnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wrzasnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
wrzasnąć: perf: subj{np(str)} + {prepnp(ku,dat)} + {or}
wrzasnąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wrzasnąć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
wrzasnąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
wrzasnąć: perf: subj{np(str)} + {prepnp(o,acc)}
wrzasnąć: perf: subj{np(str)} + {prepnp(o,loc)}
wrzasnąć: perf: subj{np(str)} + {prepnp(za,inst)} + {or}
wrzasnąć: perf: subj{np(str)} + {prepnp(z,gen)} + {or}
wrzasnąć: perf: subj{np(str)} + {xp(mod)}
wrzeć: imperf: {comprepnp(na temat)} + {xp(locat)}
wrzeć: imperf: {comprepnp(z powodu)} + {xp(locat)}
wrzeć: imperf: controller{xp(locat)} + controllee{xp(mod)}
wrzeć: imperf: {cp(że)} + {xp(locat)}
wrzeć: imperf: {np(inst)} + {xp(locat)}
wrzeć: imperf: {prepnp(od,gen)} + {xp(locat)}
wrzeć: imperf: {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)} + {xp(locat)}
wrzeć: imperf: {prepnp(z,gen)} + {xp(locat)}
wrzeć: imperf: subj,controller{np(str)} + controllee{xp(mod)}
wrzeć: imperf: subj{np(str)} + {comprepnp(na temat)}
wrzeć: imperf: subj{np(str)} + {comprepnp(z powodu)}
wrzeć: imperf: subj{np(str)} + {cp(że)}
wrzeć: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wrzeć: imperf: subj{np(str)} + {np(inst)}
wrzeć: imperf: subj{np(str)} + {or}
wrzeć: imperf: subj{np(str)} + {prepnp(od,gen)}
wrzeć: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że); prepncp(o,loc,żeby)}
wrzeć: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
wrzeć: imperf: subj{np(str)} + {prepnp(w,loc)}
wrzeć: imperf: subj{np(str)} + {prepnp(z,gen)}
wrzeć: imperf: {xp(locat)} + {or}
wrzeszczeć: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {xp(adl)}
wrzeszczeć: imperf: subj{np(str)} + {np(dat)} + {xp(adl)} + {or}
wrzeszczeć: imperf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
wrzeszczeć: imperf: subj{np(str)} + {np(str)} + {prepnp(o,loc)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {nonch}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(mod)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(o,acc)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(za,inst)} + {cp(że)}
wrzeszczeć: imperf: subj{np(str)} + {prepnp(za,inst)} + {or}
wrzucać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wrzucać: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {lexnp(inst,sg,'łopata',natr)} + {preplexnp(do,gen,sg,'głowa',natr)}
wrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {lexnp(inst,sg,'łopata',natr)} + {preplexnp(do,gen,sg,'głowa',natr)}
wrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wrzucać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'siebie',natr)}
wrzucać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wrzucić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wrzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wrzucić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,sg,'siebie',natr)}
wsadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wsadzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wsadzać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wsadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wsadzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wsadzić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wschodzić: imperf: subj{np(str)} + {np(dat)}
wschodzić: imperf: subj{np(str)} + {prepnp(dla,gen)}
wschodzić: imperf: subj{np(str)} + {prepnp(nad,inst)}
wschodzić: imperf: subj{np(str)} + {prepnp(na,loc)}
wschodzić: imperf: subj{np(str)} + {prepnp(od,gen)}
wschodzić: imperf: subj{np(str)} + {prepnp(z,gen)}
wschodzić: imperf: subj{np(str)} + {xp(mod)}
wsiadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wsiadać: imperf: subj{np(str)} + {prepnp(do,gen)}
wsiadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {cp(że)}
wsiadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {cp(żeby)}
wsiadać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {or}
wsiadać: imperf: subj{np(str)} + {prepnp(w,acc)}
wsiąkać: imperf: subj{np(str)} + {np(dat)} + {xp(adl)} + {xp(perl)}
wsiąkać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wsiąknąć: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wsiąknąć: perf: subj{np(str)} + {prepnp(w,acc)}
wsiąść: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wsiąść: perf: subj{np(str)} + {prepnp(do,gen)}
wsiąść: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc)}
wsiąść: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {cp(że)}
wsiąść: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {cp(żeby)}
wsiąść: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {or}
wsiąść: perf: subj{np(str)} + {prepnp(w,acc)}
wskakiwać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wskakiwać: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
wskakiwać: imperf: subj{np(str)} + {prepnp(w,acc)}
wskazać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
wskazać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
wskazać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
wskazać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wskazać: perf: subj{np(str)} + obj{np(str); cp(że)} + {np(dat)} + {np(inst)}
wskazywać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
wskazywać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(żeby)}
wskazywać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc); cp(że); prepncp(na,acc,int); prepncp(na,acc,że)}
wskazywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wskazywać: imperf: subj{np(str)} + obj{np(str); cp(że)} + {np(dat)} + {np(inst)}
wskoczyć: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'głowa',natr)}
wskoczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wskoczyć: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wskoczyć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wskrzesić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wskrzesić: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wskrzesić się: perf: subj{np(str)}
wskrzeszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wskrzeszać: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wskrzeszać się: imperf: subj{np(str)}
wsławić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
wsławić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)}
wsłuchać się: perf: subj{np(str)} + {prepnp(w,acc); prepncp(w,acc,int)}
wsłuchiwać się: imperf: subj{np(str)} + {prepnp(w,acc); prepncp(w,acc,int)}
wspiąć się: perf: subj{np(str)} + {prepnp(na,acc)}
wspiąć się: perf: subj{np(str)} + {prepnp(po,loc)} + {xp(adl)}
wspierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wspierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wspierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
wspierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wspierać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
wspierać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
wspierać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wspinać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {xp(adl)}
wspomagać: imperf: subj{np(str)} + {np(inst)} + {prepnp(przy,loc)} + {refl}
wspomagać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)} + {refl}
wspomagać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przy,loc)}
wspomagać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wspominać: imperf: subj{np(str)} + {np(dat)} + {or}
wspominać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
wspominać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)}
wspominać: imperf: subj{np(str)} + obj{cp(jak)}
wspominać: imperf: subj{np(str)} + obj{cp(żeby2)}
wspominać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wspominać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)}
wspomnieć: perf: subj{np(str)} + {np(dat)} + {or}
wspomnieć: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,jak); prepncp(o,loc,że)}
wspomnieć: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
wspomnieć: perf: subj{np(str)} + obj{cp(jak)}
wspomnieć: perf: subj{np(str)} + obj{cp(żeby2)}
wspomnieć: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wspomnieć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)}
wspomóc: perf: subj{np(str)} + {np(inst)} + {prepnp(przy,loc)} + {refl}
wspomóc: perf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)} + {refl}
wspomóc: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przy,loc)}
wspomóc: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
współczuć: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
współczuć: imperf: subj{np(str)} + {np(dat)} + {np(gen); ncp(gen,int); ncp(gen,że)}
współczuć: imperf: subj{np(str)} + {prepnp(z,inst)}
współdziałać: imperf: subj{np(str)} + {prepnp(przy,loc)} + {prepnp(z,inst)}
współdziałać: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
współpracować: imperf: subj{np(str)} + {prepnp(przy,loc); prepnp(w,loc); xp(locat)} + {prepnp(z,inst)}
współpracować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na rzecz)}
współpracować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w kwestii)}
współpracować: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
współżyć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)}
wstać: perf: subj{np(str)} + {np(inst)}
wstać: perf: subj{np(str)} + {prepnp(od,gen)}
wstać: perf: subj{np(str)} + {prepnp(z,gen)}
wstać: perf: subj{np(str)} + {xp(abl)}
wstawać: imperf: subj{np(str)} + {np(inst)}
wstawać: imperf: subj{np(str)} + {prepnp(od,gen)}
wstawać: imperf: subj{np(str)} + {prepnp(z,gen)}
wstawać: imperf: subj{np(str)} + {xp(abl)}
wstawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wstawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wstawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wstawiać się: imperf: subj{np(str)} + {np(inst)}
wstawiać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(za,inst)}
wstawiać się: imperf: subj{np(str)} + {prepnp(po,loc)}
wstawiać się: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(za,inst)}
wstawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wstawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wstawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wstawić się: perf: subj{np(str)} + {np(inst)}
wstawić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(za,inst)}
wstawić się: perf: subj{np(str)} + {prepnp(po,loc)}
wstawić się: perf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(za,inst)}
wstąpić: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(na,acc); prepnp(po,acc)}
wstąpić: perf: subj{np(str)} + {prepnp(w,acc)}
wstępować: imperf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(na,acc); prepnp(po,acc)}
wstępować: imperf: subj{np(str)} + {prepnp(w,acc)}
wstrząsać: imperf: subj{cp(gdy)} + {np(inst)}
wstrząsać: imperf: subj{cp(int)} + {np(inst)}
wstrząsać: imperf: subj{cp(że)} + {np(inst)}
wstrząsać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
wstrząsać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wstrząsać: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
wstrząsać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wstrząsać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wstrząsać się: imperf: subj{np(str)} + {np(inst)}
wstrząsać się: imperf: subj{np(str)} + {prepnp(od,gen)}
wstrząsać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wstrząsać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wstrząsnąć: perf: subj{cp(gdy)} + {np(inst)}
wstrząsnąć: perf: subj{cp(że)} + {np(inst)}
wstrząsnąć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
wstrząsnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
wstrząsnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wstrząsnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wstrząsnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wstrząsnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wstrząsnąć się: perf: subj{np(str)} + {np(inst)}
wstrząsnąć się: perf: subj{np(str)} + {prepnp(od,gen)}
wstrząsnąć się: perf: subj{np(str)} + {prepnp(w,loc)}
wstrząsnąć się: perf: subj{np(str)} + {prepnp(z,gen)}
wstrzykiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {advp(misc)}
wstrzykiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wstrzyknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {advp(misc)}
wstrzyknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wstrzymać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wstrzymać: perf: subj{np(str)} + obj{np(str)} + {or}
wstrzymać się: perf: subj{np(str)} + {or}
wstrzymać się: perf: subj{np(str)} + {prepnp(od,gen)}
wstrzymać się: perf: subj{np(str)} + {prepnp(z,inst)}
wstrzymywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wstrzymywać: imperf: subj{np(str)} + obj{np(str)} + {or}
wstrzymywać się: imperf: subj{np(str)} + {prepnp(od,gen)}
wstrzymywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
wstyd: imperf: controller{np(dat)} + controllee{infp(_)}
wstyd: imperf: {np(dat)} + {cp(int)}
wstyd: imperf: {np(dat)} + {cp(że)}
wstyd: imperf: {np(dat)} + {cp(żeby)}
wstyd: imperf: {np(dat)} + {np(gen)}
wstyd: imperf: {np(dat)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wstydzić się: imperf: subj,controller{np(str)} + controllee{infp(_)}
wstydzić się: imperf: subj{np(str)} + {cp(że)}
wstydzić się: imperf: subj{np(str)} + {np(gen); ncp(gen,że)}
wstydzić się: imperf: subj{np(str)} + {prepnp(za,acc)} + {or}
wszcząć: perf: subj{np(str)} + obj{np(str)}
wszcząć się: perf: subj{np(str)} + {xp(locat)}
wszczynać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wszczynać się: imperf: subj{np(str)} + {xp(locat)}
wściec: perf: subj{cp(że)} + {np(str)}
wściec: perf: subj{np(str); ncp(str,że)} + {np(str)}
wściec się: perf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
wściec się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(gdy)}
wściec się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(jak)}
wściec się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(kiedy)}
wściec się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wściec się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
wściec się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
wściec się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wściekać: perf: subj{cp(gdy)} + {np(str)}
wściekać: perf: subj{cp(jak)} + {np(str)}
wściekać: perf: subj{cp(kiedy)} + {np(str)}
wściekać: perf: subj{cp(że)} + {np(str)}
wściekać: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
wściekać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
wściekać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(gdy)}
wściekać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(jak)}
wściekać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(kiedy)}
wściekać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wściekać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
wściekać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
wściekać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wtajemniczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc); prepncp(w,acc,int); prepncp(w,acc,że)}
wtajemniczać: imperf: subj{np(str)} + {prepnp(w,acc); prepncp(w,acc,int); prepncp(w,acc,że)} + {refl}
wtajemniczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc); prepncp(w,acc,int); prepncp(w,acc,że)}
wtajemniczyć: perf: subj{np(str)} + {prepnp(w,acc); prepncp(w,acc,int); prepncp(w,acc,że)} + {refl}
wtargnąć: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
wtórować: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wtórować: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
wtrącać: imperf: subj{np(str)} + obj{cp(że)}
wtrącać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wtrącać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wtrącać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
wtrącać się: imperf: subj{np(str)} + {cp(że)}
wtrącać się: imperf: subj{np(str)} + {or}
wtrącać się: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(w,acc); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(w,acc,int); prepncp(w,acc,że)}
wtrącić: perf: subj{np(str)} + obj{cp(że)}
wtrącić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wtrącić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wtrącić: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
wtrącić się: perf: subj{np(str)} + {cp(że)}
wtrącić się: perf: subj{np(str)} + {or}
wtrącić się: perf: subj{np(str)} + {prepnp(do,gen); prepnp(w,acc); prepncp(do,gen,int); prepncp(do,gen,że); prepncp(w,acc,int); prepncp(w,acc,że)}
wybaczać: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
wybaczać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wybaczać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + {np(dat)}
wybaczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
wybaczyć: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wybaczyć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + {np(dat)}
wybadać: perf: subj{np(str)} + {cp(że)}
wybadać: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
wybadać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
wybadać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wybawić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(od,gen)}
wybawić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(przed,inst)}
wybawić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(z,gen)}
wybawić: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
wybawić: perf: subj{np(str)} + {prepnp(przed,inst)} + {refl}
wybawić: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wybawić się: perf: subj{np(str)} + {np(inst)}
wybełkotać: perf: subj{np(str)} + {cp(int)}
wybełkotać: perf: subj{np(str)} + {cp(że)}
wybełkotać: perf: subj{np(str)} + {cp(żeby)}
wybełkotać: perf: subj{np(str)} + obj{np(str)}
wybełkotać: perf: subj{np(str)} + {or}
wybić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)} + {preplexnp(z,gen,_,'głowa',atr)}
wybić: perf: subj{np(str)} + {np(dat)} + {xp(perl)}
wybić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)} + {preplexnp(z,gen,_,'głowa',atr)}
wybić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wybić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wybić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'pień',natr)}
wybić: perf: subj{np(str)} + obj{np(str)} + {prepnp(co do,gen)}
wybić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wybić: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
wybić: perf: subj{np(str)} + {prepnp(w,loc)} + {or}
wybić się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wybić się: perf: subj{np(str)} + {prepnp(na,acc)}
wybić się: perf: subj{np(str)} + {prepnp(na,loc)}
wybić się: perf: subj{np(str)} + {prepnp(ponad,acc)}
wybić się: perf: subj{np(str)} + {prepnp(w,loc)}
wybić się: perf: subj{np(str)} + {prepnp(z,gen)}
wybić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wybiec: perf: subj,controller{np(str)} + controllee{infp(_)} + {xp(abl)} + {xp(adl)}
wybiec: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
wybiec: perf: subj{np(str)} + {prepnp(za,inst)} + {xp(abl)} + {xp(adl)}
wybiec: perf: subj{np(str)} + {xp(adl)} + {lexnp(inst,_,'myśl',natr)}
wybiegać: imperf: subj,controller{np(str)} + controllee{infp(_)} + {xp(abl)} + {xp(adl)}
wybiegać: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
wybiegać: imperf: subj{np(str)} + {prepnp(za,inst)} + {xp(abl)} + {xp(adl)}
wybiegać: imperf: subj{np(str)} + {xp(adl)} + {lexnp(inst,_,'myśl',natr)}
wybiegać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wybiegać się: perf: subj{np(str)} + {xp(locat)}
wybierać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
wybierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wybierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wybierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wybierać: imperf: subj{np(str)} + {prepnp(między,inst)}
wybierać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
wybierać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
wybierać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
wybierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
wybierać się: imperf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
wybijać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)} + {preplexnp(z,gen,_,'głowa',atr)}
wybijać: perf: subj{np(str)} + {np(dat)} + {xp(perl)}
wybijać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)} + {preplexnp(z,gen,_,'głowa',atr)}
wybijać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wybijać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wybijać: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'pień',natr)}
wybijać: perf: subj{np(str)} + obj{np(str)} + {prepnp(co do,gen)}
wybijać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wybijać: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
wybijać: perf: subj{np(str)} + {prepnp(w,loc)} + {or}
wybijać się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wybijać się: perf: subj{np(str)} + {prepnp(na,acc)}
wybijać się: perf: subj{np(str)} + {prepnp(na,loc)}
wybijać się: perf: subj{np(str)} + {prepnp(ponad,acc)}
wybijać się: perf: subj{np(str)} + {prepnp(w,loc)}
wybijać się: perf: subj{np(str)} + {prepnp(z,gen)}
wybijać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wyblaknąć: perf: subj{np(str)} + {prepnp(na,loc)}
wyblaknąć: perf: subj{np(str)} + {prepnp(od,gen)}
wybrać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
wybrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wybrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wybrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wybrać: perf: subj{np(str)} + {prepnp(między,inst)}
wybrać się: perf: subj,controller{np(str)} + controllee{infp(_)}
wybrać się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
wybrać się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(po,acc)}
wybrać się: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
wybrać się: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
wybraniać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(od,gen)} + {refl}
wybraniać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)} + {refl}
wybraniać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen)} + {refl}
wybraniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(od,gen)}
wybraniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
wybraniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen)}
wybrnąć: perf: subj{np(str)} + {or}
wybrnąć: perf: subj{np(str)} + {prepnp(z,gen)}
wybronić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(od,gen)} + {refl}
wybronić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)} + {refl}
wybronić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen)} + {refl}
wybronić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(od,gen)}
wybronić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
wybronić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen)}
wybrzydzać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
wybrzydzać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
wybuchać: imperf: subj{np(str)} + {cp(że)}
wybuchać: imperf: subj{np(str)} + {np(inst)} + {or}
wybuchnąć: perf: subj{np(str)} + {cp(że)}
wybuchnąć: perf: subj{np(str)} + {np(inst)} + {or}
wybudować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
wybudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
wybudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyburzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyburzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
wycedzić: perf: subj{np(str)} + {prepnp(przez,acc)} + {or}
wycelować: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wycelować: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wycelować: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
wycelować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wycelować: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
wycelować: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
wycelować: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
wycelować: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,gen)}
wycelować: perf: subj{np(str)} + {xp(locat)}
wyceniać: imperf: subj{np(str)} + {advp(misc)} + {refl}
wyceniać: imperf: subj{np(str)} + {cp(int)}
wyceniać: imperf: subj{np(str)} + {cp(że)}
wyceniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {advp(misc)}
wyceniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wyceniać: imperf: subj{np(str)} + {prepnp(na,acc)} + {refl}
wycenić: perf: subj{np(str)} + {advp(misc)} + {refl}
wycenić: perf: subj{np(str)} + {cp(int)}
wycenić: perf: subj{np(str)} + {cp(że)}
wycenić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {advp(misc)}
wycenić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wycenić: perf: subj{np(str)} + {prepnp(na,acc)} + {refl}
wychodzić: imperf: {prepadjp(na,acc)}
wychodzić: imperf: {prepncp(na,acc,że)}
wychodzić: imperf: {prepnp(na,acc)}
wychodzić: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,gen)}
wychodzić: imperf: subj,controller{np(str); ncp(str,że)} + controllee{prepadjp(na,acc)} + {np(dat)}
wychodzić: imperf: subj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {fixed('na jaw')}
wychodzić: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {lexnp(inst,sg,'bok',natr)}
wychodzić: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {preplexnp(na,acc,sg,'zdrowie',natr)}
wychodzić: imperf: subj{np(str)} + {np(dat)} + {advp(misc)}
wychodzić: imperf: subj{np(str)} + {np(dat)} + {lexnp(inst,_,'ucho',natr)}
wychodzić: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'korzyść',natr)}
wychodzić: imperf: subj{np(str)} + {prepnp(do,gen)}
wychodzić: imperf: subj{np(str)} + {prepnp(na,acc)}
wychodzić: imperf: subj{np(str)} + {prepnp(od,gen)}
wychodzić: imperf: subj{np(str)} + {prepnp(poza,acc)}
wychodzić: imperf: subj{np(str)} + {prepnp(za,acc)} + {fixed('za mąż')}
wychodzić: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wychodzić: perf: subj{np(str)} + obj{np(str)}
wychować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
wychować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wychować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wychować się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
wychować się: imperf: subj{np(str)} + {prepnp(na,loc)}
wychować się: imperf: subj{np(str)} + {xp(locat)}
wychowywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
wychowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wychowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wychowywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
wychowywać się: imperf: subj{np(str)} + {prepnp(na,loc)}
wychowywać się: imperf: subj{np(str)} + {xp(locat)}
wychylać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wychylać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wychylać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wychylać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(perl)}
wychylać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
wychylać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
wychylać się: imperf: subj{np(str)} + {np(dat)} + {xp(perl)}
wychylić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wychylić: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
wychylić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wychylić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wychylić: perf: subj{np(str)} + obj{np(str)} + {xp(perl)}
wychylić się: perf: {prepnp(z,inst)} + {or}
wychylić się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wychylić się: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
wychylić się: perf: subj{np(str)} + {prepnp(ku,dat)} + {xp(abl)} + {xp(perl)}
wychylić się: perf: subj{np(str)} + {prepnp(przed,acc)}
wychylić się: perf: subj{np(str)} + {prepnp(za,inst)} + {xp(abl)} + {xp(perl)}
wychylić się: perf: subj{np(str)} + {prepnp(zza,gen)} + {xp(adl)} + {xp(perl)}
wyciąć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)} + {xp(abl)}
wyciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wyciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wyciąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wyciąć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(co do,gen,sg,'noga',natr)}
wyciąć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(do,gen,sg,'noga',natr)}
wyciąć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'pień',natr)}
wyciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wyciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); xp(adl)}
wyciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyciągać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wyciągać się: imperf: subj{np(str)} + {xp(locat)}
wyciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wyciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); xp(adl)}
wyciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyciągnąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wyciągnąć się: perf: subj{np(str)} + {xp(locat)}
wycierać: imperf: subj{np(str)} + {np(inst)} + {xp(locat)} + {refl}
wycierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
wycierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
wycierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wycierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wycierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc); prepnp(w,acc)} + {prepnp(z,gen)}
wycierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
wycierać: imperf: subj{np(str)} + {prepnp(o,acc)} + {refl}
wycierać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
wycierać: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wycierać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
wycierać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wycierać się: imperf: subj{np(str)} + {prepnp(z,inst)}
wycinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
wycinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wycinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wycinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wycinać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(co do,gen,sg,'noga',natr)}
wycinać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(do,gen,sg,'noga',natr)}
wycinać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'pień',natr)}
wycinać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wyciskać: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {prepnp(z,gen)}
wyciskać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
wyciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wyciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wyciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyciskać: imperf: subj{np(str)} + {prepnp(od,gen)} + {cp(int)}
wyciskać: imperf: subj{np(str)} + {prepnp(od,gen)} + {cp(że)}
wyciskać: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(int)}
wyciskać: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
wycisnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str)} + {prepnp(z,gen)}
wycisnąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
wycisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wycisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wycisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wycisnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wycisnąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wycisnąć: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(int)}
wycisnąć: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(że)}
wycisnąć: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(int)}
wycisnąć: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
wycofać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wycofać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wycofać się: perf: subj{np(str)} + {prepncp(z,gen,że)}
wycofać się: perf: subj{np(str)} + {prepnp(z,gen)}
wycofać się: perf: subj{np(str)} + {xp(abl)}
wycofywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wycofywać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wycofywać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
wycofywać się: imperf: subj{np(str)} + {xp(abl)}
wyczerpać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyczerpać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyczerpać się: perf: subj{np(str)} + {np(inst)}
wyczerpywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyczerpywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyczerpywać się: imperf: subj{np(dat)} + {np(str)}
wyczuć: perf: subj{np(str)} + {cp(int)}
wyczuć: perf: subj{np(str)} + {np(inst)} + {cp(że)}
wyczuć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyczuwać: imperf: subj{np(str)} + {np(inst)} + {cp(int)}
wyczuwać: imperf: subj{np(str)} + {np(inst)} + {cp(że)}
wyczuwać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)}
wyczyniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wyczytać: perf: subj{np(str)} + obj{cp(int)} + {prepnp(z,gen)}
wyczytać: perf: subj{np(str)} + obj{cp(int)} + {xp(locat)}
wyczytać: perf: subj{np(str)} + obj{cp(żeby)} + {prepnp(z,gen)}
wyczytać: perf: subj{np(str)} + obj{cp(żeby)} + {xp(locat)}
wyczytać: perf: subj{np(str)} + obj{cp(że)} + {comprepnp(na temat)} + {xp(locat)}
wyczytać: perf: subj{np(str)} + obj{cp(że)} + {prepnp(o,loc)} + {xp(locat)}
wyczytać: perf: subj{np(str)} + obj{cp(że)} + {prepnp(z,gen)}
wyczytać: perf: subj{np(str)} + obj{cp(że)} + {xp(locat)}
wyczytać: perf: subj{np(str)} + obj{nonch} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {xp(locat)}
wyczytać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,gen); prepncp(z,gen,int)}
wyczytać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {xp(locat)}
wyczytać: perf: subj{np(str)} + {prepnp(z,gen)} + {or}
wyć: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str)} + {xp(locat)}
wyć: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wyć: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wyć: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
wyć: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
wyć: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
wyć: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,żeby)}
wyć: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,żeby)}
wyć: imperf: subj{np(str)} + {prepnp(z,gen)} + {or}
wyć: imperf: subj{or} + {np(dat)} + {xp(locat)}
wydać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wydać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wydać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wydać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepnp(w,loc)}
wydać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {fixed('za mąż')}
wydać się: perf: subj,controller{E} + controllee{infp(imperf)} + {np(dat)}
wydać się: perf: subj,controller{np(str)} + controllee{adjp(pred)} + {np(dat)}
wydać się: perf: subj,controller{np(str)} + controllee{np(inst)} + {np(dat)}
wydać się: perf: subj{cp(int)}
wydać się: perf: subj{cp(jakby)} + {np(dat)}
wydać się: perf: subj{cp(że)} + {np(dat)}
wydać się: perf: subj{np(str)}
wydać się: perf: subj{np(str)} + {prepnp(za,acc)} + {fixed('za mąż')}
wydalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
wydalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wydalić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wydalić się: perf: subj{np(str)} + {prepnp(z,inst)}
wydalić się: perf: subj{np(str)} + {xp(abl)}
wydalić się: perf: subj{np(str)} + {xp(adl)}
wydalić się: perf: subj{np(str)} + {xp(perl)}
wydarzać się: imperf: subj{np(str)} + {np(dat)} + {xp(temp)}
wydarzać się: imperf: subj{np(str)} + {xp(locat)}
wydarzyć się: perf: subj{cp(że)}
wydarzyć się: perf: subj{np(str)} + {np(dat)} + {xp(temp)}
wydarzyć się: perf: subj{np(str)} + {xp(locat)}
wydawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wydawać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wydawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wydawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepnp(w,loc)}
wydawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)} + {fixed('za mąż')}
wydawać się: imperf: subj,controller{cp(int)} + controllee{adjp(pred)} + {np(dat)}
wydawać się: imperf: subj,controller{cp(int)} + controllee{np(inst)} + {np(dat)}
wydawać się: imperf: subj,controller{cp(kiedy)} + controllee{adjp(pred)} + {np(dat)}
wydawać się: imperf: subj,controller{cp(żeby)} + controllee{adjp(pred)} + {np(dat)}
wydawać się: imperf: subj,controller{cp(żeby)} + controllee{np(inst)} + {np(dat)}
wydawać się: imperf: subj,controller{cp(że)} + controllee{adjp(pred)} + {np(dat)}
wydawać się: imperf: subj,controller{cp(że)} + controllee{np(inst)} + {np(dat)}
wydawać się: imperf: subj,controller{E} + controllee{infp(imperf)} + {np(dat)}
wydawać się: imperf: subj,controller{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + controllee{adjp(pred)} + {np(dat)}
wydawać się: imperf: subj,controller{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + controllee{np(inst)} + {np(dat)}
wydawać się: imperf: subj{cp(jakby)} + {np(dat)}
wydawać się: imperf: subj{cp(że)} + {np(dat)}
wydawać się: imperf: subj{np(str)} + {prepnp(za,acc)} + {fixed('za mąż')}
wydąć się: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wydąć się: perf: subj{np(str)} + {prepnp(na,acc)}
wydłubać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wydłubać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wydłubać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wydłużać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
wydłużać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
wydłużyć: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
wydłużyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
wydobyć: perf: subj{np(str)} + {np(str)} + {preplexnp(z,gen,_,'siebie',natr)} + {or}
wydobyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wydobyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wydobyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wydobyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wydobyć się: perf: subj{np(str)} + {prepnp(na,acc)}
wydobyć się: perf: subj{np(str)} + {prepnp(z,gen)}
wydobyć się: perf: subj{np(str)} + {xp(abl)}
wydobywać: imperf: subj{np(str)} + {np(str)} + {preplexnp(z,gen,_,'siebie',natr)} + {or}
wydobywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wydobywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wydobywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wydobywać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wydobywać się: imperf: subj{np(str)} + {prepnp(na,acc)}
wydobywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wydobywać się: imperf: subj{np(str)} + {xp(abl)}
wydostać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wydostać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wydostać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wydostać się: perf: subj{np(str)} + {prepnp(z,gen)}
wydostać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wydostawać: imperf: subj{np(str)} + {np(part)} + {prepnp(na,acc)}
wydostawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wydostawać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wydostawać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wydostawać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
wydrukować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wydrukować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wydrukować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,pl,'ręka',ratr)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {or}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wydrzeć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wydrzeć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
wydrzeć się: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
wydrzeć się: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wydrzeć się: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wydrzeć się: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
wydrzeć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
wydrzeć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wydrzeć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
wydrzeć się: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
wydrzeć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
wydrzeć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wydrzeć się: perf: subj{np(str)} + {prepnp(o,loc)}
wydrzeć się: perf: subj{np(str)} + {xp(adl)}
wydusić: perf: subj{np(str)} + {np(inst)} + {or}
wydusić: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {cp(int)}
wydusić: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {cp(że)}
wydusić: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {cp(żeby)}
wydusić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)} + {prepnp(z,gen)}
wydusić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wydusić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wydusić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
wydymać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wydymać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wydymać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
wydzielać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wydzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
wydzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)} + {prepnp(z,gen)}
wydzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
wydzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)} + {prepnp(z,gen)}
wydzielać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wydzielać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wydzielić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wydzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
wydzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)} + {prepnp(z,gen)}
wydzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
wydzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)} + {prepnp(z,gen)}
wydzielić: perf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wydzielić się: perf: subj{np(str)} + {prepnp(z,gen)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,pl,'ręka',ratr)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {or}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wydzierać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wydzierać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
wydzierać się: imperf: subj{np(str)} + {comprepnp(na temat)}
wydzierać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
wydzierać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wydzierać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wydzierać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
wydzierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
wydzierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wydzierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
wydzierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
wydzierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
wydzierać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wydzierać się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
wydzierać się: imperf: subj{np(str)} + {xp(adl)}
wyeliminować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyglądać: imperf: {cp(że)}
wyglądać: imperf: {prepncp(na,acc,że)}
wyglądać: imperf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + {np(dat)}
wyglądać: imperf: subj,controller{np(str)} + controllee{prepnp(na,acc)} + {np(dat)}
wyglądać: imperf: subj,controller{np(str)} + controllee{xp(mod)}
wyglądać: imperf: subj{np(str)} + {np(gen)}
wyglądać: imperf: subj{np(str)} + {prepnp(na,acc)}
wyglądać: imperf: subj{np(str)} + {prepnp(przez,acc)}
wygłaszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wygłaszać: imperf: subj{np(str)} + {or}
wygłosić: imperf: subj{np(str)} + {cp(że)}
wygłosić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wygłosić: imperf: subj{np(str)} + {or}
wygrać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wygrać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(w,acc)}
wygrać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
wygrać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wygrać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wygrać: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
wygrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wygrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(w,acc)}
wygrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
wygrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wygrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wygrywać: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
wyhodować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wyhodować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wyhodować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wyhodować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyjadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(mod)}
wyjaśniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
wyjaśniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wyjaśniać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)} + {or}
wyjaśniać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
wyjaśniać się: imperf: subj{cp(int)}
wyjaśniać się: imperf: subj{cp(że)}
wyjaśniać się: imperf: subj{np(str); ncp(str,int); ncp(str,że)}
wyjaśnić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
wyjaśnić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wyjaśnić: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)} + {or}
wyjaśnić się: perf: subj,controller{np(str)} + controllee{prepadjp(jako,str)}
wyjaśnić się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
wyjaśnić się: perf: subj{cp(int)}
wyjaśnić się: perf: subj{cp(że)}
wyjaśnić się: perf: subj{np(str); ncp(str,int); ncp(str,że)}
wyjawiać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)}
wyjawiać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wyjawiać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
wyjawiać: imperf: subj{np(str)} + obj{or} + {np(dat)}
wyjawiać się: imperf: subj{np(str)}
wyjawić: perf: subj{np(str)} + obj{np(str); cp(int); ncp(str,int)} + {np(dat)} + {xp(locat)} + {xp(temp)}
wyjawić: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)} + {xp(locat)} + {xp(temp)}
wyjąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wyjąć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(spod,gen,sg,'prawo',atr)}
wyjąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyjąkać: perf: subj{np(str)} + {cp(int)}
wyjąkać: perf: subj{np(str)} + {cp(że)}
wyjąkać: perf: subj{np(str)} + {cp(żeby)}
wyjąkać: perf: subj{np(str)} + obj{np(str)}
wyjąkać: perf: subj{np(str)} + {or}
wyjechać: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
wyjechać: perf: subj{np(str)} + {prepnp(do,gen)}
wyjechać: perf: subj{np(str)} + {prepnp(na,acc)}
wyjechać: perf: subj{np(str)} + {prepnp(od,gen)}
wyjechać: perf: subj{np(str)} + {xp(abl)}
wyjechać: perf: subj{np(str)} + {xp(adl)}
wyjednać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str); ncp(str,że); ncp(str,żeby)} + {prepnp(od,gen)}
wyjednać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str); ncp(str,że); ncp(str,żeby)} + {prepnp(u,gen)}
wyjednać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)} + {cp(że)}
wyjednać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)} + {cp(żeby)}
wyjednać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(u,gen)} + {cp(że)}
wyjednać: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(u,gen)} + {cp(żeby)}
wyjeść: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(mod)}
wyjeżdżać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
wyjeżdżać: imperf: subj{np(str)} + {prepnp(do,gen)}
wyjeżdżać: imperf: subj{np(str)} + {prepnp(na,acc)}
wyjeżdżać: imperf: subj{np(str)} + {prepnp(od,gen)}
wyjeżdżać: imperf: subj{np(str)} + {xp(abl)}
wyjeżdżać: imperf: subj{np(str)} + {xp(adl)}
wyjeżdżać: perf: subj{np(str)} + obj{np(str)}
wyjeżdżać się: perf: subj{np(str)}
wyjmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wyjmować: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(spod,gen,sg,'prawo',atr)}
wyjmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyjść: perf: {prepadjp(na,acc)}
wyjść: perf: {prepncp(na,acc,że)}
wyjść: perf: {prepnp(na,acc)}
wyjść: perf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,gen)}
wyjść: perf: subj,controller{np(str); ncp(str,że)} + controllee{prepadjp(na,acc)} + {np(dat)}
wyjść: perf: subj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {fixed('na jaw')}
wyjść: perf: subj{np(str)} + {np(dat)} + {advp(misc)}
wyjść: perf: subj{np(str)} + {np(dat)} + {lexnp(inst,sg,'bok',natr)}
wyjść: perf: subj{np(str)} + {np(dat)} + {lexnp(inst,_,'ucho',natr)}
wyjść: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'korzyść',natr)}
wyjść: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'spotkanie',natr)}
wyjść: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'zdrowie',natr)}
wyjść: perf: subj{np(str)} + {prepnp(do,gen)}
wyjść: perf: subj{np(str)} + {prepnp(na,acc); xp(adl)} + {xp(abl)} + {xp(perl)}
wyjść: perf: subj{np(str)} + {prepnp(od,gen)}
wyjść: perf: subj{np(str)} + {prepnp(poza,acc)}
wyjść: perf: subj{np(str)} + {prepnp(za,acc)} + {fixed('za mąż')}
wyjść: perf: subj{np(str)} + {prepnp(z,inst)}
wykańczać: imperf: subj{np(str); ncp(str,że)} + {np(str)}
wykańczać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {refl}
wykańczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
wykańczać się: imperf: subj{np(str)} + {prepnp(na,acc)}
wykarmić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wykarmić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wykarmić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wykarmić się: perf: subj{np(str)} + {np(inst)}
wykazać: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)}
wykazać się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wykazywać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)}
wykazywać: imperf: subj{np(str)} + {or}
wykazywać się: imperf: subj{np(str)} + {np(inst)} + {or}
wykąpać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wykąpać: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
wykluczać: imperf: subj{np(str)} + {cp(że)}
wykluczać: imperf: subj{np(str)} + {cp(żeby)}
wykluczać: imperf: subj{np(str)} + {np(str); ncp(str,że)}
wykluczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykluczyć: perf: subj{np(str)} + obj{cp(że)}
wykluczyć: perf: subj{np(str)} + obj{cp(żeby)}
wykluczyć: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
wykluczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykluć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wykładać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)}
wykładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wykładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(jako,nom)} + {prepnp(na,acc)} + {prepnp(z,gen)}
wykładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
wykładać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc); ncp(loc,że)}
wykładać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wykoleić: perf: subj{np(str)} + obj{np(str)}
wykoleić się: perf: subj{np(str)}
wykombinować: perf: subj{np(str)} + {cp(int)} + {lexnp(dat,_,'siebie',natr)}
wykombinować: perf: subj{np(str)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)}
wykombinować: perf: subj{np(str)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
wykombinować: perf: subj{np(str)} + obj{np(str)} + {lexnp(dat,_,'siebie',natr)}
wykombinować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wykombinować: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wykombinować: perf: subj{np(str)} + {prepnp(z,gen)} + {nonch}
wykombinować: perf: subj{np(str)} + {prepnp(z,inst)} + {nonch}
wykonać: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
wykonać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wykonać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wykonać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykonać się: perf: subj{np(str)}
wykonywać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
wykonywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wykonywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wykonywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykonywać się: imperf: subj{np(str)}
wykończyć: perf: subj{np(str); ncp(str,że)} + {np(str)}
wykończyć: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {refl}
wykończyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
wykończyć się: perf: subj{np(str)} + {prepnp(na,acc)}
wykopać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wykopać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wykopać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykopać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wykopać: perf: subj{np(str)} + {xp(abl)} + {refl}
wykopywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wykopywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wykopywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wykopywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykopywać: imperf: subj{np(str)} + {xp(abl)} + {refl}
wykorzystać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wykorzystać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
wykorzystać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {cp(żeby)}
wykorzystać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
wykorzystać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(w,loc)}
wykorzystać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
wykorzystywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wykorzystywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
wykorzystywać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {cp(żeby)}
wykorzystywać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
wykorzystywać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(w,loc)}
wykorzystywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
wykpić: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
wykpić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(od,gen)}
wykpić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen)}
wykraczać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)} + {prepnp(poza,acc); prepncp(poza,acc,int); prepncp(poza,acc,że)}
wykraczać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,int); prepncp(przeciw,dat,że)}
wykraść: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wykreślać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wykreślać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykreślić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wykreślić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykreślić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wykręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wykręcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wykręcać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
wykręcać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
wykręcać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wykręcać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen); prepncp(od,gen,żeby)}
wykręcać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
wykręcać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen); prepncp(z,gen,że)}
wykręcać się: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
wykręcać się: imperf: subj{np(str)} + {or}
wykręcać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
wykręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wykręcić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wykręcić się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
wykręcić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(z,gen)}
wykręcić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wykręcić się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
wykręcić się: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
wykręcić się: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
wykręcić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
wykroczyć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst)} + {prepnp(poza,acc); prepncp(poza,acc,int); prepncp(poza,acc,że)}
wykroczyć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,int); prepncp(przeciw,dat,że)}
wykryć: perf: subj{np(str)} + {cp(int)}
wykryć: perf: subj{np(str)} + obj{cp(że)}
wykryć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
wykryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
wykryć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wykryć się: perf: subj{cp(że)}
wykryć się: perf: subj{np(str)}
wykrywać: imperf: subj{np(str)} + {cp(int)}
wykrywać: imperf: subj{np(str)} + obj{cp(że)}
wykrywać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
wykrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
wykrywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wykrywać się: imperf: subj{np(str)}
wykrztusić: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(z,gen)}
wykrztusić: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(int)}
wykrztusić: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
wykrztusić: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(żeby)}
wykrztusić: perf: subj{np(str)} + {prepnp(z,gen)} + {or}
wykrztusić się: perf: subj{np(str)}
wykrzyczeć: perf: subj{np(str)} + {np(dat)} + {cp(int)}
wykrzyczeć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wykrzyczeć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
wykrzyczeć: perf: subj{np(str)} + {np(dat)} + {or}
wykrzyczeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wykrzyczeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wykrzyczeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
wykrzyczeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
wykrzyczeć: perf: subj{np(str)} + {prepnp(ku,dat)} + {cp(int)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(ku,dat)} + {cp(że)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(ku,dat)} + {cp(żeby)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(ku,dat)} + {or}
wykrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
wykrzyczeć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
wykrzyczeć się: perf: subj{np(str)} + {prepnp(na,acc)}
wykrzykiwać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
wykrzykiwać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wykrzykiwać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
wykrzykiwać: imperf: subj{np(str)} + {np(dat)} + {or}
wykrzykiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wykrzykiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wykrzykiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ku,dat)}
wykrzykiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(ku,dat)} + {cp(int)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(ku,dat)} + {cp(że)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(ku,dat)} + {cp(żeby)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(ku,dat)} + {or}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
wykrzykiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
wykrzyknąć: perf: subj{np(str)} + obj{np(str)}
wykrzyknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wykrzyknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
wykrzyknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
wykuć: perf: subj{np(str)} + obj{np(str)} + {fixed('na blachę')}
wykuć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
wykuć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wykuć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykuć się: perf: subj{np(str)} + {np(gen)}
wykuć się: perf: subj{np(str)} + {prepnp(z,gen)}
wykuć się: perf: subj{np(str)} + {xp(locat)}
wykupić: perf: subj{np(str)} + {np(inst)} + {refl}
wykupić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wykupić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
wykupić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wykupić: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
wykupić: perf: subj{np(str)} + {prepnp(za,acc)} + {refl}
wykupić: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wykupywać: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
wykupywać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(za,acc)}
wykupywać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {prepnp(za,acc)}
wykupywać: perf: subj{np(str)} + {prepnp(z,gen)} + {prepnp(za,acc)} + {refl}
wykuwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wykuwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wykuwać się: imperf: subj{np(str)} + {np(gen)}
wykuwać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wykwalifikować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,acc)}
wykwalifikować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wykwalifikować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wykwalifikować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wykwalifikować się: perf: subj{np(str)} + {prepnp(do,gen)}
wykwalifikować się: perf: subj{np(str)} + {prepnp(jako,nom)}
wykwalifikować się: perf: subj{np(str)} + {prepnp(na,acc)}
wykwalifikować się: perf: subj{np(str)} + {prepnp(w,loc)}
wylać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
wylać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wylać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wylać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
wylać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
wylać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wylać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
wylać się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wylać się: perf: subj{np(str)} + {prepnp(na,acc)}
wylać się: perf: subj{np(str)} + {prepnp(z,gen)}
wylądować: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
wylądować: perf: subj{np(str)} + {prepnp(z,inst)} + {advp(misc)}
wylec: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wylec: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(żeby)}
wylec: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)}
wylecieć: perf: subj{np(str)} + {cp(że)}
wylecieć: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
wylecieć: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
wylecieć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
wylecieć: perf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {xp(abl)}
wyleczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyleczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wyleczyć się: perf: subj{np(str)} + {np(dat)}
wyleczyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wyleczyć się: perf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(z,gen)}
wyleczyć się: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
wyleczyć się: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(locat)}
wylewać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wylewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wylewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wylewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wylewać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wylewać: imperf: subj{np(str)} + {prepnp(za,acc)}
wylewać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wylewać się: imperf: subj{np(str)} + {xp(abl)}
wyleźć: perf: subj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {fixed('na jaw')}
wyleźć: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wyleźć: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
wyleźć: perf: subj{np(str)} + {prepnp(z,gen)}
wyliczać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
wyliczać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wyliczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wyliczać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen)}
wyliczyć: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
wyliczyć: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wyliczyć: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
wyliczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wyliczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyliczyć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen)}
wyładować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyładować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wyładować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyładować się: perf: subj{np(str)} + {prepnp(na,loc)}
wyładować się: perf: subj{np(str)} + {prepnp(w,loc)}
wyładować się: perf: subj{np(str)} + {prepnp(z,gen)}
wyładować się: perf: subj{np(str)} + {xp(locat)}
wyładowywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyładowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wyładowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyładowywać się: imperf: subj{np(str)} + {prepnp(na,loc)}
wyładowywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wyładowywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wyładowywać się: imperf: subj{np(str)} + {xp(locat)}
wyładowywać się: imperf: subj{np(str)} + {xp(mod)}
wyłamać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyłamać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wyłamać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wyłamać się: perf: subj{np(str)} + {np(dat)}
wyłamać się: perf: subj{np(str)} + {or}
wyłamać się: perf: subj{np(str)} + {prepnp(z,gen)}
wyłamywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wyłamywać się: imperf: subj{np(str)} + {or}
wyłamywać się: imperf: subj{np(str)} + {prepnp(od,gen)}
wyłamywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wyłaniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wyłaniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyłaniać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wyłaniać się: imperf: subj{np(str)} + {xp(abl)}
wyłazić: perf: subj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {fixed('na jaw')}
wyłazić: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wyłazić: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
wyłazić: perf: subj{np(str)} + {prepnp(z,gen)}
wyłączać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyłączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(poza,acc)}
wyłączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyłączać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wyłączać się: imperf: subj{np(str)} + {or}
wyłączać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wyłączać się: imperf: subj{np(str)} + {xp(abl)}
wyłączyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyłączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(poza,acc)}
wyłączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyłączyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wyłączyć się: perf: subj{np(str)} + {prepnp(z,gen)}
wyłączyć się: perf: subj{np(str)} + {xp(abl)}
wyłonić: perf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wyłonić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyłonić się: perf: subj{np(str)} + {prepnp(z,gen)}
wyłonić się: perf: subj{np(str)} + {xp(abl)}
wyłożyć: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)}
wyłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(jako,nom)} + {prepnp(na,acc)} + {prepnp(z,gen)}
wyłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wyłożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
wyłożyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc); prepncp(na,loc,że)}
wyłożyć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
wyłudzać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
wyłudzać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepncp(pod,inst,że)}
wyłudzać: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
wyłudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(od,gen)}
wyłuskać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(mod)}
wyłuskać: perf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wymagać: imperf: subj{cp(int)} + {np(gen)}
wymagać: imperf: subj{cp(że)} + {np(gen)}
wymagać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(gen)}
wymagać: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(od,gen)}
wymagać: imperf: subj{np(str)} + obj{np(gen); cp(żeby); ncp(gen,że); ncp(gen,żeby)} + {prepnp(od,gen)}
wymawiać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
wymawiać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wymawiać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
wymawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wymawiać się: imperf: subj{np(str)} + {or}
wymawiać się: imperf: subj{np(str)} + {prepnp(od,gen)}
wymeldować: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wymeldować: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wymeldować: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
wymeldować: perf: subj{np(str)} + {xp(abl)} + {refl}
wymieniać: imperf: subj{np(str)} + {cp(int)}
wymieniać: imperf: subj{np(str)} + {cp(że)}
wymieniać: imperf: subj{np(str)} + {np(str); ncp(str,że)}
wymieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wymieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
wymieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wymieniać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
wymienić: perf: subj{np(str)} + obj{np(str)} + {or}
wymienić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,sg,'imię',atr)}
wymienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wymienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
wymienić się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
wymierzyć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
wymierzyć: perf: subj{np(str)} + {np(inst)} + {prepnp(ku,dat)}
wymierzyć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
wymierzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wymierzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wymierzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wymierzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
wymierzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wymierzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wymierzyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
wymijać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wymijać się: imperf: subj{np(str)} + {prepnp(od,gen)}
wymijać się: imperf: subj{np(str)} + {prepnp(z,inst)}
wymijać się: imperf: subj{np(str)} + {xp(locat)}
wyminąć: perf: subj{np(str)} + obj{np(str)}
wyminąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wyminąć się: perf: subj{np(str)} + {xp(locat)}
wymiotować: imperf: subj{np(str)} + {np(inst)}
wymiotować: imperf: subj{np(str)} + {prepnp(od,gen)}
wymiotować: imperf: subj{np(str)} + {prepnp(po,loc)}
wymiotować: imperf: subj{np(str)} + {prepnp(z,gen)}
wymusić: imperf: subj{np(str); ncp(str,że)} + obj{np(str); ncp(str,że); ncp(str,żeby)} + {np(inst); ncp(inst,że)} + {prepnp(na,loc)}
wymusić: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {cp(że)}
wymusić: imperf: subj{np(str)} + obj{cp(żeby)} + {np(inst)} + {prepnp(na,loc)}
wymusić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
wymusić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wymusić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {prepnp(za,acc)}
wymusić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(za,acc)}
wymuszać: imperf: subj{np(str); ncp(str,że)} + obj{np(str); ncp(str,że); ncp(str,żeby)} + {np(inst); ncp(inst,że)} + {prepnp(na,loc)}
wymuszać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {cp(że)}
wymuszać: imperf: subj{np(str)} + obj{cp(żeby)} + {np(inst)} + {prepnp(na,loc)}
wymuszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
wymuszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wymuszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {prepnp(za,acc)}
wymuszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(za,acc)}
wymyślać: imperf: subj{np(str)} + {cp(int)}
wymyślać: imperf: subj{np(str)} + {cp(że)}
wymyślać: imperf: subj{np(str)} + {cp(żeby)}
wymyślać: imperf: subj{np(str)} + {np(dat)} + {or}
wymyślać: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
wymyślać: imperf: subj{np(str)} + obj{np(str)}
wymyślać: imperf: subj{np(str)} + {prepnp(na,acc)}
wymyślić: perf: subj{np(str)} + {cp(int)}
wymyślić: perf: subj{np(str)} + {cp(że)}
wymyślić: perf: subj{np(str)} + {cp(żeby)}
wymyślić: perf: subj{np(str)} + obj{ncp(str,że)}
wymyślić: perf: subj{np(str)} + obj{np(str)}
wymyślić: perf: subj{np(str)} + {or}
wynagradzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wynagradzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
wynagrodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wynagrodzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
wynająć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wynająć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wynająć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wynająć: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
wynająć się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wynająć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wynajmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wynajmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wynajmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wynajmować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
wynajmować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wynajmować się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wynaleźć: perf: subj{np(str)} + obj{np(str)} + {advp(misc)}
wynaleźć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wynegocjować: perf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {prepnp(z,inst)}
wynegocjować: perf: subj{np(str)} + obj{cp(int)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
wynegocjować: perf: subj{np(str)} + obj{cp(żeby)} + {np(dat)} + {prepnp(z,inst)}
wynegocjować: perf: subj{np(str)} + obj{cp(żeby)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
wynegocjować: perf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {prepnp(z,inst)}
wynegocjować: perf: subj{np(str)} + obj{cp(że)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
wynegocjować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {prepnp(z,inst)}
wynegocjować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
wynieść: perf: {np(str)} + {xp(abl)} + {xp(adl)}
wynieść: perf: subj{np(str)} + {np(str)}
wynieść: perf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,acc,pl,'niebiosa',natr)}
wynieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wynieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wynieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,acc)}
wynieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(ponad,acc)}
wynieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wynieść: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wynieść się: perf: subj{np(str)} + {prepnp(nad,acc)}
wynieść się: perf: subj{np(str)} + {prepnp(ponad,acc)}
wynieść się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wynikać: imperf: subj{np(str); cp(int); cp(że); cp(żeby); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że); prepncp(z,gen,żeby)}
wyniknąć: perf: subj{np(str); cp(int); cp(że); cp(żeby); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że); prepncp(z,gen,żeby)}
wynosić: imperf: {np(str)} + {xp(abl)} + {xp(adl)}
wynosić: imperf: subj{np(str)} + {np(str)}
wynosić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,acc,pl,'niebiosa',natr)}
wynosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wynosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wynosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,acc)}
wynosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ponad,acc)}
wynosić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wynosić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wynosić się: imperf: subj{np(str)} + {prepnp(nad,acc)}
wynosić się: imperf: subj{np(str)} + {prepnp(ponad,acc)}
wynosić się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wynurzać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wynurzać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wynurzyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wynurzyć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wyobrazić: perf: subj{np(str)} + {cp(żeby2)} + {lexnp(dat,_,'siebie',natr)}
wyobrazić: perf: subj{np(str)} + {np(str); cp(int); cp(że); ncp(str,int); ncp(str,że); ncp(str,żeby2)} + {lexnp(dat,_,'siebie',natr)}
wyobrazić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {lexnp(dat,_,'siebie',natr)}
wyobrażać: imperf: subj{np(str)} + {cp(żeby2)} + {lexnp(dat,_,'siebie',natr)}
wyobrażać: imperf: subj{np(str)} + {np(str); cp(int); cp(że); ncp(str,int); ncp(str,że); ncp(str,żeby2)} + {lexnp(dat,_,'siebie',natr)}
wyobrażać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {lexnp(dat,_,'siebie',natr)}
wyodrębniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyodrębniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyodrębniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wyodrębniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wyodrębniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyodrębniać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(spośród,gen)}
wyodrębniać się: imperf: subj{np(str)} + {prepnp(od,gen)}
wyodrębniać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wyodrębniać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wyodrębnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyodrębnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyodrębnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(spośród,gen)}
wyodrębnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wyodrębnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyodrębnić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(spośród,gen)}
wyodrębnić się: perf: subj{np(str)} + {prepnp(od,gen)}
wyodrębnić się: perf: subj{np(str)} + {prepnp(w,acc)}
wyodrębnić się: perf: subj{np(str)} + {prepnp(z,gen)}
wyolbrzymiać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
wyostrzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyostrzać się: imperf: subj{np(str)} + {np(dat)}
wyostrzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyostrzyć się: perf: subj{np(str)} + {np(dat)}
wypaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wypaczać się: imperf: subj{np(str)} + {prepnp(pod,inst)}
wypaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wypaczyć się: perf: subj{np(str)} + {prepnp(pod,inst)}
wypadać: imperf: {np(dat)} + {advp(pron)}
wypadać: imperf: subj,controllee{infp(_)} + controller{np(dat)}
wypadać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {advp(misc)}
wypadać: imperf: subj{cp(żeby)} + {np(dat)} + {prepnp(z,gen)}
wypadać: imperf: subj{cp(że)} + {np(dat)} + {prepnp(z,gen)}
wypadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wypadać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
wypadać: imperf: subj{np(str)} + {prepnp(na,acc)}
wypadać: imperf: subj{np(str)} + {prepnp(w,loc)} + {advp(misc)}
wypadać: imperf: subj{np(str)} + {xp(temp)}
wypalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
wypalać: imperf: subj{np(str)} + {or}
wypalać: imperf: subj{np(str)} + {prepnp(w,loc)}
wypalać: imperf: subj{np(str)} + {prepnp(z,inst)}
wypalać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wypalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
wypalić: perf: subj{np(str)} + {or}
wypalić: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int)}
wypalić się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
wyparować: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wyparować: perf: subj{np(str)} + {preplexnp(pod,inst,sg,'wpływ',ratr)}
wyparować: perf: subj{np(str)} + {prepnp(przez,acc)} + {prepnp(z,gen)}
wyparować: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(adl)} + {xp(mod)}
wypaść: perf: controller{np(dat)} + controllee{infp(_)}
wypaść: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {advp(misc)}
wypaść: perf: subj{cp(żeby)} + {np(dat)} + {prepnp(z,gen)}
wypaść: perf: subj{cp(że)} + {np(dat)} + {prepnp(z,gen)}
wypaść: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wypaść: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
wypaść: perf: subj{np(str)} + {prepnp(na,acc)}
wypaść: perf: subj{np(str)} + {prepnp(w,loc)} + {advp(misc)}
wypaść: perf: subj{np(str)} + {xp(temp)}
wypatrywać: imperf: subj{np(str)} + {cp(int)} + {xp(abl)}
wypatrywać: imperf: subj{np(str)} + {cp(że)} + {xp(abl)}
wypatrywać: imperf: subj{np(str)} + obj{np(gen)} + {xp(abl)} + {xp(locat)}
wypatrywać: imperf: subj{np(str)} + {prepnp(za,inst)} + {lexnp(str,pl,'oko',natr)}
wypatrzyć: perf: subj{np(str)} + {cp(int)} + {xp(abl)}
wypatrzyć: perf: subj{np(str)} + {cp(że)} + {xp(abl)}
wypatrzyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(locat)}
wypatrzyć: perf: subj{np(str)} + {prepnp(za,inst)} + {lexnp(str,pl,'oko',natr)}
wypchnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wypchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wypchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(perl)}
wypchnąć: perf: subj{np(str)} + {xp(adl)} + {refl}
wypełniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wypełniać się: imperf: subj{np(str)} + {np(inst)}
wypełnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wypełnić się: perf: subj{np(str)} + {np(inst)}
wypełzać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
wypełzać: imperf: subj{np(str)} + {xp(abl)} + {xp(perl)}
wypełznąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
wypełznąć: perf: subj{np(str)} + {xp(abl)} + {xp(perl)}
wypędzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wypędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(od,gen)}
wypędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wypędzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wypędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wypędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
wypędzić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wypędzić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(perl)}
wypiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wypiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wypiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wypiąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wypiąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wypiąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
wypiąć się: perf: subj{np(str)} + {prepnp(z,gen)}
wypiąć się: perf: subj{np(str)} + {xp(adl)}
wypić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wypić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wypić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
wypić: perf: subj{np(str)} + {prepnp(na,acc)}
wypiekać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wypierać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(na rzecz)} + {xp(abl)}
wypierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wypierać się: imperf: subj{np(str)} + {cp(jakoby)}
wypierać się: imperf: subj{np(str)} + {cp(że)}
wypierać się: imperf: subj{np(str)} + {cp(żeby)}
wypierać się: imperf: subj{np(str)} + {np(gen)} + {comprepnp(na rzecz)}
wypierać się: imperf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)} + {or}
wypijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wypijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wypijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
wypijać: imperf: subj{np(str)} + {prepnp(na,acc)}
wypisać: perf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
wypisać: perf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wypisać: perf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
wypisać: perf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wypisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
wypisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wypisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
wypisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wypisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wypisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wypisać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wypisać: perf: subj{np(str)} + {prepnp(od,gen)} + {refl}
wypisać: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wypisać: perf: subj{np(str)} + {xp(abl)} + {refl}
wypisać się: perf: subj{np(str)} + {np(dat)}
wypisywać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
wypisywać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wypisywać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
wypisywać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wypisywać: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(o,loc)} + {xp(locat)}
wypisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,loc)}
wypisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
wypisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepadjp(po,postp)}
wypisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wypisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wypisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc)} + {xp(locat)}
wypisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wypisywać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wypisywać: imperf: subj{np(str)} + {prepnp(od,gen)} + {refl}
wypisywać: imperf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wypisywać: imperf: subj{np(str)} + {xp(abl)} + {refl}
wypisywać się: imperf: subj{np(str)} + {np(dat)}
wypłacać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wypłacać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
wypłacać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc)}
wypłacać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wypłacić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wypłacić się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
wypłacić się: perf: subj{np(str)} + {np(dat)} + {prepnp(za,acc)}
wypłacić się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wypłukać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wypłukać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wypłukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
wypłukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wypłukać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wypłukać się: perf: subj{np(str)} + {prepnp(z,inst)}
wypłynąć: perf: subj{cp(że)} + {prepnp(z,gen)}
wypłynąć: perf: subj{np(str); ncp(str,że)} + {prepnp(z,gen); prepncp(z,gen,że)}
wypłynąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
wypłynąć: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wypłynąć: perf: subj{np(str)} + {preplexnp(na,loc,sg,'fala',natr)}
wypłynąć: perf: subj{np(str)} + {prepnp(od,gen)}
wypływać: imperf: subj{cp(że)} + {prepnp(z,gen)}
wypływać: imperf: subj{np(str); ncp(str,że)} + {prepnp(z,gen); prepncp(z,gen,że)}
wypływać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
wypływać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wypływać: imperf: subj{np(str)} + {preplexnp(na,loc,sg,'fala',natr)}
wypływać: imperf: subj{np(str)} + {prepnp(od,gen)}
wypływać się: perf: subj{np(str)}
wypogadzać: imperf: subj{np(str)} + {np(str)}
wypogadzać się: imperf: subj{np(str)}
wypominać: imperf: subj{np(str)} + {np(dat)} + {cp(jak)}
wypominać: imperf: subj{np(str)} + {np(dat)} + {or}
wypominać: imperf: subj{np(str)} + obj{cp(int)} + {np(dat)}
wypominać: imperf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
wypominać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wypominać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + {np(dat)}
wypomnieć: perf: subj{np(str)} + {np(dat)} + {or}
wypomnieć: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
wypomnieć: perf: subj{np(str)} + obj{cp(jak)} + {np(dat)}
wypomnieć: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
wypomnieć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,jak); ncp(str,że)} + {np(dat)}
wyposażać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {xp(mod)}
wyposażać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
wyposażyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wyposażyć: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
wypowiadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wypowiadać: imperf: subj{np(str)} + obj{np(str)} + {or}
wypowiadać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
wypowiadać się: imperf: subj{np(str)} + {comprepnp(na temat)}
wypowiadać się: imperf: subj{np(str)} + {comprepnp(w kwestii)}
wypowiadać się: imperf: subj{np(str)} + {comprepnp(w sprawie)}
wypowiadać się: imperf: subj{np(str)} + {cp(int)}
wypowiadać się: imperf: subj{np(str)} + {or}
wypowiadać się: imperf: subj{np(str)} + {prepnp(co do,gen)}
wypowiadać się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
wypowiadać się: imperf: subj{np(str)} + {prepnp(przeciw,dat); prepnp(za,inst); prepncp(za,inst,int); prepncp(za,inst,że); prepncp(za,inst,żeby)}
wypowiadać się: imperf: subj{np(str)} + {prepnp(przez,acc)}
wypowiadać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wypowiedzieć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wypowiedzieć: perf: subj{np(str)} + obj{np(str)} + {or}
wypowiedzieć się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
wypowiedzieć się: perf: subj{np(str)} + {comprepnp(na temat)}
wypowiedzieć się: perf: subj{np(str)} + {comprepnp(w kwestii)}
wypowiedzieć się: perf: subj{np(str)} + {comprepnp(w sprawie)}
wypowiedzieć się: perf: subj{np(str)} + {cp(int)}
wypowiedzieć się: perf: subj{np(str)} + {or}
wypowiedzieć się: perf: subj{np(str)} + {prepnp(co do,gen)}
wypowiedzieć się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
wypowiedzieć się: perf: subj{np(str)} + {prepnp(przeciw,dat); prepnp(za,inst); prepncp(za,inst,że); prepncp(za,inst,żeby)}
wypowiedzieć się: perf: subj{np(str)} + {prepnp(przez,acc)}
wypowiedzieć się: perf: subj{np(str)} + {prepnp(w,loc)}
wypożyczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(za,acc)}
wypożyczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {prepnp(za,acc)}
wypożyczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(od,gen)} + {prepnp(za,acc)}
wypożyczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)} + {prepnp(za,acc)}
wypracować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wypracować się: perf: subj{np(str)}
wypracowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wypracowywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wypracowywać się: imperf: subj{np(str)}
wypraszać: imperf: subj,controller{np(str)} + controllee{infp(imperf)} + {lexnp(dat,_,'siebie',natr)}
wypraszać: imperf: subj{np(str)} + {cp(jakoby)} + {lexnp(dat,_,'siebie',natr)}
wypraszać: imperf: subj{np(str)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)}
wypraszać: imperf: subj{np(str)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
wypraszać: imperf: subj{np(str)} + {np(inst)} + {cp(żeby)} + {xp(locat)}
wypraszać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc); prepncp(o,acc,żeby)} + {xp(locat)}
wypraszać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {cp(żeby)}
wypraszać: imperf: subj{np(str)} + {np(inst)} + {prepnp(u,gen)} + {cp(żeby)}
wypraszać: imperf: subj{np(str)} + {np(str)} + {lexnp(dat,_,'siebie',natr)}
wypraszać: imperf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(dat)} + {np(inst)} + {prepnp(u,gen)}
wypraszać: imperf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(inst)} + {prepnp(dla,gen)} + {prepnp(u,gen)}
wypraszać: imperf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(inst)} + {prepnp(od,gen)}
wypraszać: imperf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(inst)} + {xp(locat)}
wypraszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
wypraszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
wypraszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
wypraszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
wypraszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wyprawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyprawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wyprawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wyprawiać się: imperf: subj{np(str)}
wyprawiać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wyprawiać się: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wyprawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyprawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wyprawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wyprawić się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wyprawić się: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wyprodukować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyprodukować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
wyprodukować: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
wyprodukować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wypromować: perf: subj{np(str)} + {np(inst)} + {refl}
wypromować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wypromować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wypromować: perf: subj{np(str)} + {prepnp(na,acc)} + {refl}
wyprosić: perf: subj{np(str)} + {np(inst)} + {cp(żeby)} + {xp(locat)}
wyprosić: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc); prepncp(o,acc,żeby)} + {xp(locat)}
wyprosić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {cp(żeby)}
wyprosić: perf: subj{np(str)} + {np(inst)} + {prepnp(u,gen)} + {cp(żeby)}
wyprosić: perf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(dat)} + {np(inst)} + {prepnp(u,gen)}
wyprosić: perf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(inst)} + {prepnp(dla,gen)} + {prepnp(u,gen)}
wyprosić: perf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(inst)} + {prepnp(od,gen)}
wyprosić: perf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(inst)} + {xp(locat)}
wyprosić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
wyprosić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
wyprosić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
wyprosić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
wyprosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wyprostować: perf: subj{np(str)} + {cp(że)}
wyprostować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyprostować: perf: subj{np(str)} + obj{np(str)} + {or}
wyprostować się: perf: subj{np(str)} + {np(dat)}
wyprowadzać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'pole',natr)}
wyprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wyprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyprowadzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyprowadzać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wyprowadzać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)} + {xp(perl)}
wyprowadzać się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
wyprowadzać się: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
wyprowadzać się: perf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
wyprowadzać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wyprowadzić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'pole',natr)}
wyprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wyprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wyprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)} + {xp(perl)}
wyprowadzić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
wyprowadzić się: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)}
wyprowadzić się: perf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
wyprowadzić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wyprzeć: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na rzecz)} + {xp(abl)}
wyprzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wyprzeć się: perf: subj{np(str)} + {cp(jakoby)}
wyprzeć się: perf: subj{np(str)} + {cp(że)}
wyprzeć się: perf: subj{np(str)} + {cp(żeby)}
wyprzeć się: perf: subj{np(str)} + {np(gen)} + {comprepnp(na rzecz)}
wyprzeć się: perf: subj{np(str)} + {np(gen); ncp(gen,int); ncp(gen,że)} + {or}
wyprzedawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
wyprzedawać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wyprzedawać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {prepnp(za,acc)}
wyprzedzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyprzedzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
wyprzedzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
wyprzedzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyprzedzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
wyprzedzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(w,loc)}
wypuszczać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wypuszczać się: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wypuścić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wypuścić się: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wypychać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wypychać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wypychać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wypychać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wypychać się: imperf: subj{np(str)} + {np(dat)} + {xp(mod)}
wypychać się: imperf: subj{np(str)} + {np(inst)}
wyrabiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyrabiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wyrabiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyrabiać się: imperf: subj{np(str)} + {np(dat)}
wyrabiać się: imperf: subj{np(str)} + {prepnp(u,gen)}
wyrabiać się: imperf: subj{np(str)} + {prepnp(z,inst)}
wyrastać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wyrastać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wyrastać: imperf: subj{np(str)} + {prepnp(na,acc)}
wyrazić: perf: subj{np(str)} + {cp(że)}
wyrazić: perf: subj{np(str)} + obj{ncp(str,że)}
wyrazić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyrazić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc); prepncp(przez,acc,że)}
wyrazić: perf: subj{np(str)} + {or}
wyrazić się: perf: subj{np(str)} + controller{prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + controllee{xp(mod)}
wyrazić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(u,gen)}
wyrazić się: perf: subj{np(str)} + {or}
wyrazić się: perf: subj{np(str)} + {prepnp(przez,acc)}
wyrazić się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
wyrażać: imperf: subj{np(str)} + {cp(że)}
wyrażać: imperf: subj{np(str)} + obj{ncp(str,int)}
wyrażać: imperf: subj{np(str)} + obj{ncp(str,że)}
wyrażać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyrażać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
wyrażać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(w,loc,że)}
wyrażać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc); prepncp(przez,acc,int); prepncp(przez,acc,że)}
wyrażać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wyrażać się: imperf: subj{np(str)} + controller{prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + controllee{xp(mod)}
wyrażać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(u,gen)}
wyrażać się: imperf: subj{np(str)} + {prepnp(przez,acc); prepncp(przez,acc,int); prepncp(przez,acc,że)}
wyrażać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(przez,acc,int)}
wyrażać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
wyremontować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyremontować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
wyremontować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wyremontować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(dla,gen)}
wyremontować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(za,acc)}
wyremontować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(z,gen)}
wyrobić: perf: subj{np(str)} + {advp(misc)}
wyrobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyrobić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
wyrobić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wyrobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyrobić się: perf: subj{np(str)} + {advp(misc)}
wyrobić się: perf: subj{np(str)} + {np(dat)}
wyrobić się: perf: subj{np(str)} + {prepnp(u,gen)}
wyrobić się: perf: subj{np(str)} + {prepnp(w,loc)}
wyrobić się: perf: subj{np(str)} + {prepnp(z,inst)}
wyrosnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wyrosnąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
wyrosnąć: perf: subj{np(str)} + {prepnp(na,acc)}
wyrównać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
wyrównać się: perf: subj{np(str)} + {prepnp(do,gen)}
wyrównywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
wyrównywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,inst)}
wyrównywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
wyrównywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
wyróżniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyróżniać się: imperf: subj{np(str)} + {np(inst)}
wyróżniać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(spośród,gen)}
wyróżniać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wyróżnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyróżnić się: perf: subj{np(str)} + {np(inst)}
wyróżnić się: perf: subj{np(str)} + {np(inst)} + {prepnp(spośród,gen)}
wyróżnić się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wyruszać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wyruszać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
wyruszać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wyruszyć: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wyruszyć: perf: subj{np(str)} + {np(inst)} + {xp(abl)}
wyruszyć: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
wyrwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyrwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wyrwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wyrwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wyrwać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {preplexnp(z,inst,pl,'korzeń',natr)}
wyrwać: perf: subj{np(str)} + {xp(adl)}
wyrwać się: perf: subj{cp(że)} + {np(dat)}
wyrwać się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wyrwać się: perf: subj{np(str)} + {prepnp(do,gen)}
wyrwać się: perf: subj{np(str)} + {prepnp(z,inst)}
wyrwać się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wyrwać się: perf: subj{or} + {np(dat)} + {prepnp(z,gen)}
wyrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
wyrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wyrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wyrywać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {preplexnp(z,inst,pl,'korzeń',natr)}
wyrywać: imperf: subj{np(str)} + {xp(adl)}
wyrywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wyrywać się: imperf: subj{np(str)} + {prepnp(do,gen)}
wyrywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
wyrywać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wyrywać się: imperf: subj{or} + {np(dat)} + {prepnp(z,gen)}
wyrządzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
wyrzucać: imperf: {np(dat)} + {np(str)}
wyrzucać: imperf: {np(dat)} + {or}
wyrzucać: imperf: subj{np(str)} + {cp(że)} + {preplexnp(z,gen,_,'siebie',natr)}
wyrzucać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wyrzucać: imperf: subj{np(str)} + {np(dat)} + {np(str)}
wyrzucać: imperf: subj{np(str)} + {np(dat)} + {np(str); ncp(str,że)}
wyrzucać: imperf: subj{np(str)} + {np(dat)} + {or}
wyrzucać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'błoto',natr)}
wyrzucać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,_,'siebie',natr)}
wyrzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
wyrzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
wyrzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)} + {xp(abl)}
wyrzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {xp(abl)}
wyrzucać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wyrzucać: imperf: subj{np(str)} + {preplexnp(z,gen,_,'siebie',natr)} + {or}
wyrzucić: perf: {np(dat)} + {np(str)}
wyrzucić: perf: {np(dat)} + {or}
wyrzucić: perf: subj{np(str)} + {cp(int)} + {preplexnp(z,gen,_,'siebie',natr)}
wyrzucić: perf: subj{np(str)} + {cp(że)} + {preplexnp(z,gen,_,'siebie',natr)}
wyrzucić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wyrzucić: perf: subj{np(str)} + {np(dat)} + {ncp(str,że)}
wyrzucić: perf: subj{np(str)} + {np(dat)} + {np(str)}
wyrzucić: perf: subj{np(str)} + {np(dat)} + {or}
wyrzucić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,acc,sg,'błoto',natr)}
wyrzucić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,_,'siebie',natr)}
wyrzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
wyrzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
wyrzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)} + {xp(abl)}
wyrzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {xp(abl)}
wyrzucić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wyrzucić: perf: subj{np(str)} + {preplexnp(z,gen,_,'siebie',natr)} + {or}
wysiadać: imperf: subj{np(str)} + {np(dat)}
wysiadać: imperf: subj{np(str)} + {prepnp(przy,loc)}
wysiadać: imperf: subj{np(str)} + {prepnp(z,gen)} + {xp(locat)}
wysiąść: perf: subj{np(str)} + {np(dat)}
wysiąść: perf: subj{np(str)} + {prepnp(przy,loc)}
wysiąść: perf: subj{np(str)} + {prepnp(z,gen)} + {xp(locat)}
wyskakiwać: imperf: subj{cp(że)} + {np(dat)}
wyskakiwać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
wyskakiwać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {cp(że)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {cp(żeby)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(abl)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(z,gen)}
wyskakiwać: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
wyskakiwać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wyskakiwać: imperf: subj{np(str)} + {xp(abl)} + {xp(perl)}
wyskakiwać: imperf: subj{np(str)} + {xp(adl)} + {xp(perl)}
wyskakiwać: imperf: subj{or} + {np(dat)}
wyskoczyć: perf: subj{cp(że)} + {np(dat)}
wyskoczyć: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
wyskoczyć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
wyskoczyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
wyskoczyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
wyskoczyć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {cp(że)}
wyskoczyć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)} + {cp(żeby)}
wyskoczyć: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(abl)}
wyskoczyć: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
wyskoczyć: perf: subj{np(str)} + {prepnp(po,acc)} + {xp(adl)}
wyskoczyć: perf: subj{np(str)} + {prepnp(z,gen)}
wyskoczyć: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
wyskoczyć: perf: subj{np(str)} + {xp(abl)} + {xp(perl)}
wyskoczyć: perf: subj{np(str)} + {xp(adl)} + {xp(perl)}
wyskoczyć: perf: subj{or} + {np(dat)}
wysłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
wysłać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {xp(adl)}
wysławiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
wysławiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
wysławiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); cp(że); prepncp(za,acc,int); prepncp(za,acc,że)}
wysławiać się: imperf: subj{np(str)} + {np(inst)}
wysławiać się: imperf: subj{np(str)} + {prepadjp(po,postp)}
wysławiać się: imperf: subj{np(str)} + {xp(locat)}
wysłuchać: perf: subj{np(str)} + obj{cp(int)}
wysłuchać: perf: subj{np(str)} + obj{cp(jak)}
wysłuchać: perf: subj{np(str)} + obj{cp(że)}
wysłuchać: perf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,jak); ncp(gen,że)}
wysłuchać: perf: subj{np(str)} + obj{np(str)}
wysłuchiwać: imperf: subj{np(str)} + obj{cp(int)}
wysłuchiwać: imperf: subj{np(str)} + obj{cp(jak)}
wysłuchiwać: imperf: subj{np(str)} + obj{cp(że)}
wysłuchiwać: imperf: subj{np(str)} + obj{np(gen); ncp(gen,int); ncp(gen,jak); ncp(gen,że)}
wysłuchiwać: imperf: subj{np(str)} + obj{np(str)}
wysnuć: perf: subj{np(str)} + {np(inst)} + {np(str)} + {xp(abl)}
wysnuć: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {cp(że)}
wysnuć: perf: subj{np(str)} + obj{np(str); cp(int); ncp(str,że)} + {np(inst)} + {prepnp(z,gen)}
wysnuć się: perf: subj{np(str)} + {prepnp(z,gen)}
wysnuć się: perf: subj{np(str)} + {xp(abl)}
wysnuwać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {cp(int)}
wysnuwać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {cp(że)}
wysnuwać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)} + {prepnp(z,gen)}
wysnuwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
wysnuwać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wysnuwać się: imperf: subj{np(str)} + {xp(abl)}
wyspać się: perf: subj{np(str)}
wyspecjalizować się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że); prepncp(w,loc,żeby)}
wyspowiadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wyspowiadać się: perf: subj{np(str)} + {np(dat)} + {cp(int)}
wyspowiadać się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wyspowiadać się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wyspowiadać się: perf: subj{np(str)} + {or}
wyspowiadać się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
wyspowiadać się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
wyspowiadać się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wyssać: perf: subj{np(str)} + {cp(że)} + {preplexnp(z,gen,sg,'palec',natr)}
wyssać: perf: subj{np(str)} + obj{np(str)} + {fixed('z mlekiem matki')}
wyssać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wyssać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(z,gen,sg,'palec',natr)}
wystarać się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc); prepncp(o,acc,żeby)} + {prepnp(u,gen)}
wystarać się: perf: subj{np(str)} + {np(dat)} + {prepnp(u,gen)} + {cp(żeby)}
wystarczać: imperf: {np(dat)} + {np(gen)} + {prepnp(na,acc)}
wystarczać: imperf: {np(dat)} + {np(gen)} + {prepnp(za,acc)}
wystarczać: imperf: subj,controllee{np(str); cp(gdy); cp(żeby); ncp(str,że); infp(_)} + controller{np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
wystarczać: imperf: subj{cp(jeśli)} + {np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
wystarczać: imperf: subj{cp(że)} + {np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
wystarczać: imperf: subj{cp(że)} + {np(dat)} + {prepnp(za,acc)}
wystarczać: imperf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(za,acc)}
wystarczać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wystarczyć: perf: {np(dat)} + {np(gen)} + {prepnp(na,acc)}
wystarczyć: perf: {np(dat)} + {np(gen)} + {prepnp(za,acc)}
wystarczyć: perf: subj,controllee{np(str); cp(gdy); cp(żeby); ncp(str,że); infp(_)} + controller{np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
wystarczyć: perf: subj{cp(jeśli)} + {np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
wystarczyć: perf: subj{cp(że)} + {np(dat)} + {prepnp(do,gen); cp(żeby); prepncp(do,gen,żeby)}
wystarczyć: perf: subj{cp(że)} + {np(dat)} + {prepnp(za,acc)}
wystarczyć: perf: subj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(za,acc)}
wystarczyć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wystartować: perf: subj{np(str)} + {prepnp(do,gen)}
wystartować: perf: subj{np(str)} + {prepnp(w,loc)}
wystartować: perf: subj{np(str)} + {xp(abl)}
wystawać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
wystawać: imperf: subj{np(str)} + {xp(adl)}
wystawać: imperf: subj{np(str)} + {xp(locat)}
wystawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wystawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wystawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wystawiać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wystawiać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wystawiać: imperf: subj{np(str)} + {prepnp(na,acc)} + {refl}
wystawiać się: imperf: subj{np(str)} + {xp(locat)}
wystawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wystawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wystawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wystawić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wystawić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wystawić: perf: subj{np(str)} + {prepnp(na,acc)} + {refl}
wystawić się: perf: subj{np(str)} + {xp(locat)}
wystąpić: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
wystąpić: perf: subj{ncp(str,że)} + {prepnp(u,gen)}
wystąpić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wystąpić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
wystąpić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(przeciw,dat)}
wystąpić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
wystąpić: perf: subj{np(str)} + {prepnp(na,loc)}
wystąpić: perf: subj{np(str)} + {prepnp(przed,inst)}
wystąpić: perf: subj{np(str)} + {prepnp(u,gen)}
wystąpić: perf: subj{np(str)} + {prepnp(w,loc)}
wystąpić: perf: subj{np(str)} + {prepnp(z,gen)}
występować: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
występować: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
występować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
występować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(przeciw,dat)}
występować: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
występować: imperf: subj{np(str)} + {prepnp(na,loc)}
występować: imperf: subj{np(str)} + {prepnp(przed,inst)}
występować: imperf: subj{np(str)} + {prepnp(u,gen)}
występować: imperf: subj{np(str)} + {prepnp(w,loc)}
występować: imperf: subj{np(str)} + {prepnp(z,gen)}
występować: imperf: subj{np(str)} + {xp(locat)}
wystosować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
wystosowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
wystraszyć: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {xp(abl)}
wystraszyć się: perf: subj{np(str)} + {cp(że)}
wystraszyć się: perf: subj{np(str)} + {np(gen); ncp(gen,że)}
wystraszyć się: perf: subj{np(str)} + {np(inst)}
wystraszyć się: perf: subj{np(str)} + {or}
wystraszyć się: perf: subj{np(str)} + {prepnp(o,acc)}
wystroić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wystroić: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
wystrzegać się: imperf: subj{np(str)} + {np(gen); ncp(gen,żeby)}
wystrzelać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(co do,gen)}
wystrzelać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
wystrzelać: imperf: subj{np(str)} + {or}
wystrzelać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wystrzelać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wystrzelić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,gen)}
wystrzelić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wystrzelić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wystrzelić: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
wystrzelić: perf: subj{np(str)} + {prepnp(z,inst)}
wystukać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wystukać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
wystukać: perf: subj{np(str)} + obj{np(str)} + {or}
wystukiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wystukiwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
wystukiwać: imperf: subj{np(str)} + obj{np(str)} + {or}
wysunąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wysunąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wysunąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wysunąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wysunąć się: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
wysupłać: perf: subj{np(str)} + obj{np(part)} + {prepnp(na,acc)} + {xp(abl)}
wysupłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {xp(abl)}
wysupłać się: perf: subj{np(str)} + {xp(abl)}
wysuszyć: perf: subj{np(str)} + {np(inst)} + {refl}
wysuszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wysuszyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
wysuszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wysuszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wysuszyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
wysuszyć się: perf: subj{np(str)} + {prepnp(na,acc)}
wysuszyć się: perf: subj{np(str)} + {xp(locat)}
wysuwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wysuwać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wysuwać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wysuwać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wysuwać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
wysyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wysyłać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wysyłać: imperf: subj{np(str)} + obj{np(str)} + {or}
wysyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wysyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wysyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)}
wysyłać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wysypać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wysypać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wysypać się: perf: subj{np(str)} + {cp(że)}
wysypać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wysypać się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
wysypywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wysypywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wysypywać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wysypywać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
wysysać: imperf: subj{np(str)} + obj{np(str)} + {fixed('z mlekiem matki')}
wysysać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wysysać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(z,gen,sg,'palec',natr)}
wyszarpnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wyszarpnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wyszarpnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
wyszarpnąć się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wyszarpnąć się: perf: subj{np(str)} + {np(inst)} + {xp(abl)}
wyszeptać: perf: subj{np(str)} + {np(dat)} + {cp(int)} + {preplexnp(do,gen,sg,'ucho',ratr)}
wyszeptać: perf: subj{np(str)} + {np(dat)} + {cp(int)} + {preplexnp(na,acc,sg,'ucho',ratr)}
wyszeptać: perf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {preplexnp(do,gen,sg,'ucho',ratr)}
wyszeptać: perf: subj{np(str)} + {np(dat)} + {cp(żeby)} + {preplexnp(na,acc,sg,'ucho',ratr)}
wyszeptać: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(do,gen,sg,'ucho',ratr)}
wyszeptać: perf: subj{np(str)} + {np(dat)} + {cp(że)} + {preplexnp(na,acc,sg,'ucho',ratr)}
wyszeptać: perf: subj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',natr)} + {or}
wyszeptać: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'ucho',ratr)} + {or}
wyszeptać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(do,gen,sg,'ucho',ratr)}
wyszeptać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'ucho',ratr)}
wyszeptać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wyszeptać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
wyszeptać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wyszeptać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
wyszeptać: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
wyszukać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
wyszukać: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
wyszukiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
wyszukiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {xp(locat)}
wyszydzać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
wyszydzać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
wyszydzać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
wyszydzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wyśmiać: perf: subj{np(str)} + obj{np(str); ncp(str,że)}
wyśmiać się: perf: subj{np(str)}
wyśmiewać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)}
wyśmiewać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wyświetlać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyświetlać się: imperf: subj{np(str)} + {xp(locat)}
wyświetlić: imperf: subj{np(str)} + obj{cp(int)}
wyświetlić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyświetlić się: imperf: subj{np(str)} + {xp(locat)}
wytaczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wytaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wytaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
wytaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wytaczać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wytaczać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wytężać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
wytężać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wytężać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wytężać się: perf: subj{np(str)} + {cp(żeby)}
wytężać się: perf: subj{np(str)} + {prepnp(na,loc)}
wytężać się: perf: subj{np(str)} + {xp(adl)}
wytężyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wytężyć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wytężyć się: perf: subj{np(str)} + {prepnp(na,acc)}
wytężyć się: perf: subj{np(str)} + {xp(adl)}
wytknąć: perf: subj{np(str)} + obj{np(str)} + {cp(że)} + {lexnp(inst,_,'palec',natr)}
wytknąć: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
wytknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {lexnp(inst,_,'palec',natr)}
wytknąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wytłumaczyć: perf: subj{np(str)} + {np(dat)} + {or}
wytłumaczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wytłumaczyć: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); cp(żeby); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
wytłumaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
wytłumaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wytłumaczyć się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wytłumaczyć się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
wytłumaczyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wytłumaczyć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)}
wytłumaczyć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
wytłumaczyć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {or}
wytłumaczyć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wytoczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wytoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wytoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
wytoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wytoczyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wytoczyć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wytrącać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(z,gen)}
wytrącać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wytrącać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(z,gen)}
wytrącać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wytrącić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(z,gen)}
wytrącić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
wytrącić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(z,gen)}
wytrącić się: perf: subj{np(str)} + {prepnp(z,gen)}
wytrzeć: perf: subj{np(str)} + {np(inst)} + {refl}
wytrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wytrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
wytrzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wytrzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
wytrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wytrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {prepnp(z,gen)}
wytrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wytrzeć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wytrzeć: perf: subj{np(str)} + {prepnp(o,acc)} + {refl}
wytrzeć: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
wytrzeć: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wytrzeć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
wytrzeć się: perf: subj{np(str)} + {prepnp(od,gen)}
wytrzeszczyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
wytrzeszczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wytrzeszczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wytrzeszczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wytrzeszczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wytrzeszczyć: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
wytrzeszczyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
wytrzymać: perf: subj{np(str)} + {np(str); ncp(str,int); ncp(str,że)}
wytrzymać: perf: subj{np(str)} + {np(str)} + {xp(dur)}
wytrzymać: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(dur)}
wytrzymywać: imperf: subj{np(str)} + {np(str); ncp(str,int); ncp(str,że)}
wytrzymywać: imperf: subj{np(str)} + {np(str)} + {xp(dur)}
wytrzymywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(dur)}
wytwarzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wytwarzać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wytworzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wytworzyć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
wytworzyć się: perf: subj{np(str)} + {prepnp(z,gen)}
wytyczać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wytyczać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(dla,gen)}
wytyczać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
wytyczać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
wytyczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wytykać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)} + {lexnp(inst,_,'palec',natr)}
wytykać: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
wytykać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)} + {lexnp(inst,_,'palec',natr)}
wytykać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wytypować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
wytypować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wytypować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wytypować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wywabić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)} + {xp(abl)} + {xp(adl)}
wywabić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)}
wywabić: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)} + {xp(abl)} + {xp(adl)}
wywabić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
wywalczyć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wywalczyć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
wywalczyć: perf: subj{np(str)} + obj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {np(inst); ncp(inst,że)}
wywalczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
wywalczyć: perf: subj{np(str)} + {prepnp(dla,gen)} + {cp(żeby)}
wywalić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wywalić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)} + {xp(abl)} + {xp(adl)}
wywalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wywalić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,_,'siebie',natr)}
wywalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wywalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
wywalić się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
wywalić się: perf: subj{np(str)} + {prepnp(na,acc)}
wywalić się: perf: subj{np(str)} + {xp(locat)}
wyważyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyważyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wyważyć: perf: subj{np(str)} + obj{np(str)} + {xp(mod)}
wywiązać się: perf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wywiązywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wywierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wywierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wywieść: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,acc,pl,'manowiec',natr)}
wywieść: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,pl,'taczka',natr)}
wywieść: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wywieźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
wywieźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
wywieźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wywlec: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wywlec: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wywlec się: perf: subj{np(str)} + {prepnp(z,gen)}
wywlec się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wywlekać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
wywlekać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wywlekać się: imperf: subj{np(str)} + {prepnp(z,gen)}
wywlekać się: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
wywnioskować: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
wywnioskować: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wywnioskować: perf: subj{np(str)} + {or}
wywnioskować: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)}
wywnioskować: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
wywnioskować: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {advp(pron)}
wywnioskować: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(int)}
wywnioskować: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(że)}
wywnioskować: perf: subj{np(str)} + {prepnp(po,loc); prepncp(po,loc,int); prepncp(po,loc,że)} + {cp(żeby2)}
wywnioskować: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)} + {advp(pron)}
wywnioskować: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)} + {cp(int)}
wywnioskować: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)} + {cp(że)}
wywnioskować: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)} + {cp(żeby2)}
wywodzić: imperf: subj{np(str)} + {cp(że)}
wywodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wywodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wywodzić: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wywodzić: imperf: subj{np(str)} + {or}
wywodzić się: imperf: subj{np(str)} + {prepnp(od,gen)}
wywodzić się: imperf: subj{np(str)} + {prepnp(z,gen)}
wywołać: perf: subj{ncp(str,int)} + obj{np(str)}
wywołać: perf: subj{ncp(str,że)} + {np(str)} + {prepnp(wśród,gen)}
wywołać: perf: subj{np(str); ncp(str,że)} + {np(str)} + {prepnp(w,loc)}
wywołać: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(u,gen)}
wywołać: perf: subj{np(str)} + {np(str)} + {prepnp(wśród,gen)}
wywołać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wywołać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wywołać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
wywołać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wywołać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wywoływać: imperf: subj{np(str); ncp(str,że)} + {np(str)} + {prepnp(w,loc)}
wywoływać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {prepnp(u,gen)}
wywoływać: imperf: subj{np(str)} + {np(str)} + {prepnp(wśród,gen)}
wywoływać: imperf: subj{np(str)} + obj{ncp(str,że)}
wywoływać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wywoływać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wywoływać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
wywoływać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
wywoływać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wywozić: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,pl,'taczka',natr)}
wywozić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wywracać: imperf: subj{np(str)} + {lexnp(inst,pl,'oko',atr)}
wywracać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {lexnp(inst,pl,'noga',natr)} + {preplexnp(do,gen,sg,'góra',natr)}
wywracać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wywracać się: imperf: subj{np(str)} + {np(dat)}
wywrócić: perf: subj{np(str)} + {lexnp(inst,pl,'oko',atr)}
wywrócić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
wywrócić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {preplexnp(do,gen,sg,'góra',natr)}
wywrócić się: perf: subj{np(str)} + {np(dat)}
wywrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wywrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wywyższać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wywyższać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,acc)}
wywyższać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
wywyższać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(ponad,acc)}
wywyższać się: imperf: subj{np(str)} + {np(inst)}
wywyższać się: imperf: subj{np(str)} + {prepnp(nad,acc)}
wywyższać się: imperf: subj{np(str)} + {prepnp(nad,inst)}
wywyższać się: imperf: subj{np(str)} + {prepnp(ponad,acc)}
wyzbyć się: perf: subj{np(str)} + {np(gen)}
wyzbywać się: imperf: subj{np(str)} + {np(gen)}
wyzdrowieć: perf: subj{np(str)} + {prepnp(po,loc)}
wyzdrowieć: perf: subj{np(str)} + {prepnp(z,gen)}
wyzierać: imperf: {np(part)} + {xp(abl)}
wyzierać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
wyzierać: imperf: subj{np(str)} + {prepnp(na,loc)}
wyzierać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wyznaczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wyznaczać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(na,acc)}
wyznaczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyznaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyznaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
wyznaczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
wyznaczyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(na,acc)}
wyznaczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
wyznaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyznaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
wyznać: perf: subj{np(str)} + {np(dat)} + {cp(int)}
wyznać: perf: subj{np(str)} + {np(dat)} + {cp(że)}
wyznać: perf: subj{np(str)} + {np(dat)} + {or}
wyznać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
wyznać się: perf: subj{np(str)} + {or}
wyznać się: perf: subj{np(str)} + {prepnp(na,loc)}
wyznać się: perf: subj{np(str)} + {prepnp(w,loc)}
wyznawać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
wyznawać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
wyznawać: imperf: subj{np(str)} + {np(dat)} + {or}
wyznawać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
wyznawać się: imperf: subj{np(str)} + {or}
wyznawać się: imperf: subj{np(str)} + {prepnp(na,loc)}
wyznawać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wyzwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyzwać: perf: subj{np(str)} + obj{np(str)} + {or}
wyzwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wyzwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wyzwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyzwalać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
wyzwalać: imperf: subj{np(str)} + {np(inst)} + {prepnp(spod,gen)} + {refl}
wyzwalać: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
wyzwalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
wyzwalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(spod,gen)}
wyzwalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wyzwalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wyzwalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wyzwalać się: imperf: subj{np(str)} + {prepnp(na,acc)}
wyzwalać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wyzwolić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
wyzwolić: perf: subj{np(str)} + {np(inst)} + {prepnp(spod,gen)} + {refl}
wyzwolić: perf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)} + {refl}
wyzwolić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
wyzwolić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(spod,gen)}
wyzwolić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wyzwolić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
wyzwolić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wyzwolić się: perf: subj{np(str)} + {prepnp(na,acc)}
wyzwolić się: perf: subj{np(str)} + {prepnp(w,loc)}
wyzywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wyzywać: imperf: subj{np(str)} + obj{np(str)} + {or}
wyzywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wyzywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wyzywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wyżalić się: perf: subj{np(str)} + {np(dat)} + {cp(int)}
wyżalić się: perf: subj{np(str)} + {np(dat)} + {or}
wyżalić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
wyżalić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
wyżalić się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {prepnp(przed,inst)}
wyżalić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)} + {cp(że)}
wyżalić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(int)}
wyżalić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {or}
wyżyć: perf: subj{np(str)} + {prepnp(na,loc)}
wyżyć: perf: subj{np(str)} + {prepnp(za,acc)}
wyżyć: perf: subj{np(str)} + {prepnp(z,gen)}
wyżyć: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
wyżyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {cp(że)}
wyżyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wyżyć się: perf: subj{np(str)} + {prepnp(w,loc)}
wyżywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {cp(że)}
wyżywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
wyżywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wyżywić: perf: subj{np(str)} + {np(inst)} + {refl}
wyżywić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wyżywić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
wyżywić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
wyżywić: perf: subj{np(str)} + {prepnp(na,loc)} + {refl}
wyżywić: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
wzbić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
wzbić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
wzbić się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
wzbić się: perf: subj{np(str)} + {xp(locat)}
wzbierać: imperf: subj{np(str)} + {advp(misc)}
wzbierać: imperf: subj{np(str)} + {prepnp(nad,inst)}
wzbierać: imperf: subj{np(str)} + {prepnp(na,loc)}
wzbierać: imperf: subj{np(str)} + {prepnp(od,gen)}
wzbierać: imperf: subj{np(str)} + {xp(locat)} + {xp(mod)}
wzbijać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wzbijać się: imperf: subj{np(str)} + {np(inst)} + {xp(adl)} + {xp(mod)}
wzbijać się: imperf: subj{np(str)} + {prepnp(od,gen)}
wzbijać się: imperf: subj{np(str)} + {prepnp(ponad,acc)}
wzbogacać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wzbogacać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
wzbogacać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wzbogacać się: imperf: subj{np(str)} + {np(inst)}
wzbogacać się: imperf: subj{np(str)} + {prepnp(na,acc)}
wzbogacać się: imperf: subj{np(str)} + {prepnp(o,acc)}
wzbogacać się: imperf: subj{np(str)} + {prepnp(w,acc)}
wzbogacić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
wzbogacić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
wzbogacić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wzbogacić się: perf: subj{np(str)} + {np(inst)}
wzbogacić się: perf: subj{np(str)} + {prepnp(na,loc)}
wzbogacić się: perf: subj{np(str)} + {prepnp(o,acc)}
wzbogacić się: perf: subj{np(str)} + {prepnp(w,acc)}
wzbudzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
wzbudzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wzbudzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
wzbudzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
wzburzyć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
wzburzyć się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
wzburzyć się: perf: subj{np(str)} + {or}
wzdychać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
wzdychać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
wzdychać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
wzdychać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,int); prepncp(do,gen,żeby)}
wzdychać: imperf: subj{np(str)} + {prepnp(na,acc)}
wzdychać: imperf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,int); prepncp(za,inst,żeby)}
wzdychać: imperf: subj{np(str)} + {prepnp(z,gen)}
wzejść: perf: subj{np(str)} + {np(dat)}
wzejść: perf: subj{np(str)} + {prepnp(dla,gen)}
wzejść: perf: subj{np(str)} + {prepnp(nad,inst)}
wzejść: perf: subj{np(str)} + {prepnp(na,loc)}
wzejść: perf: subj{np(str)} + {prepnp(od,gen)}
wzejść: perf: subj{np(str)} + {prepnp(z,gen)}
wzejść: perf: subj{np(str)} + {xp(mod)}
wziąć: perf: {np(str)} + {prepnp(na,acc)}
wziąć: perf: subj{np(str)} + {cp(że)} + {preplexnp(do,gen,_,'siebie',natr)}
wziąć: perf: subj{np(str)} + {lexnp(part,sg,'woda',natr)} + {preplexnp(w,acc,pl,'usta',natr)}
wziąć: perf: subj{np(str)} + {ncp(str,że)} + {preplexnp(do,gen,_,'siebie',natr)}
wziąć: perf: subj{np(str)} + {ncp(str,że)} + {preplexnp(na,acc,_,'siebie',natr)}
wziąć: perf: subj{np(str)} + {np(str)}
wziąć: perf: subj{np(str)} + {np(str); ncp(str,że); ncp(str,żeby)} + {prepnp(do,gen)} + {lexnp(dat,_,'siebie',natr)}
wziąć: perf: subj{np(str)} + {np(str)} + {preplexnp(do,gen,_,'siebie',natr)}
wziąć: perf: subj{np(str)} + {np(str)} + {preplexnp(na,acc,_,'siebie',natr)}
wziąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(za,acc)}
wziąć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(za,acc)}
wziąć: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {xp(abl)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {advp(misc)}
wziąć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że); ncp(str,żeby)} + {preplexnp(pod,acc,sg,'uwaga',atr)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
wziąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wziąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)}
wziąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)} + {lexnp(dat,_,'siebie',natr)}
wziąć: perf: subj{np(str)} + {prepnp(nad,inst)} + {lexnp(str,sg,'góra',natr)}
wziąć: perf: subj{np(str)} + {prepnp(od,gen)} + {preplexnp(w,acc,sg,'łapa',natr)}
wziąć: perf: subj{np(str)} + {prepnp(od,gen)} + {preplexnp(w,acc,sg,'skóra',natr)}
wziąć: perf: subj{np(str)} + {prepnp(za,acc)} + {refl}
wziąć: perf: subj{np(str)} + {prepnp(z,inst)} + {lexnp(str,sg,'ślub',atr)}
wziąć się: perf: subj{np(str)} + {preplexnp(w,acc,pl,'karb',natr)}
wziąć się: perf: subj{np(str)} + {preplexnp(w,acc,pl,'ryza',natr)}
wziąć się: perf: subj{np(str)} + {preplexnp(w,acc,sg,'garść',natr)}
wziąć się: perf: subj{np(str)} + {prepnp(do,gen)}
wziąć się: perf: subj{np(str)} + {prepnp(na,acc)}
wziąć się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
wziąć się: perf: subj{np(str)} + {prepnp(za,acc)}
wziąć się: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
wziąć się: perf: subj{np(str)} + {xp(abl)}
wzmacniać: imperf: subj{np(str)} + {np(inst)} + {refl}
wzmacniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wzmacniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
wzmacniać: imperf: subj{np(str)} + {prepnp(o,acc)} + {refl}
wzmagać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(u,gen)}
wzmagać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(w,loc)}
wzmagać się: imperf: subj{np(str)} + {prepnp(u,gen)}
wzmagać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wzmocnić: perf: subj{np(str)} + {np(inst)} + {refl}
wzmocnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
wzmocnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
wzmocnić: perf: subj{np(str)} + {prepnp(o,acc)} + {refl}
wzmóc: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(u,gen)}
wzmóc: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(w,loc)}
wzmóc się: perf: subj{np(str)} + {prepnp(u,gen)}
wzmóc się: perf: subj{np(str)} + {prepnp(w,loc)}
wznawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wzniecać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
wzniecać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wzniecać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(wśród,gen)}
wzniecać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
wzniecać się: imperf: subj{np(str)} + {prepnp(w,loc)}
wzniecać się: imperf: subj{np(str)} + {xp(locat)}
wzniecić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
wzniecić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
wzniecić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(wśród,gen)}
wzniecić się: perf: subj{np(str)}
wznieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wznieść się: perf: subj{np(str)} + {np(inst)} + {xp(adl)}
wznieść się: perf: subj{np(str)} + {prepnp(na,acc)}
wznieść się: perf: subj{np(str)} + {prepnp(ponad,acc)}
wznosić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
wznosić się: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
wznosić się: imperf: subj{np(str)} + {prepnp(na,acc)}
wznosić się: imperf: subj{np(str)} + {prepnp(ponad,acc)}
wznosić się: imperf: subj{np(str)} + {xp(locat)}
wznowić: perf: subj{np(str)} + obj{np(str)}
wzorować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int)}
wzorować się: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int)}
wzrastać: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
wzrastać: imperf: subj{np(str)} + {prepnp(w,acc)}
wzrastać: imperf: subj{np(str)} + {prepnp(w,loc)}
wzrosnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
wzrosnąć: perf: subj{np(str)} + {prepnp(w,acc)}
wzrosnąć: perf: subj{np(str)} + {prepnp(w,loc)}
wzruszać: imperf: subj{cp(że); ncp(str,że)} + obj{np(str)}
wzruszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
wzruszać: imperf: subj{np(str)} + {prepnp(nad,inst)} + {lexnp(inst,pl,'ramię',natr)}
wzruszać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
wzruszać się: imperf: subj{np(str)} + {or}
wzruszać się: imperf: subj{np(str)} + {prepnp(nad,inst)}
wzruszyć: perf: subj{cp(że); ncp(str,że)} + {np(str)}
wzruszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
wzruszyć: perf: subj{np(str)} + {prepnp(nad,inst)} + {lexnp(inst,pl,'ramię',atr)}
wzruszyć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
wzruszyć się: perf: subj{np(str)} + {or}
wzruszyć się: perf: subj{np(str)} + {prepnp(nad,inst)}
wzywać: imperf: subj{np(str)} + {np(gen)}
wzywać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
wzywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
wzywać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(do,gen,żeby)}
wzywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaakceptować: perf: subj{np(str)} + {cp(int); ncp(str,int)}
zaakceptować: perf: subj{np(str)} + {cp(że); ncp(str,że)}
zaakceptować: perf: subj{np(str)} + obj{np(str)}
zaangażować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaangażować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zaangażować się: perf: subj{np(str)} + {prepnp(do,gen)}
zaangażować się: perf: subj{np(str)} + {prepnp(w,acc)}
zaangażować się: perf: subj{np(str)} + {prepnp(w,loc)}
zaatakować: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zaatakować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
zaatakować: perf: subj{np(str)} + obj{np(str)} + {or}
zabawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zabawić: perf: subj{np(str)} + {xp(dur)} + {xp(locat)}
zabawić się: perf: subj{np(str)} + {np(inst)}
zabawić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zabezpieczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zabezpieczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
zabezpieczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
zabezpieczać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
zabezpieczać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
zabezpieczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zabezpieczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
zabezpieczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
zabezpieczyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
zabezpieczyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
zabić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
zabić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zabić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zabić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zabić: perf: subj{np(str)} + {refl}
zabiegać: imperf: subj{np(str)} + {prepncp(o,acc,żeby)}
zabiegać: imperf: subj{np(str)} + {prepnp(o,acc)}
zabierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zabierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zabierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zabierać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zabierać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zabierać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zabierać się: imperf: subj{np(str)} + {prepnp(za,acc)}
zabierać się: imperf: subj{np(str)} + {xp(adl)}
zabijać: imperf: subj{np(str)} + {np(inst)} + {refl}
zabijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zabijać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zabijać: imperf: subj{np(str)} + obj{np(str)} + {xp(mod)}
zabijać się: imperf: subj{np(str)} + {prepnp(o,acc)}
zablokować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zablokować się: perf: subj{np(str)} + {prepnp(przy,loc)}
zabłądzić: perf: subj{np(str)} + {xp(adl)}
zabłądzić: perf: subj{np(str)} + {xp(locat)}
zabrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zabrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zabrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zabrać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zabrać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zabrać się: perf: subj{np(str)} + {prepnp(do,gen)}
zabrać się: perf: subj{np(str)} + {prepnp(za,acc)}
zabrać się: perf: subj{np(str)} + {xp(adl)}
zabraknąć: perf: {np(dat)} + {np(gen)} + {cp(żeby)}
zabraknąć: perf: {np(dat)} + {np(gen)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zabraknąć: perf: {np(dat)} + {prepnp(dla,gen)} + {lexnp(gen,pl,'słowo',atr)}
zabraknąć: perf: {np(dat)} + {prepnp(na,acc)} + {lexnp(gen,pl,'słowo',atr)}
zabraknąć: perf: {np(gen)} + {xp(locat)}
zabraniać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
zabraniać: imperf: subj{np(str)} + {np(dat)} + {ncp(gen,żeby)}
zabraniać: imperf: subj{np(str)} + obj,controllee{np(gen); infp(_)} + controller{np(dat)}
zabrnąć: perf: subj{np(str)} + {prepnp(w,acc)}
zabrnąć: perf: subj{np(str)} + {xp(adl)}
zabronić: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
zabronić: perf: subj{np(str)} + {np(dat)} + {ncp(gen,żeby)}
zabronić: perf: subj{np(str)} + obj,controllee{np(gen); infp(_)} + controller{np(dat)}
zabrzmieć: perf: subj,controller{np(str)} + controllee{or}
zabrzmieć: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {preplexnp(w,loc,pl,'usta',ratr)}
zabrzmieć: perf: subj,controller{np(str)} + controllee{xp(mod)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',ratr)}
zabrzmieć: perf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(dla,gen)}
zabrzmieć: perf: subj,controller{np(str); ncp(str,że)} + controllee{xp(mod)} + {np(dat)} + {preplexnp(w,loc,pl,'ucho',ratr)}
zabrzmieć: perf: subj,controller{or} + controllee{xp(mod)} + {np(dat)} + {preplexnp(w,loc,pl,'ucho',ratr)}
zabrzmieć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {preplexnp(w,loc,pl,'ucho',ratr)}
zabrzmieć: perf: subj{np(str)} + {prepnp(w,loc)}
zaburzyć: perf: subj{np(str); ncp(inst,int); ncp(str,że)} + obj{np(str)} + {np(dat)}
zaburzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zaburzyć się: perf: subj{np(str)} + {np(dat)}
zachcieć: perf: controller{np(str)} + controllee{infp(_)}
zachcieć: perf: subj{np(str)} + {cp(żeby)}
zachcieć: perf: subj{np(str)} + {np(gen)}
zachcieć: perf: subj{np(str)} + {xp(adl)}
zachcieć się: imperf: controller{np(dat)} + controllee{infp(_)}
zachcieć się: imperf: {np(dat)} + {cp(żeby)}
zachcieć się: imperf: {np(dat)} + {np(gen)}
zachcieć się: imperf: {np(dat)} + {xp(adl)}
zachęcać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
zachęcać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zachęcać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zachęcić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
zachęcić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zachęcić się: perf: subj{np(str)} + {prepnp(do,gen)}
zachłysnąć się: perf: subj{np(str)} + {np(inst)}
zachłysnąć się: perf: subj{np(str)} + {prepnp(z,gen)}
zachłystywać się: imperf: subj{np(str)} + {np(inst)}
zachłystywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
zachodzić: imperf: subj{np(str)} + {cp(int)} + {preplexnp(w,acc,sg,'głowa',natr)}
zachodzić: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
zachodzić: imperf: subj{np(str)} + {np(dat)} + {np(str)}
zachodzić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zachodzić: imperf: subj{np(str)} + {preplexnp(w,acc,sg,'głowa',natr)} + {or}
zachodzić: imperf: subj{np(str)} + {prepnp(na,acc)}
zachodzić: imperf: subj{np(str)} + {prepnp(w,acc)}
zachodzić: imperf: subj{np(str)} + {xp(adl)}
zachodzić: imperf: subj{np(str)} + {xp(locat)}
zachorować: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(od,gen)}
zachorować: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
zachować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zachować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zachować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zachować się: perf: subj,controller{np(str)} + controllee{xp(mod)}
zachować się: perf: subj{np(str)} + {prepnp(na,loc)}
zachować się: perf: subj{np(str)} + {prepnp(przy,loc)}
zachować się: perf: subj{np(str)} + {prepnp(w,loc)}
zachowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zachowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zachowywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zachowywać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
zachowywać się: imperf: subj{np(str)} + {prepnp(przed,inst)}
zachwalać: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)} + {refl}
zachwalać: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)} + {refl}
zachwalać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
zachwalać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
zachwalać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
zachwalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {cp(że)}
zachwalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
zachwalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
zachwiać: perf: subj{np(str)} + obj{np(inst)}
zachwiać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zachwiać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zachwiać się: perf: subj{np(str)} + {prepnp(w,loc)}
zachwycać: imperf: subj{cp(int)} + {np(str)}
zachwycać: imperf: subj{cp(jak)} + {np(str)}
zachwycać: imperf: subj{cp(kiedy)} + {np(str)}
zachwycać: imperf: subj{cp(że)} + {np(str)}
zachwycać: imperf: subj{ncp(str,int)} + {np(str)}
zachwycać: imperf: subj{ncp(str,że)} + {np(str)}
zachwycać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zachwycać się: imperf: subj{np(str)} + {cp(gdy)}
zachwycać się: imperf: subj{np(str)} + {cp(jak)}
zachwycać się: imperf: subj{np(str)} + {cp(jeśli)}
zachwycać się: imperf: subj{np(str)} + {cp(że)}
zachwycać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zachwycać się: imperf: subj{np(str)} + {or}
zachwycać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)}
zachwycić: perf: subj{cp(int)} + {np(str)}
zachwycić: perf: subj{cp(jak)} + {np(str)}
zachwycić: perf: subj{cp(kiedy)} + {np(str)}
zachwycić: perf: subj{cp(że)} + {np(str)}
zachwycić: perf: subj{ncp(str,int)} + {np(str)}
zachwycić: perf: subj{ncp(str,że)} + {np(str)}
zachwycić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zachwycić się: perf: subj{np(str)} + {cp(gdy)}
zachwycić się: perf: subj{np(str)} + {cp(jak)}
zachwycić się: perf: subj{np(str)} + {cp(jeśli)}
zachwycić się: perf: subj{np(str)} + {cp(że)}
zachwycić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zachwycić się: perf: subj{np(str)} + {or}
zachwycić się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)}
zaciąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
zaciąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zaciąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
zaciąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zaciąć się: perf: subj{np(str)} + {cp(że)}
zaciąć się: perf: subj{np(str)} + {cp(żeby)}
zaciąć się: perf: subj{np(str)} + {np(dat)}
zaciąć się: perf: subj{np(str)} + {prepnp(na,loc)}
zaciąć się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
zaciągać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaciągać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zaciągać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zaciągać: imperf: subj{np(str)} + {or}
zaciągać się: imperf: subj{np(str)} + {np(inst)}
zaciągać się: imperf: subj{np(str)} + {xp(adl)}
zaciągnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zaciągnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zaciągnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zaciągnąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zaciągnąć się: perf: subj{np(str)} + {np(inst)}
zaciągnąć się: perf: subj{np(str)} + {prepnp(do,gen)}
zaciągnąć się: perf: subj{np(str)} + {prepnp(na,acc)}
zaciążyć: perf: subj{np(str); ncp(str,że)} + {prepnp(nad,inst); prepncp(nad,inst,że)}
zaciążyć: perf: subj{np(str); ncp(str,że)} + {prepnp(na,loc); prepncp(na,loc,że)}
zaciążyć: perf: subj{np(str)} + {np(dat)} + {np(inst)}
zaciążyć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zaciążyć: perf: subj{np(str)} + {prepnp(z,inst)}
zaciekawić: perf: subj{cp(int)} + {np(str)}
zaciekawić: perf: subj{cp(że)} + {np(str)}
zaciekawić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zaciekawić się: perf: subj{np(str)} + {cp(int)}
zaciekawić się: perf: subj{np(str)} + {cp(że)}
zaciekawić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zaciekawić się: perf: subj{np(str)} + {or}
zaciemniać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {np(inst)}
zaciemniać się: imperf: subj{np(str)} + {np(dat)}
zacierać: imperf: subj{np(str); ncp(str,że)} + obj{np(str); ncp(str,że)} + {np(inst)}
zacierać: imperf: subj{np(str)} + {prepnp(do,gen)} + {lexnp(str,pl,'ręka',natr)}
zacierać: imperf: subj{np(str)} + {prepnp(na,acc)} + {lexnp(str,pl,'ręka',natr)}
zacierać się: imperf: subj{np(str); ncp(str,że)} + {np(dat)}
zacieśnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zacieśnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
zacieśnić się: perf: subj{np(str)} + {prepnp(do,gen)}
zacieśnić się: perf: subj{np(str)} + {prepnp(wokół,gen)}
zacinać: imperf: {np(inst)} + {xp(abl)} + {xp(adl)}
zacinać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
zacinać: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
zacinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zacinać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
zacinać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zacinać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
zacinać się: imperf: subj{np(str)} + {np(dat)}
zacinać się: imperf: subj{np(str)} + {prepnp(na,loc)}
zacinać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
zaciskać: imperf: subj{np(str)} + {lexnp(gen,sg,'pas',natr)}
zaciskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zaciskać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(wokół,gen)}
zaciskać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaciskać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zaciskać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zaciskać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(wokół,gen)}
zaciskać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zacisnąć: perf: subj{np(str)} + {lexnp(gen,sg,'pas',natr)}
zacisnąć: perf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
zacisnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc); prepnp(wokół,gen)}
zacisnąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc); prepnp(wokół,gen)}
zacisnąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zacytować: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)} + {or}
zacytować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zaczaić: perf: subj{np(str)} + {cp(int)}
zaczaić: perf: subj{np(str)} + {cp(że)}
zaczaić: perf: subj{np(str)} + {np(str); ncp(str,że)}
zaczaić się: perf: subj{np(str)} + {prepnp(do,gen)}
zaczaić się: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(locat)}
zaczaić się: perf: subj{np(str)} + {prepnp(w,loc)}
zacząć: perf: subj,controller{E} + controllee{infp(imperf)}
zacząć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
zacząć się: perf: {prepnp(od,gen); prepncp(od,gen,że)}
zacząć się: perf: subj{np(str)} + {np(inst)}
zacząć się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
zacząć się: perf: subj{np(str)} + {xp(locat)}
zacząć się: perf: subj{np(str)} + {xp(temp)}
zaczekać: perf: subj{np(str)} + {prepnp(na,acc); cp(aż); cp(int); cp(jak); cp(kiedy); cp(że); cp(żeby); prepncp(na,acc,aż); prepncp(na,acc,int); prepncp(na,acc,jak); prepncp(na,acc,kiedy); prepncp(na,acc,że); prepncp(na,acc,żeby)} + {prepnp(z,inst)} + {xp(dur)}
zaczekać: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(aż)} + {xp(dur)}
zaczekać: perf: subj{np(str)} + {xp(dur)} + {xp(locat)}
zaczepiać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
zaczepiać: imperf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)}
zaczepiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zaczepiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
zaczepiać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
zaczepiać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc)}
zaczepiać się: imperf: subj{np(str)} + {xp(locat)}
zaczepić: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
zaczepić: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)}
zaczepić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zaczepić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
zaczepić się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
zaczepić się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc)}
zaczepić się: perf: subj{np(str)} + {xp(locat)}
zaczerpnąć: perf: subj{np(str)} + obj{np(part)} + {np(inst)} + {prepnp(od,gen); prepnp(u,gen); xp(abl); xp(locat)}
zaczerpnąć: perf: subj{np(str)} + obj{np(part)} + {prepnp(do,gen)}
zaczerpnąć: perf: subj{np(str)} + obj{np(part)} + {prepnp(od,gen)}
zaczerpnąć: perf: subj{np(str)} + obj{np(part)} + {prepnp(w,acc)}
zaczerpnąć: perf: subj{np(str)} + obj{np(str)} + {prepncp(z,gen,int)}
zaczerpnąć: perf: subj{np(str)} + obj{np(str)} + {prepncp(z,gen,że)}
zaczerpnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen); prepnp(u,gen); xp(abl)}
zaczerpnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zaczerwienić: perf: subj{np(str)} + obj{np(str)}
zaczerwienić się: perf: subj{np(str)} + {np(inst)}
zaczerwienić się: perf: subj{np(str)} + {prepnp(z,gen)}
zaczynać: imperf: subj,controller{E} + controllee{infp(imperf)}
zaczynać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zaczynać: imperf: subj{np(str)} + {prepnp(z,inst)}
zaczynać się: imperf: subj{np(str)} + {np(dat)}
zaczynać się: imperf: subj{np(str)} + {np(inst)}
zaczynać się: imperf: subj{np(str)} + {prepnp(na,acc)}
zaczynać się: imperf: subj{np(str)} + {prepnp(od,gen)}
zaczytywać: imperf: subj{np(str)} + obj{np(str)}
zaczytywać się: imperf: subj{np(str)} + {np(inst)}
zaczytywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zadać: perf: subj{np(str)} + {np(dat)} + {np(gen)}
zadać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zadać się: perf: subj{np(str)} + {prepnp(z,inst)}
zadawać: imperf: subj{np(str)} + {np(dat)} + {np(gen)}
zadawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zadawać się: imperf: subj{np(str)} + {prepnp(z,inst)}
zadbać: perf: subj{np(str)} + {prepnp(o,acc); cp(żeby); prepncp(o,acc,żeby)}
zadebiutować: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(inst)} + {xp(locat)}
zadecydować: perf: subj{np(str)} + {advp(pron)}
zadecydować: perf: subj{np(str)} + {comprepnp(w sprawie)}
zadecydować: perf: subj{np(str)} + {cp(int)}
zadecydować: perf: subj{np(str)} + {cp(że)}
zadecydować: perf: subj{np(str)} + {cp(żeby)}
zadecydować: perf: subj{np(str); ncp(str,że)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zadecydować: perf: subj{np(str)} + {or}
zadecydować: perf: subj{np(str)} + {prepncp(o,loc,żeby)}
zadecydować się: perf: subj{cp(int)}
zadecydować się: perf: subj{np(str)}
zadedykować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zadeklarować: perf: subj{np(str)} + {np(dat)} + {cp(int)}
zadeklarować: perf: subj{np(str)} + {np(dat)} + {or}
zadeklarować: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
zadeklarować się: perf: subj,controller{np(str)} + controllee{infp(_)}
zadeklarować się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
zadeklarować się: perf: subj{np(str)} + {cp(int)}
zadeklarować się: perf: subj{np(str)} + {cp(że)}
zadeklarować się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
zadeklarować się: perf: subj{np(str)} + {or}
zadeklarować się: perf: subj{np(str)} + {preplexnp(po,loc,sg,'strona',ratr)}
zadeklarować się: perf: subj{np(str)} + {prepnp(przeciw,dat); prepnp(za,inst)}
zademonstrować: perf: subj{np(str)} + {comprepnp(na rzecz)}
zademonstrować: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
zademonstrować: perf: subj{np(str)} + obj{cp(int)} + {prepnp(przed,inst)}
zademonstrować: perf: subj{np(str)} + obj{cp(int)} + {prepnp(wobec,gen)}
zademonstrować: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
zademonstrować: perf: subj{np(str)} + obj{cp(że)} + {prepnp(przed,inst)}
zademonstrować: perf: subj{np(str)} + obj{cp(że)} + {prepnp(wobec,gen)}
zademonstrować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
zademonstrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
zademonstrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
zademonstrować: perf: subj{np(str)} + {prepnp(przeciw,dat)}
zademonstrować: perf: subj{np(str)} + {prepnp(za,inst)}
zadłużać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(u,gen); prepnp(w,loc)}
zadłużać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(u,gen); prepnp(w,loc)} + {refl}
zadłużyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(u,gen); prepnp(w,loc)}
zadłużyć: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(u,gen); prepnp(w,loc)} + {refl}
zadomowić się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zadomowić się: perf: subj{np(str)} + {prepnp(u,gen)}
zadomowić się: perf: subj{np(str)} + {prepnp(w,loc)}
zadowalać: imperf: subj{cp(że)} + {np(str)}
zadowalać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)}
zadowalać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że); ncp(inst,żeby)}
zadowolić: perf: subj{cp(że)} + {np(str)}
zadowolić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)}
zadowolić się: perf: subj{np(str)} + {np(inst); ncp(inst,że); ncp(inst,żeby)}
zadrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
zadrzeć: perf: subj{np(str)} + {prepnp(z,inst)}
zadrzeć się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
zadusić: perf: subj{np(str)} + {np(inst)} + {refl}
zadusić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zadusić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zadusić się: perf: subj{np(str)} + {np(inst)}
zadusić się: perf: subj{np(str)} + {prepnp(od,gen)}
zadusić się: perf: subj{np(str)} + {prepnp(w,loc)}
zadusić się: perf: subj{np(str)} + {xp(locat)}
zadzierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
zadzierać: imperf: subj{np(str)} + {prepnp(z,inst)}
zadzierać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
zadziwiać: imperf: subj{cp(int)} + {np(str)}
zadziwiać: imperf: subj{cp(że)} + {np(str)}
zadziwiać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
zadziwiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zadziwiać się: imperf: subj{np(str)} + {cp(int)}
zadziwiać się: imperf: subj{np(str)} + {cp(że)}
zadziwiać się: imperf: subj{np(str)} + {np(gen)}
zadziwiać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zadziwiać się: imperf: subj{np(str)} + {or}
zadziwiać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
zadziwić: perf: subj{cp(int)} + {np(str)}
zadziwić: perf: subj{cp(że)} + {np(str)}
zadziwić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
zadziwić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zadziwić się: perf: subj{np(str)} + {cp(int)}
zadziwić się: perf: subj{np(str)} + {cp(że)}
zadziwić się: perf: subj{np(str)} + {np(gen)}
zadziwić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zadziwić się: perf: subj{np(str)} + {or}
zadziwić się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
zadzwonić: perf: {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
zadzwonić: perf: {np(dat)} + {preplexnp(w,loc,_,'ucho',natr)}
zadzwonić: perf: subj{np(str)} + {np(dat)}
zadzwonić: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
zadzwonić: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'ucho',natr)}
zadzwonić: perf: subj{np(str)} + {np(inst)}
zadzwonić: perf: subj{np(str)} + {preplexnp(do,gen,pl,'drzwi',atr)}
zadzwonić: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(o,acc)} + {prepnp(od,gen); xp(abl)}
zadzwonić: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {comprepnp(w sprawie)}
zadzwonić: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {cp(int); cp(że); cp(żeby)}
zadzwonić: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {prepnp(po,acc)}
zadzwonić: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {prepnp(z,inst); prepncp(z,inst,że)}
zadzwonić: perf: subj{np(str)} + {prepnp(na,acc)}
zafascynować: perf: subj{cp(int)} + obj{np(str)}
zafascynować: perf: subj{cp(że)} + obj{np(str)}
zafascynować: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {prepnp(w,loc)}
zafascynować: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zafascynować się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
zafundować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zafundować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zagadać: perf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
zagadać: perf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
zagadać: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
zagadać: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zagadać: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zagadać: perf: subj{np(str)} + obj{np(str)} + {or}
zagadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
zagadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zagadać: perf: subj{np(str)} + {prepadjp(po,postp)}
zagadać: perf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(na temat)}
zagadać: perf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w sprawie)}
zagadać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
zagadać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
zagadać: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
zagadać: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
zagadać: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,int)}
zagadać: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zagadać: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(z,inst)}
zagadać: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
zagadać: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
zagadać: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
zagadać: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
zagadać: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
zagadać: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
zagadać się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)} + {prepnp(z,inst)}
zagadać się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
zagadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
zagadnąć: perf: subj{np(str)} + {np(str)} + {prepnp(do,gen)}
zagadnąć: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
zagadnąć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zagadnąć: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zagadnąć: perf: subj{np(str)} + obj{np(str)} + {or}
zagadnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
zagadnąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
zagadywać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(na temat)}
zagadywać: imperf: subj{np(str)} + obj{np(str)} + {comprepnp(w sprawie)}
zagadywać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
zagadywać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
zagadywać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zagadywać: imperf: subj{np(str)} + obj{np(str)} + {or}
zagadywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
zagadywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zagadywać: imperf: subj{np(str)} + {prepadjp(po,postp)}
zagadywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(na temat)}
zagadywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w sprawie)}
zagadywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
zagadywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
zagadywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
zagadywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
zagadywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,int)}
zagadywać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zagadywać: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)} + {prepnp(z,inst)}
zagadywać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
zagadywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
zagadywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(w sprawie)}
zagadywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
zagadywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
zagadywać: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
zagadywać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)} + {prepnp(z,inst)}
zagadywać się: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(z,inst)}
zagadywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
zagaić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zagaić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zagaić: perf: subj{np(str)} + obj{np(str)} + {or}
zagaić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zagaić: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
zagaić: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
zagarnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
zagarniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
zaginąć: perf: subj{np(str)} + {xp(locat)} + {xp(temp)}
zaglądać: imperf: subj{np(str)} + {cp(int)}
zaglądać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {prepnp(przez,acc)}
zaglądać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zaglądać: imperf: subj{np(str)} + {prepnp(na,acc)}
zaglądać: imperf: subj{np(str)} + {xp(adl)}
zagłębiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
zagłębiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
zagłębiać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
zagłębiać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
zagłębić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
zagłębić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
zagłębić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
zagłębić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,loc)}
zagłuszać: imperf: subj{np(str)} + {np(inst)} + {refl}
zagłuszać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(w,loc)}
zagłuszyć: perf: subj{np(str)} + {np(inst)} + {refl}
zagłuszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(w,loc)}
zagospodarować: perf: subj{np(str)} + obj{np(str)}
zagospodarować się: perf: subj{np(str)} + {xp(locat)}
zagospodarowywać: imperf: subj{np(str)} + obj{np(str)}
zagospodarowywać się: imperf: subj{np(str)} + {xp(locat)}
zagotować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zagotować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zagotować się: perf: {prepnp(od,gen)} + {xp(locat)}
zagotować się: perf: {prepnp(w,loc)}
zagotować się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
zagotować się: perf: subj{np(str)} + {prepnp(od,gen)}
zagrać: perf: subj{np(str)} + {np(inst)}
zagrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zagrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zagrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zagrać: perf: subj{np(str)} + {prepnp(na,acc)}
zagrać: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(z,inst)}
zagrać: perf: subj{np(str)} + {prepnp(w,acc)}
zagradzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zagrażać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
zagrodzić: perf: subj{np(str)} + {np(inst)} + {refl}
zagrodzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zagrozić: perf: subj{np(str)} + {np(dat)} + {np(inst); cp(że); ncp(inst,że)}
zagryzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zagryzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zagryzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zagryzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zagryzać się: imperf: subj{np(str)} + {prepnp(z,gen)}
zagryźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zagryźć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zagryźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zagryźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zagryźć się: perf: subj{np(str)} + {prepnp(z,gen)}
zagrzać: perf: subj{np(str)} + {np(dat)} + {np(part)}
zagrzać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {refl}
zagrzać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
zagrzać: perf: subj{np(str)} + {xp(locat)} + {lexnp(str,sg,'miejsce',natr)}
zagrzać się: perf: subj{np(str)} + {np(dat)}
zagrzewać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)} + {refl}
zagrzewać: imperf: subj{np(str)} + obj{np(part)} + {np(dat)}
zagrzewać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zagrzewać: imperf: subj{np(str)} + {xp(locat)} + {lexnp(str,sg,'miejsce',natr)}
zagrzewać się: imperf: subj{np(str)} + {np(dat)}
zagwarantować: perf: subj{np(str); ncp(str,że)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)} + {np(inst); ncp(inst,że)}
zagwarantować: perf: subj{np(str)} + {or}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(o,acc)}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {or}
zahaczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
zahaczać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
zahaczać się: imperf: subj{np(str)} + {xp(locat)}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(o,acc)}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {or}
zahaczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
zahaczyć się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
zahaczyć się: perf: subj{np(str)} + {xp(locat)}
zahamować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zainicjować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zainstalować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
zainstalować się: perf: subj{np(str)} + {prepnp(u,gen)}
zainstalować się: perf: subj{np(str)} + {xp(locat)}
zainteresować: perf: subj{cp(int)} + {np(str)}
zainteresować: perf: subj{cp(że)} + {np(str)}
zainteresować: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zainteresować: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że); ncp(inst,żeby)}
zainteresować się: perf: subj{np(str)} + {cp(int)}
zainteresować się: perf: subj{np(str)} + {np(inst); cp(że); ncp(inst,int); ncp(inst,że); ncp(inst,żeby)}
zainwestować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc); prepncp(w,acc,żeby)}
zaistnieć: perf: subj{np(str)} + {prepnp(dla,gen)}
zaistnieć: perf: subj{np(str)} + {xp(temp)}
zajadać: imperf: subj{np(str)} + obj{np(str)}
zajadać się: imperf: subj{np(str)} + {np(inst)}
zająć: perf: subj{np(str)} + obj{lexnp(str,_,'miejsce',atr)} + {prepnp(w,loc)}
zająć: perf: subj{np(str)} + obj{lexnp(str,_,'pozycja',atr)} + {prepnp(w,loc)}
zająć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zająć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zająć się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,żeby)}
zająć się: perf: subj{np(str)} + {prepnp(od,gen)}
zajechać: perf: {np(inst)} + {prepnp(na,acc)}
zajechać: perf: {np(inst)} + {prepnp(od,gen)}
zajechać: perf: {np(inst)} + {xp(abl)}
zajechać: perf: {np(inst)} + {xp(locat)}
zajechać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
zajechać: perf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zajechać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zajechać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zajeżdżać: imperf: {np(inst)} + {prepnp(od,gen)}
zajeżdżać: imperf: {np(inst)} + {xp(abl)}
zajeżdżać: imperf: {np(inst)} + {xp(locat)}
zajeżdżać: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
zajeżdżać: imperf: subj{np(str)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zajeżdżać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zajmować: imperf: subj{np(str)} + obj{lexnp(str,_,'miejsce',atr)} + {prepnp(w,loc)}
zajmować: imperf: subj{np(str)} + obj{lexnp(str,_,'pozycja',atr)} + {prepnp(w,loc)}
zajmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zajmować: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zajmować się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,żeby)}
zajrzeć: perf: subj{np(str)} + {cp(int)}
zajrzeć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {prepnp(przez,acc)}
zajrzeć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zajrzeć: perf: subj{np(str)} + {prepnp(na,acc)}
zajrzeć: perf: subj{np(str)} + {xp(adl)}
zajść: perf: subj{np(str)} + {np(dat)} + {np(str)}
zajść: perf: subj{np(str)} + {np(inst)}
zajść: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
zajść: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
zajść: perf: subj{np(str)} + {prepnp(w,acc)}
zakazać: perf: subj{np(str)} + obj,controllee{np(gen); cp(żeby); ncp(gen,żeby); infp(_)} + controller{np(dat)}
zakazywać: imperf: subj{np(str)} + obj,controllee{np(gen); cp(żeby); ncp(gen,żeby); infp(_)} + controller{np(dat)}
zakląć: perf: subj,controller{np(str)} + controllee{xp(mod)}
zakląć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(że)}
zakląć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
zakląć: perf: subj{np(str)} + obj{np(str)} + {or}
zakląć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zakląć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
zakląć się: perf: subj{np(str)} + {np(inst)} + {cp(że)}
zakląć się: perf: subj{np(str)} + {or}
zakląć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
zaklinać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(że)}
zaklinać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
zaklinać: imperf: subj{np(str)} + obj{np(str)} + {or}
zaklinać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zaklinać się: imperf: subj{np(str)} + {np(inst)} + {cp(że)}
zaklinać się: imperf: subj{np(str)} + {or}
zaklinać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
zakładać: imperf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)}
zakładać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zakładać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zakładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zakładać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
zakładać: imperf: subj{np(str)} + {or}
zakładać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {prepnp(z,inst)}
zakładać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
zakładać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
zakładać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {prepncp(o,acc,int)}
zakłócać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zakłócać się: imperf: subj{np(str)} + {np(dat)}
zakłócić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zakłócić się: perf: subj{np(str)} + {np(dat)}
zakochać się: perf: subj{np(str)} + {prepnp(w,loc)}
zakomunikować: perf: subj{np(str)} + {np(dat)} + {or}
zakomunikować: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zakomunikować: perf: subj{np(str)} + obj{cp(int)} + {np(dat)}
zakomunikować: perf: subj{np(str)} + obj{np(str); cp(że); ncp(str,że)} + {np(dat)}
zakończyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
zakończyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że); ncp(inst,żeby)}
zakończyć: perf: subj{np(str)} + obj{np(str)} + {or}
zakończyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zakończyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zakończyć: perf: subj{np(str)} + obj{np(str)} + {xp(temp)}
zakończyć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
zakończyć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
zakończyć się: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
zakończyć się: perf: subj{np(str)} + {xp(locat)}
zakończyć się: perf: subj{np(str)} + {xp(temp)}
zakopać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zakopać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zakopać się: perf: subj{np(str)} + {prepnp(pod,acc)}
zakopać się: perf: subj{np(str)} + {prepnp(w,acc)}
zakopać się: perf: subj{np(str)} + {prepnp(w,loc)}
zakopać się: perf: subj{np(str)} + {xp(locat)}
zakopywać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
zakopywać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zakopywać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
zakopywać się: imperf: subj{np(str)} + {prepnp(pod,acc)}
zakopywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zakopywać się: imperf: subj{np(str)} + {xp(locat)}
zakorzenić: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
zakorzenić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
zakorzenić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zakorzenić: perf: subj{np(str)} + obj{np(str)} + {prepnp(wśród,gen)}
zakorzenić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zakorzenić się: perf: subj{cp(że)} + {prepnp(w,loc)}
zakorzenić się: perf: subj{np(str)} + {prepnp(w,loc)}
zakorzenić się: perf: subj{np(str)} + {prepnp(wśród,gen)}
zakorzenić się: perf: subj{np(str)} + {xp(locat)}
zakosztować: perf: subj{np(str)} + {cp(int)}
zakosztować: perf: subj{np(str)} + {cp(że)}
zakosztować: perf: subj{np(str)} + {np(gen); ncp(gen,int)}
zakraść się: perf: subj{np(str)} + {prepnp(od,gen)} + {xp(adl)}
zakraść się: perf: subj{np(str)} + {prepnp(pod,acc)} + {xp(adl)}
zakraść się: perf: subj{np(str)} + {xp(adl)} + {xp(mod)} + {xp(perl)}
zakrawać: imperf: subj{cp(int)} + {prepnp(na,acc)}
zakrawać: imperf: subj{cp(że)} + {prepnp(na,acc)}
zakrawać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(na,acc)}
zakreślać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zakreślić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zakręcać: imperf: subj{np(str)} + {np(dat)} + {np(str)}
zakręcać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',atr)}
zakręcać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zakręcać: imperf: subj{np(str)} + {xp(adl)} + {xp(locat)}
zakręcać się: imperf: subj{np(str)} + {prepnp(na,loc)}
zakręcać się: imperf: subj{np(str)} + {xp(adl)} + {xp(locat)}
zakręcić: perf: subj{np(str)} + {np(dat)} + {np(str)}
zakręcić: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',atr)}
zakręcić: perf: subj{np(str)} + {np(inst)}
zakręcić: perf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
zakręcić: perf: subj{np(str)} + obj{np(str)}
zakręcić się: perf: {np(dat)} + {preplexnp(w,loc,sg,'głowa',atr)}
zakręcić się: perf: subj{np(str)} + {or}
zakręcić się: perf: subj{np(str)} + {prepnp(koło,gen)}
zakręcić się: perf: subj{np(str)} + {prepnp(na,loc)}
zakręcić się: perf: subj{np(str)} + {prepnp(wokół,gen)}
zakręcić się: perf: subj{np(str)} + {xp(locat)}
zakryć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zakryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
zakryć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
zakryć się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(od,gen)}
zakrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zakrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(od,gen)}
zakrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
zakrywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)} + {prepnp(od,gen)}
zakrzyczeć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zakrzyczeć: perf: subj{np(str)} + obj{np(str)} + {or}
zakrzyczeć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
zakrzyczeć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
zakrzyknąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zakrzyknąć: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
zakrzyknąć: perf: subj{np(str)} + {np(dat)} + {or}
zakrzyknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
zakrzyknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
zakrzyknąć: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
zakrzyknąć: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
zakrzyknąć: perf: subj{np(str)} + {prepnp(za,inst)} + {or}
zakupić: perf: subj{np(str)} + obj{np(part)} + {np(dat)}
zakupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(od,gen)}
zakupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(u,gen)}
zakupić: perf: subj{np(str)} + obj{np(part)} + {prepnp(za,acc)}
zakupić: perf: subj{np(str)} + obj{np(part)} + {xp(locat)}
zakwalifikować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zakwalifikować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zakwalifikować się: perf: subj{np(str)} + {prepnp(do,gen)}
zakwalifikować się: perf: subj{np(str)} + {prepnp(na,acc)}
zakwaterować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zakwaterować się: perf: subj{np(str)} + {xp(locat)}
zakwestionować: perf: subj{np(str)} + {cp(jakoby)}
zakwestionować: perf: subj{np(str)} + obj{cp(int)}
zakwestionować: perf: subj{np(str)} + obj{cp(że)}
zakwestionować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
zakwitać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zakwitać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
zakwitać: imperf: subj{np(str)} + {xp(mod)}
zakwitnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zakwitnąć: perf: subj{np(str)} + {prepnp(w,loc)}
zalać: perf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'sadło',natr)} + {preplexnp(za,acc,sg,'skóra',natr)}
zalać: perf: subj{np(str)} + {np(inst)} + {refl}
zalać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zalać się: perf: subj{np(str)} + {np(inst)}
zalać się: perf: subj{np(str)} + {prepnp(w,acc)}
zalec: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zalec: perf: subj{np(str)} + {np(inst)}
zalec: perf: subj{np(str)} + {np(str)}
zalec: perf: subj{np(str)} + {prepnp(między,inst)}
zalec: perf: subj{np(str)} + {prepnp(w,loc)}
zalecać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
zalecać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zalecać: imperf: subj{np(str)} + {np(dat)} + {or}
zalecać: imperf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
zalecać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zalecać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
zalecić: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
zalecić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zalecić: perf: subj{np(str)} + {np(dat)} + {or}
zalecić: perf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
zalecić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zalegać: imperf: subj{np(str)} + {np(dat)} + {np(str)}
zalegać: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {prepnp(za,acc)}
zalegać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(za,acc)}
zalegać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,inst)}
zalegać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
zalegać: imperf: subj{np(str)} + {np(inst)}
zalegać: imperf: subj{np(str)} + {np(str)} + {prepnp(wobec,gen)} + {prepnp(za,acc)}
zalegać: imperf: subj{np(str)} + {prepnp(między,inst)}
zalegać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(wobec,gen)} + {prepnp(za,acc)}
zalegać: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(wobec,gen)} + {prepnp(z,inst)}
zalegać: imperf: subj{np(str)} + {prepnp(w,loc)}
zalewać: imperf: subj{np(str)} + {cp(że)}
zalewać: imperf: subj{np(str)} + {np(dat)} + {lexnp(gen,sg,'sadło',natr)} + {preplexnp(za,acc,sg,'skóra',natr)}
zalewać: imperf: subj{np(str)} + {np(inst)} + {refl}
zalewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zalewać się: imperf: subj{np(str)} + {np(inst)}
zalewać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zależeć: imperf: {np(dat)} + {prepnp(na,loc); prepncp(na,loc,żeby)}
zależeć: imperf: subj{cp(int)} + {prepnp(od,gen); prepncp(od,gen,int)}
zależeć: imperf: subj{np(str); ncp(str,int)} + {prepnp(od,gen); prepncp(od,gen,int)}
zależeć: perf: subj{np(str)} + {np(str)}
zaliczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zaliczać: imperf: subj{np(str)} + obj{np(str)} + {prepadjp(do,gen)}
zaliczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaliczać: imperf: subj{np(str)} + {prepnp(do,gen)} + {refl}
zaliczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zaliczyć: perf: subj{np(str)} + obj{np(str)} + {prepadjp(do,gen)}
zaliczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaliczyć: perf: subj{np(str)} + {prepadjp(do,gen)} + {refl}
zaliczyć: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
zaludniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaludniać się: imperf: subj{np(str)} + {np(inst)}
zaludnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaludnić się: perf: subj{np(str)} + {np(inst)}
załamać: perf: subj{cp(gdy)} + {np(str)}
załamać: perf: subj{cp(int)} + {np(str)}
załamać: perf: subj{cp(jak)} + {np(str)}
załamać: perf: subj{cp(jeśli)} + {np(str)}
załamać: perf: subj{cp(kiedy)} + {np(str)}
załamać: perf: subj{cp(że)} + {np(str)}
załamać: perf: subj{np(str)} + {cp(int)} + {lexnp(str,pl,'ręka',natr)}
załamać: perf: subj{np(str)} + {cp(że)} + {lexnp(str,pl,'ręka',natr)}
załamać: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
załamać: perf: subj{np(str)} + obj{np(str)}
załamać: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)} + {lexnp(str,pl,'ręka',natr)}
załamać się: perf: subj{np(str)} + {cp(int)}
załamać się: perf: subj{np(str)} + {cp(że)}
załamać się: perf: subj{np(str)} + {np(dat)}
załamać się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
załamać się: perf: subj{np(str)} + {prepnp(pod,inst)}
załamywać: imperf: subj{cp(gdy)} + {np(str)}
załamywać: imperf: subj{cp(int)} + {np(str)}
załamywać: imperf: subj{cp(jak)} + {np(str)}
załamywać: imperf: subj{cp(jeśli)} + {np(str)}
załamywać: imperf: subj{cp(kiedy)} + {np(str)}
załamywać: imperf: subj{cp(że)} + {np(str)}
załamywać: imperf: subj{np(str)} + {cp(int)} + {lexnp(str,pl,'ręka',natr)}
załamywać: imperf: subj{np(str)} + {cp(że)} + {lexnp(str,pl,'ręka',natr)}
załamywać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
załamywać: imperf: subj{np(str)} + obj{np(str)}
załamywać: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)} + {lexnp(str,pl,'ręka',natr)}
załamywać się: imperf: subj{np(str)} + {cp(int)}
załamywać się: imperf: subj{np(str)} + {cp(że)}
załamywać się: imperf: subj{np(str)} + {np(dat)}
załamywać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
załamywać się: imperf: subj{np(str)} + {prepnp(pod,inst)}
załatwiać: imperf: subj{np(str)} + {np(inst)} + {refl}
załatwiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
załatwiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
załatwiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
załatwiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
załatwiać się: imperf: subj{np(str)} + {prepnp(do,gen)}
załatwiać się: imperf: subj{np(str)} + {prepnp(w,acc)}
załatwiać się: imperf: subj{np(str)} + {prepnp(z,inst)}
załatwić: perf: subj{np(str)} + {np(inst)} + {refl}
załatwić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(od,gen)}
załatwić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
załatwić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
załatwić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
załatwić się: perf: subj{np(str)} + {prepnp(do,gen)}
załatwić się: perf: subj{np(str)} + {prepnp(w,acc)}
załatwić się: perf: subj{np(str)} + {prepnp(z,inst)}
załączać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
załączać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
załączyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
załączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
założyć: perf: subj{np(str)} + obj{cp(że); ncp(str,że)}
założyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
założyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
założyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
założyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
założyć się: perf: subj{np(str)} + {cp(int)}
założyć się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,że)} + {prepnp(z,inst)}
założyć się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
zamachnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zamartwiać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
zamartwiać się: imperf: subj{np(str)} + {comprepnp(z powodu)}
zamartwiać się: imperf: subj{np(str)} + {cp(int)}
zamartwiać się: imperf: subj{np(str)} + {cp(że)}
zamartwiać się: imperf: subj{np(str)} + {cp(żeby)}
zamartwiać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że); ncp(inst,żeby)}
zamartwiać się: imperf: subj{np(str)} + {or}
zamartwiać się: imperf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
zamarzać: imperf: subj{np(str)}
zamarznąć: perf: subj{np(str)}
zamarzyć: perf: subj,controller{np(str)} + controllee{infp(_)}
zamarzyć: perf: subj{np(str)} + {cp(że)}
zamarzyć: perf: subj{np(str)} + {or}
zamarzyć: perf: subj{np(str)} + {prepnp(o,loc); cp(żeby); prepncp(o,loc,że); prepncp(o,loc,żeby)}
zamarzyć się: perf: subj,controllee{infp(_)} + controller{np(dat)}
zamarzyć się: perf: subj{cp(żeby)} + {np(dat)}
zamarzyć się: perf: subj{cp(że)} + {np(dat)}
zamarzyć się: perf: subj{np(str)} + {np(dat)}
zamawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(u,gen); xp(locat)}
zamawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(u,gen)}
zamawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {xp(locat)}
zamawiać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
zamazać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zamazać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
zamazywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zamazywać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
zameldować: perf: subj{np(str)} + {np(dat)} + {cp(int)}
zameldować: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zameldować: perf: subj{np(str)} + {np(dat)} + {or}
zameldować: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
zameldować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zameldować: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
zameldować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zameldować: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
zameldować: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
zameldować: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,loc)}
zameldować się: perf: subj{np(str)} + {np(dat)}
zameldować się: perf: subj{np(str)} + {prepnp(do,gen)}
zameldować się: perf: subj{np(str)} + {prepnp(na,acc)}
zameldować się: perf: subj{np(str)} + {prepnp(u,gen)}
zameldować się: perf: subj{np(str)} + {xp(locat)}
zamiatać: imperf: {np(inst)}
zamiatać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zamiatać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,acc,sg,'dywan',natr)}
zamiatać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
zamieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zamieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zamieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zamieniać się: imperf: subj{np(str)} + {np(inst)}
zamieniać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
zamieniać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zamienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zamienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zamienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zamienić się: perf: subj{np(str)} + {np(inst)}
zamienić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
zamienić się: perf: subj{np(str)} + {prepnp(w,acc)}
zamierać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
zamierać: imperf: subj{np(str)} + {prepnp(w,loc)}
zamierać: imperf: subj{np(str)} + {prepnp(z,gen)}
zamierzać: imperf: subj,controller{np(str)} + controllee{infp(_)}
zamierzać: imperf: subj{np(str)} + {nonch}
zamierzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zamierzyć: perf: subj,controller{np(str)} + controllee{infp(_)}
zamierzyć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zamierzyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zamieszczać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zamieszkać: perf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(z,inst)}
zamieszkać: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
zamieszkiwać: imperf: subj{np(str)} + obj{np(str)}
zamieszkiwać: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(z,inst)}
zamieszkiwać: imperf: subj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
zamieścić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zamieść: perf: {np(inst)}
zamieść: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zamieść: perf: subj{np(str)} + obj{np(str)} + {preplexnp(pod,acc,sg,'dywan',natr)}
zamieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
zamilknąć: perf: subj{np(str)}
zamknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zamknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(przed,inst,sg,'nos',natr)}
zamknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zamknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
zamknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zamknąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zamknąć: perf: subj{np(str)} + {xp(locat)} + {refl}
zamknąć się: perf: subj{np(str)} + {np(dat)}
zamknąć się: perf: subj{np(str)} + {np(inst)}
zamknąć się: perf: subj{np(str)} + {prepnp(dla,gen)}
zamknąć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(w,loc)}
zamknąć się: perf: subj{np(str)} + {prepnp(za,inst)}
zamontować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
zamordować: perf: subj{np(str)} + {np(inst)} + {refl}
zamordować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zamordować: perf: subj{np(str)} + {xp(locat)} + {refl}
zamówić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(u,gen); xp(locat)}
zamówić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {prepnp(u,gen)}
zamówić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {xp(locat)}
zamówić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
zamrzeć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zamrzeć: perf: subj{np(str)} + {prepnp(w,loc)}
zamrzeć: perf: subj{np(str)} + {prepnp(z,gen)}
zamykać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zamykać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(przed,inst,sg,'nos',natr)}
zamykać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zamykać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
zamykać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zamykać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zamykać: imperf: subj{np(str)} + {xp(locat)} + {refl}
zamykać się: imperf: subj{np(str)} + {np(dat)}
zamykać się: imperf: subj{np(str)} + {np(inst)}
zamykać się: imperf: subj{np(str)} + {prepnp(dla,gen)}
zamykać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(w,loc)}
zamykać się: imperf: subj{np(str)} + {prepnp(za,inst)}
zamyślać: imperf: subj,controller{np(str)} + controllee{infp(_)}
zamyślać: imperf: subj{np(str)} + {cp(że)}
zamyślać: imperf: subj{np(str)} + obj{np(str)}
zamyślać: imperf: subj{np(str)} + {prepnp(o,loc)}
zamyślać się: imperf: subj{np(str)} + {comprepnp(na temat)}
zamyślać się: imperf: subj{np(str)} + {cp(int)}
zamyślać się: imperf: subj{np(str)} + {cp(że)}
zamyślać się: imperf: subj{np(str)} + {or}
zamyślać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
zamyślić: perf: subj,controller{np(str)} + controllee{infp(_)}
zamyślić: perf: subj{np(str)} + {cp(że)}
zamyślić: perf: subj{np(str)} + obj{np(str)}
zamyślić: perf: subj{np(str)} + {prepnp(o,loc)}
zamyślić się: perf: subj{np(str)} + {comprepnp(na temat)}
zamyślić się: perf: subj{np(str)} + {cp(int)}
zamyślić się: perf: subj{np(str)} + {cp(że)}
zamyślić się: perf: subj{np(str)} + {or}
zamyślić się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
zaniechać: perf: subj{np(str)} + obj{np(gen)}
zanieczyszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zanieczyszczać się: imperf: subj{np(str)} + {np(inst)}
zaniedbać: perf: subj,controller{np(str)} + controllee{infp(_)}
zaniedbać: perf: subj{np(str)} + obj{np(gen)}
zaniedbać: perf: subj{np(str)} + obj{np(str)}
zaniedbać się: perf: subj{np(str)} + {prepnp(w,loc)}
zaniedbywać: imperf: subj,controller{np(str)} + controllee{infp(_)}
zaniedbywać: imperf: subj{np(str)} + obj{np(gen)}
zaniedbywać: imperf: subj{np(str)} + obj{np(str)}
zaniedbywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zaniemówić: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(gdy); cp(jak); cp(kiedy)}
zaniepokoić: perf: subj{cp(gdy)} + {np(str)}
zaniepokoić: perf: subj{cp(jak)} + {np(str)}
zaniepokoić: perf: subj{cp(jeśli)} + {np(str)}
zaniepokoić: perf: subj{cp(kiedy)} + {np(str)}
zaniepokoić: perf: subj{cp(że)} + {np(str)}
zaniepokoić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zaniepokoić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zaniepokoić się: perf: subj{np(str)} + {cp(int)}
zaniepokoić się: perf: subj{np(str)} + {cp(że)}
zaniepokoić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zaniepokoić się: perf: subj{np(str)} + {or}
zaniepokoić się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
zanieść: perf: {np(inst)} + {np(str)}
zanieść: perf: {np(inst)} + {xp(abl)}
zanieść: perf: {np(str)} + {xp(adl)}
zanieść: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {xp(adl)}
zanieść: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {xp(adl)}
zanieść: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zanieść się: perf: {np(inst)} + {xp(abl)}
zanieść się: perf: {prepnp(na,acc); prepncp(na,acc,że)}
zanieść się: perf: subj{np(str)} + {np(inst)}
zanieść się: perf: subj{np(str)} + {prepnp(od,gen)}
zanikać: imperf: subj{np(str)}
zaniknąć: perf: subj{np(str)}
zaniżać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
zaniżyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zanosić: imperf: {np(inst)} + {np(str)}
zanosić: imperf: {np(inst)} + {xp(abl)}
zanosić: imperf: {np(str)} + {xp(adl)}
zanosić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)} + {xp(adl)}
zanosić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {xp(adl)}
zanosić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zanosić się: imperf: {cp(że)}
zanosić się: imperf: {cp(żeby2)}
zanosić się: imperf: {np(inst)} + {xp(abl)}
zanosić się: imperf: {prepncp(na,acc,żeby2)}
zanosić się: imperf: {prepnp(na,acc); prepncp(na,acc,że)}
zanosić się: imperf: subj{np(str)} + {np(inst)}
zanosić się: imperf: subj{np(str)} + {prepnp(od,gen)}
zanosić się: imperf: subj{np(str)} + {prepnp(z,gen)}
zanotować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zanotować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zanotować: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,inst)}
zanotować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zanotować: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)}
zanotować: perf: subj{np(str)} + {prepnp(w,loc)} + {or}
zanurzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
zanurzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)} + {prepnp(w,loc)}
zanurzać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zanurzać: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)} + {refl}
zanurzać: imperf: subj{np(str)} + {prepnp(po,acc)} + {prepnp(w,loc)} + {refl}
zanurzać: imperf: subj{np(str)} + {xp(adl)} + {refl}
zanurzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)}
zanurzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,acc)} + {prepnp(w,loc)}
zanurzyć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zanurzyć: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(w,loc)} + {refl}
zanurzyć: perf: subj{np(str)} + {prepnp(po,acc)} + {prepnp(w,loc)} + {refl}
zanurzyć: perf: subj{np(str)} + {xp(adl)} + {refl}
zaobserwować: perf: subj{np(str)} + {cp(int)}
zaobserwować: perf: subj{np(str)} + {cp(jak)}
zaobserwować: perf: subj{np(str)} + {cp(że)}
zaobserwować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
zaoferować: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zaoferować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {or}
zaoferować się: perf: subj,controller{np(str)} + controllee{infp(_)}
zaoferować się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zaoferować się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
zaopatrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaopatrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zaopatrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zaopatrywać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
zaopatrywać się: imperf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(w,acc)}
zaopatrywać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {xp(locat)}
zaopatrzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaopatrzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zaopatrzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zaopatrzyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(w,acc)}
zaopatrzyć się: perf: subj{np(str)} + {prepnp(u,gen)} + {prepnp(w,acc)}
zaopatrzyć się: perf: subj{np(str)} + {prepnp(w,acc)} + {xp(locat)}
zaopiniować: perf: subj{np(str)} + {cp(int)}
zaopiniować: perf: subj{np(str)} + {cp(że)}
zaopiniować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
zaopiniować: perf: subj{np(str)} + {or}
zaostrzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zaostrzać się: imperf: subj{np(str)} + {np(dat)} + {xp(mod)} + {or}
zaostrzać się: imperf: subj{np(str)} + {preplexnp(pod,inst,sg,'wpływ',ratr)}
zaostrzać się: imperf: subj{np(str)} + {preplexnp(z,gen,sg,'powód',ratr)}
zaostrzać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
zaostrzać się: imperf: subj{np(str)} + {prepnp(od,gen)}
zaostrzać się: imperf: subj{np(str)} + {xp(temp)}
zaostrzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zaostrzyć się: perf: subj{np(str)} + {np(dat)}
zaoszczędzić: perf: subj{np(str)} + obj{np(part); ncp(part,że)} + {np(dat)}
zaoszczędzić: perf: subj{np(str)} + obj{np(part)} + {prepnp(na,acc)}
zaoszczędzić: perf: subj{np(str)} + obj{np(part)} + {prepnp(na,loc); prepncp(na,loc,że)}
zaowocować: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zapadać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zapadać: imperf: subj{np(str)} + {preplexnp(na,loc,sg,'zdrowie',natr)}
zapadać: imperf: subj{np(str)} + {prepnp(na,acc)}
zapadać: imperf: subj{np(str)} + {prepnp(w,loc)}
zapadać: imperf: subj{np(str)} + {xp(adl)}
zapadać: imperf: subj{np(str)} + {xp(locat)}
zapadać się: imperf: subj{np(str)} + {preplexnp(pod,acc,sg,'ziemia',natr)}
zapadać się: imperf: subj{np(str)} + {prepnp(pod,inst)}
zapadać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zapadać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zapakować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zapakować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zapakować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zapakować: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zapakować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zapakować: imperf: subj{np(str)} + {xp(adl)} + {refl}
zapakować się: imperf: subj{np(str)} + {prepnp(do,gen)}
zapakować się: imperf: subj{np(str)} + {prepnp(na,acc)}
zapakować się: imperf: subj{np(str)} + {prepnp(w,acc)}
zapalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zapalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zapalać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zapalać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen); prepncp(od,gen,że)}
zapalać się: imperf: subj{np(str)} + {np(inst)}
zapalać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
zapalać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zapalić: perf: subj{np(str)} + {np(inst)} + {np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zapalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zapalić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zapalić się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen); prepncp(od,gen,że)}
zapalić się: perf: subj{np(str)} + {np(inst)}
zapalić się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
zapalić się: perf: subj{np(str)} + {prepnp(w,loc)}
zapałać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen)}
zapamiętać: perf: subj{np(str)} + {cp(int)}
zapamiętać: perf: subj{np(str)} + {cp(jak)}
zapamiętać: perf: subj{np(str)} + {cp(że)}
zapamiętać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(pred)}
zapamiętać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
zapamiętać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zapamiętać: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
zapamiętać: perf: subj{np(str)} + {or}
zapamiętać się: perf: subj{np(str)} + {prepnp(w,loc)}
zapamiętywać: imperf: subj{np(str)} + {cp(int)}
zapamiętywać: imperf: subj{np(str)} + {cp(że)}
zapamiętywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
zapamiętywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zapamiętywać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)}
zapamiętywać: imperf: subj{np(str)} + {or}
zapamiętywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zapanować: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że); prepncp(nad,inst,żeby)}
zapanować: perf: subj{np(str)} + {xp(locat)}
zaparkować: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
zaparkować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zaparzyć: perf: subj{np(str)} + {np(str)} + {prepnp(w,acc)}
zaparzyć: perf: subj{np(str)} + obj{np(part)} + {np(dat)} + {prepnp(w,loc)}
zaparzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaparzyć się: perf: subj{np(str)} + {prepnp(w,loc)}
zapaść: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zapaść: perf: subj{np(str)} + {preplexnp(na,loc,sg,'zdrowie',natr)}
zapaść: perf: subj{np(str)} + {prepnp(na,acc)}
zapaść: perf: subj{np(str)} + {prepnp(w,loc)}
zapaść: perf: subj{np(str)} + {xp(adl)}
zapaść: perf: subj{np(str)} + {xp(locat)}
zapaść się: perf: subj{np(str)} + {preplexnp(pod,acc,sg,'ziemia',natr)}
zapaść się: perf: subj{np(str)} + {prepnp(pod,inst)}
zapaść się: perf: subj{np(str)} + {prepnp(w,acc)}
zapaść się: perf: subj{np(str)} + {prepnp(w,loc)}
zapatrywać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)} + {advp(pron)}
zapatrywać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zapchać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zapchać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zapchać się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
zapchać się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
zapełniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zapełniać się: imperf: subj{np(str)} + {np(inst)}
zapełnić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zapełnić się: perf: subj{np(str)} + {np(inst)}
zapewniać: imperf: subj{np(str)} + obj{ncp(str,żeby)} + {np(dat)}
zapewniać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
zapewniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); cp(że); prepncp(o,loc,że)}
zapewnić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zapewnić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zapewnić: perf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(dat)}
zapewnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
zapędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
zapędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zapędzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
zapędzać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zapędzać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zapędzać się: imperf: subj{np(str)} + {xp(adl)}
zapędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
zapędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zapędzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
zapędzić się: perf: subj{np(str)} + {prepnp(do,gen)}
zapędzić się: perf: subj{np(str)} + {prepnp(w,loc)}
zapędzić się: perf: subj{np(str)} + {xp(adl)}
zapiąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zapiąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zapiąć: perf: subj{np(str)} + {refl}
zapiąć się: perf: subj{np(str)} + {prepnp(na,acc)}
zapić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zapić: perf: subj{np(str)} + {prepnp(z,inst)}
zapić się: perf: subj{np(str)} + {np(inst)} + {preplexnp(na,acc,sg,'śmierć',natr)}
zapić się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zapić się: perf: subj{np(str)} + {preplexnp(w,acc,sg,'trup',natr)}
zapić się: perf: subj{np(str)} + {prepnp(do,gen)}
zapić się: perf: subj{np(str)} + {prepnp(z,gen)} + {preplexnp(na,acc,sg,'śmierć',natr)}
zapierać: imperf: {np(dat)} + {np(str)} + {prepnp(z,gen)}
zapierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zapierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zapierać się: imperf: subj{np(str)} + {cp(jakoby)}
zapierać się: imperf: subj{np(str)} + {cp(że)}
zapierać się: imperf: subj{np(str)} + {cp(żeby)}
zapierać się: imperf: subj{np(str)} + {np(gen); ncp(gen,jakoby); ncp(gen,że)}
zapierać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
zapierać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,żeby)}
zapierać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zapierać się: imperf: subj{np(str)} + {np(inst)} + {xp(locat)}
zapierać się: imperf: subj{np(str)} + {or}
zapierać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zapierać się: imperf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,że); prepncp(przy,loc,żeby)}
zapierać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zapinać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zapinać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zapinać: imperf: subj{np(str)} + {refl}
zapinać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(mod)}
zapisać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zapisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zapisać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zapisać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zapisać się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zapisać się: perf: subj{np(str)} + {prepnp(do,gen)}
zapisać się: perf: subj{np(str)} + {prepnp(na,acc)}
zapisywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zapisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zapisywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zapisywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zapisywać się: imperf: subj{np(str)} + {np(dat)}
zapisywać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zapisywać się: imperf: subj{np(str)} + {prepnp(na,acc)}
zaplanować: perf: subj,controller{np(str)} + controllee{infp(_)}
zaplanować: perf: subj{np(str)} + {cp(int)}
zaplanować: perf: subj{np(str)} + {cp(żeby)}
zaplanować: perf: subj{np(str)} + obj{cp(że)}
zaplanować: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(na,acc)}
zaplanować: perf: subj{np(str)} + {or}
zaplątać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zaplątać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zaplątać się: perf: subj{np(str)} + {prepnp(w,loc)}
zaplątać się: perf: subj{np(str)} + {xp(locat)}
zapłacić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
zapłacić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zapłonąć: perf: subj{np(str)} + {np(dat)} + {np(inst)}
zapłonąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
zapłonąć: perf: subj{np(str)} + {prepnp(od,gen)}
zapobiec: perf: subj{np(str)} + {np(dat)} + {np(inst)}
zapobiec: perf: subj{np(str)} + {np(inst)} + {ncp(dat,że)}
zapobiec: perf: subj{np(str)} + {np(inst)} + {ncp(dat,żeby)}
zapobiegać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
zapobiegać: imperf: subj{np(str)} + {np(inst)} + {ncp(dat,że)}
zapobiegać: imperf: subj{np(str)} + {np(inst)} + {ncp(dat,żeby)}
zapoczątkować: perf: subj{np(str)} + obj{np(str)}
zapodziać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zapodziać się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zapominać: imperf: subj,controller{np(str)} + controllee{infp(_)}
zapominać: imperf: subj{np(str)} + {np(gen)}
zapominać: imperf: subj{np(str)} + obj{np(str); ncp(str,jak); ncp(str,że)} + {np(dat)}
zapominać: imperf: subj{np(str)} + {prepnp(o,loc); cp(int); cp(jak); cp(że); prepncp(o,loc,int); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
zapominać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zapomnąć: perf: subj,controller{np(str)} + controllee{infp(_)}
zapomnąć: perf: subj{np(str)} + {np(gen)}
zapomnąć: perf: subj{np(str)} + obj{np(str); ncp(str,jak); ncp(str,że)} + {np(dat)}
zapomnąć: perf: subj{np(str)} + {prepnp(o,loc); cp(int); cp(jak); cp(że); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
zapomnąć się: perf: subj{np(str)} + {prepnp(w,loc)}
zapomnieć: perf: subj,controller{np(str)} + controllee{infp(_)}
zapomnieć: perf: subj{np(str)} + {np(gen)}
zapomnieć: perf: subj{np(str)} + obj{np(str); ncp(str,jak); ncp(str,że)} + {np(dat)}
zapomnieć: perf: subj{np(str)} + {prepnp(o,loc); cp(int); cp(jak); cp(że); prepncp(o,loc,jak); prepncp(o,loc,że); prepncp(o,loc,żeby)}
zapomnieć się: perf: subj{np(str)} + {prepnp(w,loc)}
zapowiadać: imperf: subj{np(str)} + {ncp(str,żeby2)}
zapowiadać: imperf: subj{np(str)} + {np(dat)} + {or}
zapowiadać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
zapowiadać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zapowiadać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); cp(żeby); ncp(str,że)} + {np(dat)}
zapowiadać się: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)}
zapowiadać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
zapowiadać się: imperf: subj{cp(że)}
zapowiadać się: imperf: subj{cp(żeby2)}
zapowiadać się: imperf: subj{np(str)} + {advp(misc)}
zapowiadać się: imperf: subj{np(str)} + {prepncp(na,acc,żeby2)}
zapowiadać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
zapowiadać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
zapowiadać się: imperf: subj{prepncp(na,acc,żeby2)}
zapowiedzieć: perf: subj{np(str)} + {np(dat)} + {or}
zapowiedzieć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
zapowiedzieć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zapowiedzieć: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); cp(żeby); ncp(str,że)} + {np(dat)}
zapowiedzieć się: perf: subj,controller{np(str)} + controllee{prepadjp(jako,str)}
zapowiedzieć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
zapowiedzieć się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
zapoznać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zapoznać się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zapoznawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zapoznawać się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zapożyczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zapożyczyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zapożyczyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(u,gen)}
zapracować: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zapracować się: perf: subj{np(str)} + {preplexnp(na,acc,sg,'śmierć',natr)}
zapragnąć: perf: subj,controller{np(str)} + controllee{cp(żeby); infp(_)}
zapragnąć: perf: subj{np(str)} + {np(gen); ncp(gen,żeby)}
zapraszać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zapraszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zapraszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
zapraszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {xp(adl)}
zapraszać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)} + {refl}
zaprezentować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zaprezentować się: perf: subj,controller{np(str)} + controllee{xp(mod)}
zaprezentować się: perf: subj{np(str)} + {prepnp(w,loc)}
zaprojektować: perf: subj{np(str)} + obj{np(str)} + {prepnp(jako,nom)}
zaprojektować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zaproponować: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
zaproponować: perf: subj{np(str)} + {np(dat)} + {or}
zaproponować: perf: subj{np(str)} + {np(str)} + {prepnp(na,acc)}
zaproponować: perf: subj{np(str)} + obj{cp(żeby)} + {np(dat)}
zaproponować: perf: subj{np(str)} + obj{cp(że)} + {np(dat)}
zaproponować: perf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(dat)}
zaprosić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zaprosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaprosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
zaprosić: perf: subj{np(str)} + {or}
zaprosić: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)} + {refl}
zaprotestować: perf: subj{np(str)} + {cp(że)}
zaprotestować: perf: subj{np(str)} + {np(inst)}
zaprotestować: perf: subj{np(str)} + {or}
zaprotestować: perf: subj{np(str)} + {prepncp(przeciw,dat,żeby)}
zaprotestować: perf: subj{np(str)} + {prepnp(przeciw,dat); prepncp(przeciw,dat,że)}
zaprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaprowadzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zaprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zaprowadzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zaprząc: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zaprząc: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zaprząc: perf: subj{np(str)} + {prepnp(do,gen)} + {refl}
zaprzątać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że); ncp(inst,żeby)}
zaprzeczać: imperf: subj{np(str)} + {cp(jakoby)}
zaprzeczać: imperf: subj{np(str)} + {cp(że)}
zaprzeczać: imperf: subj{np(str)} + {np(dat); ncp(dat,jakoby); ncp(dat,że)} + {np(inst)}
zaprzeczać: imperf: subj{np(str)} + {or}
zaprzeczyć: perf: subj{np(str)} + {cp(jakoby)}
zaprzeczyć: perf: subj{np(str)} + {cp(że)}
zaprzeczyć: perf: subj{np(str)} + {np(dat); ncp(dat,jakoby); ncp(dat,że)} + {np(inst)}
zaprzeczyć: perf: subj{np(str)} + {or}
zaprzeć: perf: {np(dat)} + {np(str)} + {prepnp(z,gen)}
zaprzeć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaprzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zaprzeć się: perf: subj{np(str)} + {cp(jakoby)}
zaprzeć się: perf: subj{np(str)} + {cp(że)}
zaprzeć się: perf: subj{np(str)} + {cp(żeby)}
zaprzeć się: perf: subj{np(str)} + {np(gen); ncp(gen,jakoby); ncp(gen,że)}
zaprzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(o,acc)}
zaprzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst); prepncp(przed,inst,żeby)}
zaprzeć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zaprzeć się: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
zaprzeć się: perf: subj{np(str)} + {or}
zaprzeć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zaprzeć się: perf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,że); prepncp(przy,loc,żeby)}
zaprzeć się: perf: subj{np(str)} + {prepnp(w,loc)}
zapuszczać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
zapuszczać: imperf: subj{np(str)} + {prepnp(przez,acc)} + {lexnp(str,sg,'żuraw',natr)}
zapuszczać: imperf: subj{np(str)} + {xp(locat)} + {lexnp(str,pl,'korzeń',natr)}
zapuszczać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zapuszczać się: imperf: subj{np(str)} + {xp(adl)}
zapuścić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
zapuścić: perf: subj{np(str)} + {prepnp(przez,acc)} + {lexnp(str,sg,'żuraw',natr)}
zapuścić: perf: subj{np(str)} + {xp(locat)} + {lexnp(str,pl,'korzeń',natr)}
zapuścić się: perf: subj{np(str)} + {prepnp(w,acc)}
zapuścić się: perf: subj{np(str)} + {xp(adl)}
zapytać: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
zapytać: perf: subj{np(str)} + obj{np(str)} + {or}
zapytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int)}
zapytać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zapytać się: perf: subj{np(str)} + {np(gen)} + {cp(int)}
zapytać się: perf: subj{np(str)} + {np(gen)} + {prepnp(o,acc); prepncp(o,acc,int)}
zapytać się: perf: subj{np(str)} + {or}
zarabiać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zarabiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zarabiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zarabiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
zaradzić: perf: subj{np(str)} + {cp(żeby)}
zaradzić: perf: subj{np(str)} + {np(dat); ncp(dat,że); ncp(dat,żeby)} + {np(inst)}
zarastać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
zarastać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zarastać się: imperf: subj{np(str)} + {np(dat)}
zarazić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zarazić się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
zarazić się: perf: subj{np(str)} + {np(inst)} + {prepnp(przez,acc)}
zarażać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zarażać się: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)}
zareagować: perf: subj{np(str)} + controller{prepnp(na,acc); prepncp(na,acc,gdy); prepncp(na,acc,jak); prepncp(na,acc,jakby); prepncp(na,acc,kiedy); prepncp(na,acc,że); prepncp(na,acc,żeby)} + controllee{xp(mod)}
zareagować: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(na,acc)}
zareagować: perf: subj{np(str)} + {prepnp(z,inst)}
zarejestrować: perf: subj{np(str)} + {cp(int)}
zarejestrować: perf: subj{np(str)} + {cp(jak)}
zarejestrować: perf: subj{np(str)} + {cp(że)}
zarejestrować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zarejestrować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zarejestrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zarejestrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zarejestrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zarejestrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
zarejestrować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zarejestrować: perf: subj{np(str)} + {or}
zarejestrować się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
zarejestrować się: perf: subj{np(str)} + {prepnp(do,gen)}
zarejestrować się: perf: subj{np(str)} + {prepnp(na,acc)}
zarejestrować się: perf: subj{np(str)} + {prepnp(u,gen)}
zarejestrować się: perf: subj{np(str)} + {xp(locat)}
zarezerwować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zarezerwować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zarezerwować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zaręczać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
zaręczać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str)}
zaręczać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {or}
zaręczać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
zaręczać: imperf: subj{np(str)} + {np(str)} + {cp(że)}
zaręczać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zaręczać się: imperf: subj{np(str)} + {prepnp(z,inst)}
zaręczyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
zaręczyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {np(str)}
zaręczyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {or}
zaręczyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)}
zaręczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zaręczyć się: perf: subj{np(str)} + {prepnp(z,inst)}
zarobić: perf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zarobić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zarobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zarobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
zarobić: perf: subj{np(str)} + {prepnp(od,gen)} + {prepnp(po,loc)}
zarobić: perf: subj{np(str)} + {prepnp(od,gen)} + {prepnp(w,acc)}
zarosnąć: perf: subj{np(str)} + {np(dat)} + {np(inst)}
zarosnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zarosnąć się: perf: subj{np(str)} + {np(dat)}
zarysować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zarysować się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
zarysować się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zarysowywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zarysowywać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
zarysowywać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zaryzykować: perf: subj{np(str)} + {cp(że)}
zaryzykować: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
zaryzykować: perf: subj{np(str)} + {np(str); ncp(str,że)}
zarządzać: imperf: subj{np(str)} + {advp(pron)}
zarządzać: imperf: subj{np(str)} + {cp(że)}
zarządzać: imperf: subj{np(str)} + {cp(żeby)}
zarządzać: imperf: subj{np(str)} + obj{np(inst)}
zarządzać: imperf: subj{np(str)} + obj{np(str)}
zarządzać: imperf: subj{np(str)} + {or}
zarządzić: perf: subj{np(str)} + {advp(pron)}
zarządzić: perf: subj{np(str)} + {cp(że)}
zarządzić: perf: subj{np(str)} + {cp(żeby)}
zarządzić: perf: subj{np(str)} + obj{np(inst)}
zarządzić: perf: subj{np(str)} + obj{np(str)}
zarządzić: perf: subj{np(str)} + {or}
zarzekać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zarzekać się: imperf: subj{np(str)} + {np(gen)}
zarzekać się: imperf: subj{np(str)} + {or}
zarzucać: imperf: subj{np(str)} + obj{cp(że)} + {np(dat)}
zarzucać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)} + {or}
zarzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zarzucać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zarzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
zarzucić: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
zarzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zarzucić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zarzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przez,acc)}
zarżnąć: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
zarżnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zarżnąć się: perf: subj,controller{np(str)} + controllee{xp(mod)}
zarżnąć się: perf: subj{np(str)} + {np(inst)}
zasądzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zasądzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
zasądzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
zasępić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zasępić się: perf: subj{np(str)} + {np(dat)}
zasępić się: perf: subj{np(str)} + {np(inst)}
zasępić się: perf: subj{np(str)} + {prepnp(nad,inst)}
zasiadać: imperf: subj{np(str)} + {prepnp(do,gen)}
zasiadać: imperf: subj{np(str)} + {prepnp(w,loc)}
zasiadać: imperf: subj{np(str)} + {xp(locat)}
zasiąść: perf: subj{np(str)} + {prepnp(do,gen)}
zasiąść: perf: subj{np(str)} + {prepnp(w,loc)}
zasiąść: perf: subj{np(str)} + {xp(locat)}
zasiedlać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zasiedlić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zasięgnąć: perf: subj{np(str)} + {np(gen)}
zasilać: imperf: subj{np(str)} + {np(inst)} + {refl}
zasilać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zasilać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zasilać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
zasilić: perf: subj{np(str)} + {np(inst)} + {refl}
zasilić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zasilić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zasilić: perf: subj{np(str)} + {prepnp(w,acc)} + {refl}
zaskakiwać: imperf: subj{np(str); cp(int); ncp(str,int)} + obj{np(str)}
zaskakiwać: imperf: subj{np(str); cp(że); ncp(str,że)} + obj{np(str)}
zaskakiwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int)}
zaskakiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
zaskakiwać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zaskarbić: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,jak); ncp(inst,że)} + {np(str)}
zaskarżyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zaskarżyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc)}
zaskarżyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)} + {prepnp(za,acc); prepncp(za,acc,że)}
zaskoczyć: perf: subj{np(str); cp(że); ncp(str,że)} + obj{np(str)}
zaskoczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zaskoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
zaskoczyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zasłabnąć: perf: subj{np(str)} + {comprepnp(z powodu)}
zasłabnąć: perf: subj{np(str)} + {np(dat)}
zasłabnąć: perf: subj{np(str)} + {prepnp(od,gen)}
zasłabnąć: perf: subj{np(str)} + {prepnp(z,gen)}
zasłaniać: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)} + {refl}
zasłaniać: imperf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
zasłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
zasłaniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
zasłonić: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(przed,inst)} + {refl}
zasłonić: perf: subj{np(str)} + {np(inst)} + {prepnp(od,gen)} + {refl}
zasłonić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(od,gen)}
zasłonić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(przed,inst)}
zasługiwać: imperf: subj{np(str)} + {cp(żeby)}
zasługiwać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zasługiwać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
zasłużyć: perf: subj{np(str)} + {cp(żeby)}
zasłużyć: perf: subj{np(str)} + {np(inst); ncp(inst,jak); ncp(inst,że)} + {prepnp(na,acc); prepncp(na,acc,jak); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zasłużyć się: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,jak); ncp(inst,że)}
zasłużyć się: perf: subj{np(str)} + {np(inst); ncp(inst,jak); ncp(inst,że)} + {prepnp(dla,gen)}
zasmucić: perf: subj{cp(int)} + {np(str)}
zasmucić: perf: subj{cp(że)} + {np(str)}
zasmucić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zasmucić: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
zasmucić: perf: subj{np(str)} + {np(str)} + {or}
zasmucić się: perf: subj{np(str)} + {comprepnp(z powodu)}
zasmucić się: perf: subj{np(str)} + {cp(int)}
zasmucić się: perf: subj{np(str)} + {cp(że)}
zasmucić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zasmucić się: perf: subj{np(str)} + {or}
zasnąć: perf: subj{np(str)} + {lexnp(inst,sg,'sen',atr)}
zasnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc); xp(locat)}
zasnąć: perf: subj{np(str)} + {prepnp(nad,inst)}
zasnąć: perf: subj{np(str)} + {prepnp(w,loc)}
zasnąć: perf: subj{np(str)} + {prepnp(z,gen)}
zaspać: perf: subj{np(str)} + obj{np(str)}
zaspać: perf: subj{np(str)} + {preplexnp(na,loc,sg,'start',atr)}
zaspać: perf: subj{np(str)} + {prepnp(do,gen)}
zaspać: perf: subj{np(str)} + {prepnp(na,acc)}
zaspać: perf: subj{np(str)} + {prepnp(z,gen)}
zaspać się: perf: subj{np(str)} + {prepnp(na,acc)}
zaspokajać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaspokajać się: imperf: subj{np(str)} + {np(inst)}
zaspokoić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaspokoić się: perf: subj{np(str)} + {np(inst)}
zastać: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(pred)}
zastać: perf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
zastać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zastać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
zastać: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
zastać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zastać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zastać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zastać: perf: subj{np(str)} + obj{np(str)} + {xp(temp)}
zastać się: perf: subj{np(str)} + {prepnp(w,loc)}
zastanawiać: imperf: subj{cp(int)} + {np(str)}
zastanawiać: imperf: subj{cp(że)} + {np(str)}
zastanawiać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zastanawiać się: imperf: subj{np(str)} + {cp(że)}
zastanawiać się: imperf: subj{np(str)} + {or}
zastanawiać się: imperf: subj{np(str)} + {prepnp(nad,inst); cp(int); prepncp(nad,inst,int); prepncp(nad,inst,że)}
zastanowić: perf: subj{cp(int)} + {np(str)}
zastanowić: perf: subj{cp(że)} + {np(str)}
zastanowić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zastanowić się: perf: subj{np(str)} + {cp(że)}
zastanowić się: perf: subj{np(str)} + {or}
zastanowić się: perf: subj{np(str)} + {prepnp(nad,inst); cp(int); prepncp(nad,inst,int); prepncp(nad,inst,że)}
zastawać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(pred)}
zastawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(nad,inst)}
zastawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zastawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
zastawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen)}
zastawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zastawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zastawać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zastawać: imperf: subj{np(str)} + obj{np(str)} + {xp(temp)}
zastawać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zastawiać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zastawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zastawiać się: imperf: subj{np(str)} + {ncp(inst,że)}
zastawiać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
zastawiać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
zastawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zastawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zastawić się: perf: subj{np(str)} + {np(dat)} + {np(inst)}
zastawić się: perf: subj{np(str)} + {np(inst)} + {prepnp(przed,inst)}
zastąpić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zastąpić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zastąpić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zastępować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zastępować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zastępować: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zastosować: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zastosować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zastosować się: perf: subj{np(str)} + {prepnp(do,gen)}
zastrzec: perf: subj{np(str)} + {cp(żeby)} + {lexnp(dat,_,'siebie',natr)}
zastrzec: perf: subj{np(str)} + obj{cp(że)} + {lexnp(dat,_,'siebie',natr)}
zastrzec: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {lexnp(dat,_,'siebie',natr)}
zastrzec: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zastrzec się: perf: subj{np(str)} + {cp(że)}
zastrzec się: perf: subj{np(str)} + {or}
zastrzec się: perf: subj{np(str)} + {prepnp(przeciw,dat)}
zastrzegać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zastrzegać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
zastrzegać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(dla,gen)}
zastrzegać: imperf: subj{np(str)} + {or}
zastrzegać się: imperf: subj{np(str)} + {cp(że)}
zastrzegać się: imperf: subj{np(str)} + {or}
zastrzelić: perf: subj{np(str)} + {np(inst)} + {refl}
zastrzelić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zastrzelić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zastrzelić: perf: subj{np(str)} + {prepnp(z,gen)} + {refl}
zasugerować: perf: subj{np(str)} + {np(dat)} + {or}
zasugerować: perf: subj{np(str)} + obj{cp(int)} + {np(dat)} + {np(inst)}
zasugerować: perf: subj{np(str)} + obj{cp(jakoby)} + {np(dat)} + {np(inst)}
zasugerować: perf: subj{np(str)} + obj{cp(żeby)} + {np(dat)} + {np(inst)}
zasugerować: perf: subj{np(str)} + obj{cp(że)} + {np(dat)} + {np(inst)}
zasugerować: perf: subj{np(str)} + obj{np(str); ncp(str,że); ncp(str,żeby)} + {np(dat)} + {np(inst)}
zasugerować się: perf: subj{np(str)} + {cp(że)}
zasugerować się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zasunąć: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zasunąć: perf: subj{np(str)} + {np(dat)} + {np(inst)}
zasunąć: perf: subj{np(str)} + {np(dat)} + {or}
zasunąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(adl)}
zasunąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zasunąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
zasunąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
zasunąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zasunąć się: perf: subj{np(str)} + {np(inst)}
zasunąć się: perf: subj{np(str)} + {prepnp(za,inst)}
zasunąć się: perf: subj{np(str)} + {xp(adl)}
zasuwać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zasuwać: imperf: subj{np(str)} + {np(dat)} + {np(inst)}
zasuwać: imperf: subj{np(str)} + {np(dat)} + {or}
zasuwać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)} + {xp(adl)}
zasuwać: imperf: subj{np(str)} + {np(inst)}
zasuwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zasuwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(adl)}
zasuwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
zasuwać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zasuwać: imperf: subj{np(str)} + {prepnp(do,gen)}
zasuwać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zasuwać się: imperf: subj{np(str)} + {np(inst)}
zasuwać się: imperf: subj{np(str)} + {prepnp(za,inst)}
zasuwać się: imperf: subj{np(str)} + {xp(adl)}
zasypać: perf: subj{np(str)} + {np(inst)} + {refl}
zasypać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zasypać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zasypać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zasypać: perf: subj{np(str)} + {xp(locat)} + {refl}
zasypać się: perf: subj{np(str)} + {np(dat)}
zasypiać: imperf: subj{np(str)} + {lexnp(inst,sg,'sen',atr)}
zasypiać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc); xp(locat)}
zasypiać: imperf: subj{np(str)} + obj{lexnp(str,pl,'gruszka',natr)} + {preplexnp(w,loc,sg,'popiół',natr)}
zasypiać: imperf: subj{np(str)} + {prepnp(do,gen)}
zasypiać: imperf: subj{np(str)} + {prepnp(na,acc)}
zasypiać: imperf: subj{np(str)} + {prepnp(nad,inst)}
zasypiać: imperf: subj{np(str)} + {prepnp(w,loc)}
zasypiać: imperf: subj{np(str)} + {prepnp(z,gen)}
zasypywać: imperf: subj{np(str)} + {np(inst)} + {refl}
zasypywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zasypywać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zasypywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zasypywać: imperf: subj{np(str)} + {xp(locat)} + {refl}
zasypywać się: imperf: subj{np(str)} + {np(dat)}
zaszczepić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zaszczepić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaszczepić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zaszczepić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zaszczepić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
zaszczepić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,inst)}
zaszczepić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zaszczepić się: perf: subj{np(str)} + {np(inst)}
zaszczepić się: perf: subj{np(str)} + {prepnp(na,acc)}
zaszczepić się: perf: subj{np(str)} + {prepnp(od,gen)}
zaszczepić się: perf: subj{np(str)} + {prepnp(przeciw,dat)}
zaszczycić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zaszkodzić: perf: subj,controllee{infp(_)} + controller{np(dat)}
zaszkodzić: perf: subj{cp(gdy)} + {np(dat)}
zaszkodzić: perf: subj{cp(jak)} + {np(dat)}
zaszkodzić: perf: subj{cp(jeśli)} + {np(dat)}
zaszkodzić: perf: subj{cp(kiedy)} + {np(dat)}
zaszkodzić: perf: subj{cp(że)} + {np(dat)}
zaszkodzić: perf: subj{np(str); ncp(str,że)} + {np(dat)}
zaszkodzić: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zaszkodzić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zaszkodzić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc); prepncp(w,loc,że)}
zaszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(pod,acc)}
zaszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zaszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zaszyć się: perf: subj{np(str)} + {prepnp(w,acc)}
zaszyć się: perf: subj{np(str)} + {xp(locat)}
zaśmiać się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {or}
zaśmiać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {or}
zaśmiecać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zaśpiewać: perf: subj{np(str)} + {cp(że)}
zaśpiewać: perf: subj{np(str)} + {np(dat)} + {np(str)} + {prepnp(za,acc)}
zaśpiewać: perf: subj{np(str)} + {np(dat)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zaśpiewać: perf: subj{np(str)} + {np(inst)} + {or}
zaśpiewać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zaświadczać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zaświadczać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
zaświadczać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
zaświadczać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
zaświadczać: imperf: subj{np(str)} + {or}
zaświadczyć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zaświadczyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
zaświadczyć: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
zaświadczyć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
zaświadczyć: perf: subj{np(str)} + {or}
zaświecić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
zaświecić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(po,loc)}
zaświecić: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,acc)}
zaświecić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaświecić: imperf: subj{np(str)} + {prepnp(w,acc)} + {or}
zaświtać: perf: subj{cp(żeby)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',atr)}
zaświtać: perf: subj{cp(że)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',atr)}
zaświtać: perf: subj{np(str)} + {np(dat)}
zaświtać: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',atr)}
zaświtać: perf: subj{np(str)} + {prepnp(dla,gen)}
zataczać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
zataczać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
zataczać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zataczać się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
zataić: perf: subj{np(str)} + obj{ncp(str,że)} + {prepnp(przed,inst)}
zataić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
zatajać: imperf: subj{np(str)} + obj{cp(int)} + {prepnp(przed,inst)}
zatajać: imperf: subj{np(str)} + obj{cp(że)} + {prepnp(przed,inst)}
zatajać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {prepnp(przed,inst)}
zatańczyć: perf: subj{np(str)} + {np(dat)} + {preplexnp(przed,inst,pl,'oko',natr)}
zatańczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {xp(locat)}
zatańczyć: perf: subj{np(str)} + {prepnp(do,gen)}
zatańczyć: perf: subj{np(str)} + {prepnp(przy,loc)} + {prepnp(z,inst)}
zatapiać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
zatapiać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zatapiać się: perf: subj{np(str)} + {prepnp(w,loc)}
zatelefonować: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(o,acc)} + {prepnp(od,gen); xp(abl)}
zatelefonować: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {comprepnp(w sprawie)}
zatelefonować: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {cp(int); cp(że); cp(żeby)}
zatelefonować: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {prepnp(po,acc)}
zatelefonować: perf: subj{np(str)} + {prepnp(do,gen); xp(adl)} + {prepnp(od,gen); xp(abl)} + {prepnp(z,inst); prepncp(z,inst,że)}
zatęsknić: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zatęsknić: perf: subj{np(str)} + {prepnp(za,inst); prepncp(za,inst,int); prepncp(za,inst,że); prepncp(za,inst,żeby)}
zatęsknić się: perf: {np(dat)} + {prepnp(do,gen)}
zatęsknić się: perf: {np(dat)} + {prepnp(za,inst)}
zatkać: perf: {np(str)} + {cp(gdy)}
zatkać: perf: {np(str)} + {cp(jak)}
zatkać: perf: {np(str)} + {cp(kiedy)}
zatkać: perf: {np(str)} + {prepnp(z,gen)}
zatkać: perf: subj{cp(że)} + {np(str)}
zatkać: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {lexnp(str,sg,'dech',natr)} + {preplexnp(w,loc,_,'pierś',natr)}
zatkać: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zatkać: perf: subj{np(str)} + {np(inst)} + {refl}
zatkać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zatkać: perf: subj{np(str)} + {prepnp(na,acc)} + {lexnp(str,pl,'ucho',natr)}
zatkać się: perf: subj{np(str)} + {np(inst)}
zatkać się: perf: subj{np(str)} + {prepnp(od,gen)}
zatknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(do,gen)}
zatknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zatknąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(za,acc)}
zatknąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zatoczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
zatoczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
zatoczyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zatoczyć się: perf: subj{np(str)} + {np(dat)} + {xp(adl)}
zatonąć: perf: subj{np(str)} + {prepnp(po,acc)} + {prepnp(w,loc)}
zatopić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,loc)}
zatopić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zatopić się: perf: subj{np(str)} + {prepnp(w,loc)}
zatracać: imperf: subj{np(str)} + obj{np(str)}
zatracać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zatracić: perf: subj{np(str)} + obj{np(str)}
zatracić się: perf: subj{np(str)} + {prepnp(w,loc)}
zatroszczyć się: perf: subj{np(str)} + {cp(int)}
zatroszczyć się: perf: subj{np(str)} + {cp(że)}
zatroszczyć się: perf: subj{np(str)} + {cp(żeby)}
zatroszczyć się: perf: subj{np(str)} + {np(inst)}
zatroszczyć się: perf: subj{np(str)} + {or}
zatroszczyć się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że); prepncp(o,acc,żeby)}
zatruć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zatruć się: perf: subj{np(str)} + {np(inst)}
zatrudniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zatrudniać: imperf: subj{np(str)} + obj{np(str)} + {advp(misc)}
zatrudniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zatrudniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc); prepnp(u,gen); prepnp(w,loc)}
zatrudniać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
zatrudniać się: imperf: subj{np(str)} + {prepnp(przy,loc); prepnp(u,gen); prepnp(w,loc)}
zatrudnić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zatrudnić: perf: subj{np(str)} + obj{np(str)} + {advp(misc)}
zatrudnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zatrudnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc); prepnp(u,gen); prepnp(w,loc)}
zatrudnić się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
zatrudnić się: perf: subj{np(str)} + {prepnp(przy,loc); prepnp(u,gen); prepnp(w,loc)}
zatruwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zatruwać się: imperf: subj{np(str)} + {np(inst)}
zatrzaskiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(przed,inst,sg,'nos',natr)}
zatrzaskiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
zatrzaskiwać: imperf: subj{np(str)} + {xp(locat)} + {refl}
zatrzaskiwać się: imperf: subj{np(str)} + {prepnp(za,inst)} + {xp(mod)}
zatrzaskiwać się: imperf: subj{np(str)} + {xp(locat)}
zatrzasnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {preplexnp(przed,inst,sg,'nos',natr)}
zatrzasnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,inst)}
zatrzasnąć: perf: subj{np(str)} + {xp(locat)} + {refl}
zatrzasnąć się: perf: subj{np(str)} + {prepnp(za,inst)} + {xp(mod)}
zatrzasnąć się: perf: subj{np(str)} + {xp(locat)}
zatrząść: perf: {np(inst)}
zatrząść: perf: obj{np(str)}
zatrząść: perf: subj{np(str)} + {np(inst)}
zatrząść się: perf: subj,controller{np(str)} + controllee{prepnp(jak,str)}
zatrząść się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
zatrząść się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zatrzeć: perf: subj{np(str); ncp(str,że)} + obj{np(str); ncp(str,że)} + {np(inst)}
zatrzeć: perf: subj{np(str)} + {prepnp(na,acc)} + {lexnp(str,pl,'ręka',natr)}
zatrzeć się: perf: subj{np(str); ncp(str,że)} + {np(dat)}
zatrzymać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zatrzymać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zatrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zatrzymać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zatrzymać się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)}
zatrzymać się: perf: subj{np(str)} + {prepnp(na,loc)}
zatrzymać się: perf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,int)}
zatrzymać się: perf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
zatrzymywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zatrzymywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zatrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zatrzymywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zatrzymywać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)}
zatrzymywać się: imperf: subj{np(str)} + {prepnp(na,loc)}
zatrzymywać się: imperf: subj{np(str)} + {prepnp(przy,loc); prepncp(przy,loc,int)}
zatrzymywać się: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
zatwierdzać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zatwierdzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zatwierdzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zatwierdzić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zatwierdzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zatwierdzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zatwierdzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zatykać: perf: {np(str)} + {cp(gdy)}
zatykać: perf: {np(str)} + {cp(jak)}
zatykać: perf: {np(str)} + {cp(kiedy)}
zatykać: perf: {np(str)} + {prepnp(w,loc)}
zatykać: perf: {np(str)} + {prepnp(z,gen)}
zatykać: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {lexnp(str,sg,'dech',natr)} + {preplexnp(w,loc,_,'pierś',natr)}
zatykać: perf: subj{np(str)} + {np(inst)} + {refl}
zatykać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zatykać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zatykać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zatykać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc)}
zatykać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zatykać: perf: subj{np(str)} + {prepnp(na,acc)} + {lexnp(str,pl,'ucho',natr)}
zatykać się: perf: subj{np(str)} + {np(inst)}
zatykać się: perf: subj{np(str)} + {prepnp(od,gen)}
zatytułować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{or}
zatytułować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zaufać: perf: subj{np(str)} + {np(dat)} + {comprepnp(w kwestii)}
zaufać: perf: subj{np(str)} + {np(dat)} + {prepncp(w,acc,że)}
zaufać: perf: subj{np(str)} + {prepnp(w,loc)}
zauroczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zauroczyć się: perf: subj{np(str)} + {np(inst)}
zauważać: imperf: subj{np(str)} + {cp(jak)}
zauważać: imperf: subj{np(str)} + obj{cp(int); cp(że)}
zauważać: imperf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
zauważać: imperf: subj{np(str)} + {or}
zauważyć: perf: subj{np(str)} + {cp(jak)}
zauważyć: perf: subj{np(str)} + obj{cp(int); cp(że)}
zauważyć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
zauważyć: perf: subj{np(str)} + {or}
zawadzać: imperf: subj{ncp(str,że)} + {np(dat)}
zawadzać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
zawadzać: imperf: subj{np(str)} + {np(dat)} + {xp(mod)}
zawadzić: perf: subj{cp(żeby2)}
zawadzić: perf: subj{infp(_)}
zawadzić: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
zawahać się: perf: subj,controller{np(str)} + controllee{infp(_)}
zawahać się: perf: subj{np(str)} + {cp(int)}
zawahać się: perf: subj{np(str)} + {cp(żeby)}
zawahać się: perf: subj{np(str)} + {cp(żeby2)}
zawahać się: perf: subj{np(str)} + {prepncp(nad,inst,żeby)}
zawahać się: perf: subj{np(str)} + {prepncp(przed,inst,żeby2)}
zawahać się: perf: subj{np(str)} + {prepnp(między,inst)}
zawahać się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int)}
zawahać się: perf: subj{np(str)} + {prepnp(przed,inst)}
zawalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zawalić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zawalić się: perf: subj{np(str)} + {np(dat)} + {prepnp(pod,inst)}
zaważyć: perf: subj{np(str); ncp(str,że)} + {prepnp(na,loc); prepncp(na,loc,że)}
zawdzięczać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zawdzięczać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat); ncp(dat,że)}
zawetować: perf: subj{np(str)} + obj{np(str)}
zawęzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
zawęzić się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
zawężać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
zawężać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że)}
zawiać: perf: {np(dat)} + {np(inst)} + {xp(locat)}
zawiać: perf: {np(inst)} + {prepnp(od,gen)} + {xp(adl)}
zawiać: perf: subj{E} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zawiać: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zawiać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zawiać: perf: subj{np(str)} + {prepnp(w,acc)}
zawiadamiać: imperf: subj{np(str)} + obj{np(str)} + {cp(int)}
zawiadamiać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
zawiadamiać: imperf: subj{np(str)} + obj{np(str)} + {or}
zawiadamiać: imperf: subj{np(str)} + obj{np(str)} + {prepncp(o,loc,int)}
zawiadamiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)}
zawiadomić: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
zawiadomić: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zawiadomić: perf: subj{np(str)} + obj{np(str)} + {or}
zawiadomić: perf: subj{np(str)} + obj{np(str)} + {prepncp(o,loc,int)}
zawiadomić: perf: subj{np(str)} + obj{np(str)} + {prepncp(o,loc,że)}
zawiadomić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,loc)}
zawiązać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zawiązać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
zawiązać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zawiązać się: perf: subj{np(str)} + {prepnp(między,inst)}
zawiązywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zawiązywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zawiązywać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zawiązywać się: imperf: subj{np(str)} + {prepnp(między,inst)}
zawierać: imperf: subj{np(str)} + {np(str)}
zawierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zawierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zawierać się: imperf: subj{np(str)} + {prepnp(między,inst)}
zawierać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że); prepncp(w,loc,żeby)}
zawiesić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zawiesić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
zawiesić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zawiesić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zawiesić: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
zawiesić się: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zawieszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zawieszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
zawieszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zawieszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zawieszać: imperf: subj{np(str)} + {prepnp(w,loc)} + {refl}
zawieszać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zawieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zawieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zawieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zawieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zawieść się: perf: subj{np(str)} + {prepnp(na,loc)}
zawieźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zawijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zawijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zawijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zawijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
zawijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zawijać: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
zawijać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
zawijać się: imperf: subj{np(str)} + {prepnp(z,inst)}
zawijać się: imperf: subj{np(str)} + {xp(abl)}
zawijać się: imperf: subj{np(str)} + {xp(adl)}
zawijać się: imperf: subj{np(str)} + {xp(locat)}
zawinić: perf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zawinić: perf: subj{np(str)} + {np(dat)} + {np(str)}
zawinić: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc); prepncp(w,loc,że)}
zawinić: perf: subj{np(str)} + {np(inst)} + {prepnp(przeciw,dat)}
zawinić: perf: subj{np(str)} + {np(inst)} + {prepnp(wobec,gen)}
zawinić: perf: subj{np(str)} + {prepnp(przeciw,dat)} + {nonch}
zawinić: perf: subj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(w,loc)}
zawinić: perf: subj{np(str)} + {prepnp(przed,inst)} + {nonch}
zawinić: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(wobec,gen)}
zawinić: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(względem,gen)}
zawinić: perf: subj{np(str)} + {prepnp(wobec,gen)} + {nonch}
zawinić: perf: subj{np(str)} + {prepnp(względem,gen)} + {nonch}
zawisnąć: perf: subj{np(str)} + {prepnp(nad,inst)}
zawisnąć: perf: subj{np(str)} + {prepnp(na,loc)}
zawisnąć: perf: subj{np(str)} + {prepnp(na,loc)} + {lexnp(inst,sg,'wzrok',natr)}
zawisnąć: perf: subj{np(str)} + {prepnp(od,gen)}
zawisnąć: perf: subj{np(str)} + {prepnp(z,gen)}
zawisnąć: perf: subj{np(str)} + {xp(locat)}
zawitać: perf: subj{np(str)} + {prepnp(do,gen)}
zawitać: perf: subj{np(str)} + {xp(abl)}
zawitać: perf: subj{np(str)} + {xp(adl)}
zawitać: perf: subj{np(str)} + {xp(locat)}
zawładnąć: perf: subj{np(str)} + obj{np(inst)}
zawodzić: imperf: subj{np(str)} + {np(str)}
zawodzić: imperf: subj{np(str)} + obj{np(str)}
zawodzić: imperf: subj{np(str)} + {or}
zawodzić się: imperf: subj{np(str)} + {prepnp(na,loc)}
zawojować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zawołać: imperf: subj{np(str)} + {np(inst)} + {or}
zawołać: imperf: subj{np(str)} + obj{np(str)}
zawołać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(int)}
zawołać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(że)}
zawołać: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
zawołać: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
zawołać: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(żeby)}
zawołać: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
zawołać: imperf: subj{np(str)} + {prepnp(za,inst)} + {or}
zawracać: imperf: subj{np(str)} + {np(dat)} + {np(inst); ncp(inst,int); ncp(inst,że); ncp(inst,żeby)} + {np(str)}
zawracać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,_,'głowa',natr)}
zawracać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zawracać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zawracać się: imperf: subj{np(str)}
zawrócić: perf: subj{np(str)} + {np(dat)} + {preplexnp(w,loc,sg,'głowa',natr)}
zawrócić: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zawrócić: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
zawrzeć: perf: subj{np(str)} + {np(inst)}
zawrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zawrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zawrzeć: perf: {xp(locat)}
zawrzeć się: perf: subj{np(str)} + {prepnp(między,inst)}
zawrzeć się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że); prepncp(w,loc,żeby)}
zawstydzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zawstydzić się: perf: subj{np(str)} + {cp(gdy)}
zawstydzić się: perf: subj{np(str)} + {cp(kiedy)}
zawstydzić się: perf: subj{np(str)} + {cp(że)} + {or}
zawstydzić się: perf: subj{np(str)} + {np(gen); ncp(gen,że)}
zawstydzić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {or}
zawstydzić się: perf: subj{np(str)} + {prepnp(za,acc)} + {or}
zawyżać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(o,acc)}
zawziąć się: perf: subj,controller{np(str)} + controllee{infp(_)}
zawziąć się: perf: subj{np(str)} + {cp(że)}
zawziąć się: perf: subj{np(str)} + {cp(żeby)}
zawziąć się: perf: subj{np(str)} + {or}
zawziąć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zazdrościć: imperf: subj{np(str)} + {np(dat)} + {np(gen); ncp(gen,że)}
zaznaczać: perf: subj{np(str)} + {cp(int)}
zaznaczać: perf: subj{np(str)} + {cp(że)}
zaznaczać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
zaznaczać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
zaznaczać: perf: subj{np(str)} + {or}
zaznaczać się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
zaznaczać się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
zaznaczać się: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
zaznaczyć: perf: subj{np(str)} + {cp(int)}
zaznaczyć: perf: subj{np(str)} + {cp(że)}
zaznaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
zaznaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
zaznaczyć: perf: subj{np(str)} + {or}
zaznaczyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)}
zaznaczyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,loc)}
zaznaczyć się: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
zaznać: perf: subj{np(str)} + {np(gen)}
zaznajomić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zaznajomić się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zażądać: perf: subj{np(str)} + {np(gen)} + {prepnp(od,gen)}
zażądać: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(żeby)}
zażądać: perf: subj{np(str)} + {prepnp(od,gen)} + {ncp(gen,żeby)}
zażegnać: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst)}
zażyć: perf: subj{np(str)} + obj{np(gen)}
zażyć: perf: subj{np(str)} + obj{np(part)}
zażyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zażyć: perf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,sg,'mańka',natr)}
zażywać: imperf: subj{np(str)} + {np(gen)}
zażywać: imperf: subj{np(str)} + obj{np(part)}
zażywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {preplexnp(z,gen,sg,'mańka',natr)}
zbadać: perf: subj{np(str)} + obj{cp(int)} + {np(inst)}
zbadać: perf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(inst)}
zbadać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zbadać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zbadać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zbadać się: perf: subj{np(str)} + {prepnp(na,acc)}
zbadać się: perf: subj{np(str)} + {prepnp(u,gen)}
zbadać się: perf: subj{np(str)} + {xp(locat)}
zbawić: perf: subj{np(str)} + obj{np(str)} + {fixed('ode złego')}
zbawić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(od,gen)}
zbawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)} + {prepnp(przez,acc)}
zbić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {preplexnp(z,gen,sg,'pantałyk',natr)}
zbić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {preplexnp(z,gen,sg,'trop',natr)}
zbić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {fixed('na kwaśne jabłko')}
zbić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {preplexnp(na,acc,sg,'miazga',atr)}
zbić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
zbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
zbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)} + {lexnp(dat,_,'siebie',natr)}
zbić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zbić się: perf: subj{np(str)} + {prepnp(w,acc)}
zbiec: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zbiec: perf: subj{np(str)} + {prepnp(z,gen)}
zbiec: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zbiec się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)} + {preplexnp(w,loc,sg,'czas',natr)}
zbiec się: perf: subj{np(str)} + {xp(adl)}
zbiec się: perf: subj{np(str)} + {xp(locat)}
zbiegać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zbiegać: imperf: subj{np(str)} + {prepnp(z,gen)}
zbiegać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zbiegać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)} + {preplexnp(w,loc,sg,'czas',natr)}
zbiegać się: imperf: subj{np(str)} + {xp(adl)}
zbiegać się: imperf: subj{np(str)} + {xp(locat)}
zbierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
zbierać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
zbierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zbierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
zbierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zbierać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zbierać się: imperf: {np(dat)} + {prepnp(na,acc)}
zbierać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
zbierać się: imperf: subj{E} + {prepnp(na,acc)}
zbierać się: imperf: subj{np(str)} + {cp(żeby)} + {preplexnp(w,loc,_,'siebie',natr)}
zbierać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zbierać się: imperf: subj{np(str)} + {prepnp(u,gen)}
zbierać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zbierać się: imperf: subj{np(str)} + {xp(abl)}
zbierać się: imperf: subj{np(str)} + {xp(adl)}
zbierać się: imperf: subj{np(str)} + {xp(locat)}
zbijać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {preplexnp(z,gen,sg,'pantałyk',natr)}
zbijać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {preplexnp(z,gen,sg,'trop',natr)}
zbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,acc,że)}
zbijać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zbijać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zbijać się: imperf: subj{np(str)} + {prepnp(z,gen)}
zbliżać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zbliżać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zbliżyć: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zbliżyć się: imperf: subj{np(str)} + {prepnp(do,gen)}
zbłądzić: perf: subj{np(str)} + {xp(adl)}
zbłądzić: perf: subj{np(str)} + {xp(locat)}
zboczyć: perf: subj{np(str)} + {prepnp(z,gen)}
zboczyć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)}
zbroić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zbroić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zbroić: imperf: subj{np(str)} + {prepnp(w,acc)} + {refl}
zbroić: perf: subj{np(str)} + obj{nonch}
zbudować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zbudować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zbudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zbudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zbudować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zbudzić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
zbudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
zbudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(wśród,gen)}
zbudzić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
zbudzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zbudzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zbudzić się: perf: subj{np(str)} + {comprepnp(z powodu)}
zbudzić się: perf: subj{np(str)} + {prepnp(do,gen)}
zbudzić się: perf: subj{np(str)} + {prepnp(między,inst)}
zbudzić się: perf: subj{np(str)} + {prepnp(na,acc)}
zbudzić się: perf: subj{np(str)} + {prepnp(od,gen)}
zbudzić się: perf: subj{np(str)} + {prepnp(u,gen)}
zbudzić się: perf: subj{np(str)} + {prepnp(w,loc)}
zbudzić się: perf: subj{np(str)} + {prepnp(z,gen)}
zburzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zburzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zburzyć się: perf: subj{np(str)} + {np(dat)}
zburzyć się: perf: subj{np(str)} + {prepnp(w,loc)}
zbyć: perf: subj{np(str)} + {np(dat)} + {np(part)}
zbyć: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zbyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(po,loc)}
zbyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zbyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {or}
zbyć się: perf: subj{np(str)} + {np(gen)} + {prepnp(dla,gen)}
zbywać: imperf: subj{np(str)} + {np(dat)} + {np(str)}
zbywać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zbywać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
zbywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zbywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zbywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {or}
zbywać się: imperf: subj{np(str)} + {np(gen)} + {prepnp(dla,gen)}
zdać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zdać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zdać: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zdać się: perf: subj,controller{cp(że)} + controllee{np(inst)} + {np(dat)}
zdać się: perf: subj,controller{E} + controllee{infp(imperf)}
zdać się: perf: subj,controller{np(str)} + controllee{adjp(pred)} + {np(dat)}
zdać się: perf: subj,controller{np(str)} + controllee{np(inst)} + {np(dat)}
zdać się: perf: subj{cp(że)} + {np(dat)}
zdać się: perf: subj{np(str)} + {prepnp(na,acc)}
zdarzać: imperf: subj{np(str)} + {cp(że)} + {xp(temp)}
zdarzać się: imperf: subj,controllee{infp(_)} + controller{np(dat)} + {xp(temp)}
zdarzać się: imperf: subj{cp(żeby)} + {np(dat)} + {xp(temp)}
zdarzać się: imperf: subj{cp(że)} + {np(dat)} + {xp(temp)}
zdarzać się: imperf: subj{np(str)} + {np(dat)} + {xp(temp)}
zdarzyć: perf: subj{np(str)} + {cp(że)} + {xp(temp)}
zdarzyć się: perf: subj,controllee{infp(_)} + controller{np(dat)} + {xp(temp)}
zdarzyć się: perf: subj{cp(żeby)} + {np(dat)} + {xp(temp)}
zdarzyć się: perf: subj{cp(że)} + {np(dat)} + {xp(temp)}
zdarzyć się: perf: subj{np(str)} + {np(dat)} + {xp(temp)}
zdarzyć się: perf: subj{np(str)} + {xp(locat)}
zdawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zdawać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zdawać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zdawać się: imperf: subj,controller{cp(że)} + controllee{np(inst)} + {np(dat)}
zdawać się: imperf: subj,controller{E} + controllee{infp(imperf)}
zdawać się: imperf: subj,controller{np(str)} + controllee{adjp(pred)} + {np(dat)}
zdawać się: imperf: subj,controller{np(str)} + controllee{np(inst)} + {np(dat)}
zdawać się: imperf: subj{cp(że)} + {np(dat)}
zdawać się: imperf: subj{np(str)} + {prepnp(na,acc)}
zdążać: imperf: subj,controller{np(str)} + controllee{infp(_)}
zdążać: imperf: subj{np(str)} + {cp(żeby)}
zdążać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zdążać: imperf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
zdążać: imperf: subj{np(str)} + {prepnp(za,inst)}
zdążać: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)}
zdążać: imperf: subj{np(str)} + {xp(adl)}
zdążyć: perf: subj,controller{np(str)} + controllee{infp(_)}
zdążyć: perf: subj{np(str)} + {prepnp(na,acc)} + {xp(adl)}
zdążyć: perf: subj{np(str)} + {prepnp(za,inst)}
zdążyć: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)}
zdechnąć: perf: subj{np(str)} + {lexnp(inst,sg,'śmierć',atr)}
zdechnąć: perf: subj{np(str)} + {np(dat)} + {comprepnp(z powodu)}
zdechnąć: perf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'skutek',natr)}
zdechnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zdechnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
zdechnąć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zdechnąć: perf: subj{np(str)} + {prepnp(za,acc)}
zdecydować: perf: subj,controller{np(str)} + controllee{infp(_)}
zdecydować: perf: subj{np(str)} + {comprepnp(w sprawie)}
zdecydować: perf: subj{np(str)} + {cp(int)}
zdecydować: perf: subj{np(str)} + {cp(że)}
zdecydować: perf: subj{np(str)} + {cp(żeby)}
zdecydować: perf: subj{np(str); ncp(str,że)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zdecydować: perf: subj{np(str)} + {or}
zdecydować: perf: subj{np(str)} + {prepncp(o,loc,żeby)}
zdecydować się: perf: subj,controller{np(str)} + controllee{infp(_)}
zdecydować się: perf: subj{np(str)} + {cp(int)}
zdecydować się: perf: subj{np(str)} + {cp(żeby)}
zdecydować się: perf: subj{np(str)} + {or}
zdecydować się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zdefiniować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
zdefiniować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zdefiniować: perf: subj{np(str)} + obj{cp(int); ncp(str,int)}
zdefiniować: perf: subj{np(str)} + obj{cp(że); ncp(str,że)}
zdefiniować: perf: subj{np(str)} + obj{np(str)}
zdefiniować: perf: subj{np(str)} + {or}
zdejmować: imperf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
zdejmować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zdejmować: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zdenerwować: perf: subj{cp(gdy)} + {np(str)}
zdenerwować: perf: subj{cp(jak)} + {np(str)}
zdenerwować: perf: subj{cp(kiedy)} + {np(str)}
zdenerwować: perf: subj{cp(że)} + {np(str)}
zdenerwować: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zdenerwować: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zdenerwować się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zdenerwować się: perf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
zdenerwować się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
zdenerwować się: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
zdenerwować się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
zdenerwować się: perf: subj{np(str)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
zdeptać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zderzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zderzać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zderzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zderzyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zdjąć: perf: subj{np(str)} + {np(str)} + {prepnp(z,gen)}
zdjąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zdjąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zdławić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zdławić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zdławić się: perf: subj{np(str)} + {np(inst)}
zdmuchnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
zdmuchnąć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
zdmuchnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zdobić: imperf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
zdobić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zdobyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zdobyć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zdobywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zdobywać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zdołać: perf: subj,controller{np(str)} + controllee{infp(_)}
zdominować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zdradzać: imperf: subj{np(str)} + {np(dat)} + {np(str)} + {or}
zdradzać: imperf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)}
zdradzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zdradzać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zdradzać się: imperf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
zdradzać się: imperf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
zdradzać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zdradzać się: imperf: subj{np(str)} + {or}
zdradzać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zdradzić: perf: subj{np(str)} + {np(dat)} + {np(str)} + {or}
zdradzić: perf: subj{np(str)} + obj{np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)} + {np(dat)}
zdradzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zdradzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zdradzić się: perf: subj,controller{np(str)} + controllee{prepadjp(jako,str)} + {np(dat)}
zdradzić się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)} + {np(dat)}
zdradzić się: perf: subj{np(str)} + {np(inst)} + {cp(int)}
zdradzić się: perf: subj{np(str)} + {np(inst)} + {cp(że)}
zdradzić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(przed,inst)}
zdradzić się: perf: subj{np(str)} + {or}
zdradzić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
zdradzić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen)}
zdradzić się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zdrowieć: imperf: subj{np(str)} + {prepnp(po,loc)}
zdrowieć: imperf: subj{np(str)} + {prepnp(z,gen)}
zdrzemnąć się: perf: subj{np(str)} + {prepnp(nad,inst)}
zdrzemnąć się: perf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(u,gen)}
zdrzemnąć się: perf: subj{np(str)} + {xp(dur)}
zdrzemnąć się: perf: subj{np(str)} + {xp(locat)}
zdumieć: perf: subj{cp(gdy)} + {np(str)}
zdumieć: perf: subj{cp(int)} + {np(str)}
zdumieć: perf: subj{cp(jak)} + {np(str)}
zdumieć: perf: subj{cp(kiedy)} + {np(str)}
zdumieć: perf: subj{cp(że)} + {np(str)}
zdumieć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zdumieć: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
zdumieć się: perf: subj{np(str)} + {cp(int)}
zdumieć się: perf: subj{np(str)} + {cp(że)}
zdumieć się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zdumieć się: perf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
zdumiewać: imperf: subj{cp(gdy)} + {np(str)}
zdumiewać: imperf: subj{cp(int)} + {np(str)}
zdumiewać: imperf: subj{cp(jak)} + {np(str)}
zdumiewać: imperf: subj{cp(kiedy)} + {np(str)}
zdumiewać: imperf: subj{cp(że)} + {np(str)}
zdumiewać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(str)}
zdumiewać: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {np(str)}
zdumiewać się: imperf: subj{np(str)} + {cp(int)}
zdumiewać się: imperf: subj{np(str)} + {cp(że)}
zdumiewać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zdumiewać się: imperf: subj{np(str)} + {prepnp(nad,inst); prepncp(nad,inst,int); prepncp(nad,inst,że)}
zdusić: perf: subj{np(str)} + obj{np(str)} + {fixed('w zalążku')}
zdusić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zdychać: imperf: subj{np(str)} + {lexnp(inst,sg,'śmierć',atr)}
zdychać: imperf: subj{np(str)} + {np(dat)} + {comprepnp(z powodu)}
zdychać: imperf: subj{np(str)} + {np(dat)} + {preplexnp(na,acc,sg,'skutek',natr)}
zdychać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zdychać: imperf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
zdychać: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zdychać: imperf: subj{np(str)} + {prepnp(za,acc)}
zdzielić: perf: subj{np(str)} + {np(inst)} + {prepnp(między,acc)} + {refl}
zdzielić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
zdzielić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(między,acc)}
zdzielić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(pod,acc)}
zdzielić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
zdzielić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zdzierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
zdzierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
zdzierać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zdzierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {prepnp(z,gen)}
zdzierać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {prepnp(za,acc)}
zdzierać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zdziwić: perf: subj{cp(int)} + {np(str)}
zdziwić: perf: subj{cp(że)} + {np(str)}
zdziwić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
zdziwić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zdziwić się: perf: subj{np(str)} + {cp(int)}
zdziwić się: perf: subj{np(str)} + {cp(że)}
zdziwić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zdziwić się: perf: subj{np(str)} + {or}
zebrać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(abl)}
zebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)}
zebrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zebrać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zebrać się: perf: {np(dat)} + {prepnp(na,acc)}
zebrać się: perf: subj{E} + {prepnp(na,acc)}
zebrać się: perf: subj{np(str)} + {cp(żeby)}
zebrać się: perf: subj{np(str)} + {cp(żeby)} + {preplexnp(w,loc,_,'siebie',natr)}
zebrać się: perf: subj{np(str)} + {prepnp(do,gen)}
zebrać się: perf: subj{np(str)} + {prepnp(w,acc)}
zebrać się: perf: subj{np(str)} + {xp(abl)}
zebrać się: perf: subj{np(str)} + {xp(adl)}
zebrać się: perf: subj{np(str)} + {xp(locat)}
zechcieć: perf: subj,controller{np(str)} + controllee{infp(_)}
zechcieć: perf: subj{np(str)} + {np(str)}
zedrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(do,gen)}
zedrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
zedrzeć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zedrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)} + {prepnp(z,gen)}
zedrzeć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {prepnp(za,acc)}
zedrzeć się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zejść: perf: {comprepnp(na temat)}
zejść: perf: {np(dat)} + {prepnp(na,loc)}
zejść: perf: {prepnp(na,acc)}
zejść: perf: subj{np(str)} + {comprepnp(na temat)}
zejść: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zejść: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zejść: perf: subj{np(str)} + {np(str)}
zejść: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,gen)}
zejść: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zejść: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zejść się: perf: subj{np(str)} + {prepnp(do,gen)}
zejść się: perf: subj{np(str)} + {prepnp(z,inst)}
zejść się: perf: subj{np(str)} + {xp(adl)}
zejść się: perf: subj{np(str)} + {xp(locat)}
zelżeć: perf: subj{np(str)} + {np(dat)}
zemrzeć: perf: subj{np(str)} + {lexnp(inst,sg,'śmierć',atr)}
zemrzeć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zemrzeć: perf: subj{np(str)} + {np(dat)} + {prepnp(wskutek,gen); prepnp(z,gen); comprepnp(z powodu)}
zemrzeć: perf: subj{np(str)} + {prepnp(dla,gen)}
zemrzeć: perf: subj{np(str)} + {prepnp(od,gen)}
zemrzeć: perf: subj{np(str)} + {prepnp(za,acc)}
zemścić się: perf: subj{ncp(str,że)} + {prepnp(na,loc)}
zemścić się: perf: subj{np(str)} + {np(inst)} + {prepnp(nad,inst)} + {prepnp(za,acc)}
zemścić się: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {prepnp(za,acc); prepncp(za,acc,że)}
zepchnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
zepchnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zepsuć: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zepsuć się: perf: subj{np(str)} + {np(dat)} + {comprepnp(z powodu)}
zepsuć się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
zerkać: imperf: subj{np(str)} + {cp(int)}
zerkać: imperf: subj{np(str)} + {cp(jak)}
zerkać: imperf: subj{np(str)} + {cp(że)}
zerkać: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
zerkać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zerkać: imperf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
zerkać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zerkać: imperf: subj{np(str)} + {prepnp(ku,dat)}
zerkać: imperf: subj{np(str)} + {prepnp(przez,acc); prepncp(przez,acc,int)}
zerkać: imperf: subj{np(str)} + {prepnp(przez,acc)} + {xp(adl)}
zerknąć: perf: subj{np(str)} + {cp(int)}
zerknąć: perf: subj{np(str)} + {cp(jak)}
zerknąć: perf: subj{np(str)} + {cp(że)}
zerknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)}
zerknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zerknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(przez,acc)}
zerknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zerknąć: perf: subj{np(str)} + {prepnp(ku,dat)}
zerknąć: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int)}
zerknąć: perf: subj{np(str)} + {prepnp(przez,acc)} + {xp(adl)}
zerwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zerwać: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zerwać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zerwać: perf: subj{np(str)} + {prepnp(z,inst)}
zerwać się: perf: subj{np(str)} + {or}
zerwać się: perf: subj{np(str)} + {prepnp(do,gen)}
zerwać się: perf: subj{np(str)} + {prepnp(z,gen)}
zesłać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
zesłać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {xp(abl)}
zesłać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zespolić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zespolić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zespolić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zespolić się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zespolić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zespolić się: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
ześlizgiwać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
ześlizgiwać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {prepnp(po,loc)}
ześlizgiwać się: imperf: subj{np(str)} + {prepnp(na,loc)} + {xp(abl)} + {xp(adl)}
ześlizgiwać się: imperf: subj{np(str)} + {prepnp(po,loc)} + {xp(adl)}
zetknąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zetknąć się: perf: subj{np(str)} + {prepncp(z,inst,int)}
zetknąć się: perf: subj{np(str)} + {prepncp(z,inst,że)}
zetknąć się: perf: subj{np(str)} + {prepncp(z,inst,żeby2)}
zetknąć się: perf: subj{np(str)} + {prepnp(z,inst)}
zezłościć: perf: subj{cp(gdy)} + {np(str)}
zezłościć: perf: subj{cp(jak)} + {np(str)}
zezłościć: perf: subj{cp(jeśli)} + {np(str)}
zezłościć: perf: subj{cp(kiedy)} + {np(str)}
zezłościć: perf: subj{cp(że)} + {np(str)}
zezłościć: perf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(str)}
zezłościć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zezłościć się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zezłościć się: perf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
zezłościć się: perf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
zezłościć się: perf: subj{np(str)} + {prepnp(na,acc)} + {or}
zezłościć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
zezłościć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
zeznać: perf: subj{np(str)} + {cp(że)}
zeznać: perf: subj{np(str)} + obj{np(str)}
zeznać: perf: subj{np(str)} + {or}
zeznać: perf: subj{np(str)} + {prepnp(przeciw,dat)}
zeznawać: imperf: subj{np(str)} + {np(dat)} + {advp(pron)}
zeznawać: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
zeznawać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zeznawać: imperf: subj{np(str)} + {np(dat)} + {or}
zeznawać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zeznawać: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
zezwalać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
zezwalać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
zezwalać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zezwolić: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
zezwolić: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
zezwolić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zgadać się: perf: {np(dat)} + {comprepnp(co do)}
zgadać się: perf: {np(dat)} + {comprepnp(na temat)}
zgadać się: perf: {np(dat)} + {cp(że)}
zgadać się: perf: {np(dat)} + {prepnp(o,loc); prepncp(o,loc,że)}
zgadać się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,że)} + {prepnp(z,inst)}
zgadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(co do)}
zgadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {comprepnp(na temat)}
zgadać się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
zgadnąć: perf: subj{np(str)} + {cp(int)}
zgadnąć: perf: subj{np(str)} + {cp(że)}
zgadnąć: perf: subj{np(str)} + obj{np(str)}
zgadnąć: perf: subj{np(str)} + {or}
zgadywać: imperf: subj{np(str)} + {cp(int)}
zgadywać: imperf: subj{np(str)} + {cp(że)}
zgadywać: imperf: subj{np(str)} + obj{np(str)}
zgadywać: imperf: subj{np(str)} + {or}
zgadzać się: imperf: subj,controller{np(str)} + controllee{infp(_)}
zgadzać się: imperf: subj{cp(że)}
zgadzać się: imperf: subj{np(str)} + {cp(żeby)}
zgadzać się: imperf: subj{np(str); ncp(str,że)}
zgadzać się: imperf: subj{np(str)} + {prepnp(co do,gen); prepncp(co do,gen,int); prepncp(co do,gen,że); prepncp(co do,gen,żeby)} + {prepnp(z,inst)}
zgadzać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zgadzać się: imperf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)} + {prepnp(z,inst)}
zgadzać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
zgadzać się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że); prepncp(z,inst,żeby)}
zgarnąć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zgarnąć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zgarnąć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zgarnąć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zgarniać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
zgarniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zgarniać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zgarniać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zginać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przed,inst)}
zginać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zginać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zginać się: imperf: subj{np(str)} + {prepnp(ku,dat)}
zginać się: imperf: subj{np(str)} + {prepnp(od,gen)}
zginać się: imperf: subj{np(str)} + {prepnp(pod,inst)}
zginać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zginać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zginąć: perf: subj{np(str)} + {np(dat)} + {preplexnp(z,gen,pl,'oko',natr)}
zginąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
zginąć: perf: subj{np(str)} + {prepnp(na,loc)}
zginąć: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
zginąć: perf: subj{np(str)} + {prepnp(w,loc)}
zginąć: perf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że); prepncp(za,acc,żeby)}
zginąć: perf: subj{np(str)} + {prepnp(z,gen)}
zginąć: perf: subj{np(str)} + {xp(locat)}
zgładzić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)} + {xp(mod)}
zgładzić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(za,inst,sg,'pomoc',ratr)}
zgładzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zgłaszać: imperf: subj{np(str)} + {cp(że)} + {xp(locat)}
zgłaszać: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zgłaszać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zgłaszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zgłaszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zgłaszać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zgłaszać się: imperf: subj{np(str)} + {prepnp(do,gen); prepnp(u,gen); xp(adl); xp(locat)}
zgłaszać się: imperf: subj{np(str)} + {prepnp(na,acc)}
zgłaszać się: imperf: subj{np(str)} + {prepnp(po,acc)}
zgłaszać się: imperf: subj{np(str)} + {prepnp(z,inst)}
zgłębiać: imperf: subj{np(str)} + obj{cp(int)}
zgłębiać: imperf: subj{np(str)} + obj{np(str); ncp(str,int)}
zgłębić: perf: subj{np(str)} + obj{cp(int)}
zgłębić: perf: subj{np(str)} + obj{cp(że)}
zgłębić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zgłosić: perf: subj{np(str)} + {cp(że)} + {xp(locat)}
zgłosić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zgłosić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zgłosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zgłosić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zgłosić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zgłosić się: perf: subj{np(str)} + {prepnp(do,gen); prepnp(u,gen); xp(adl); xp(locat)}
zgłosić się: perf: subj{np(str)} + {prepnp(na,acc)}
zgłosić się: perf: subj{np(str)} + {prepnp(po,acc)}
zgłosić się: perf: subj{np(str)} + {prepnp(z,inst)}
zgłupieć: perf: subj{np(str)} + {preplexnp(na,loc,sg,'punkt',ratr)}
zgłupieć: perf: subj{np(str)} + {prepnp(dla,gen)}
zgłupieć: perf: subj{np(str)} + {prepnp(od,gen)}
zgłupieć: perf: subj{np(str)} + {prepnp(z,gen)}
zgodzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zgodzić się: perf: subj,controller{np(str)} + controllee{infp(_)}
zgodzić się: perf: subj{np(str)} + {cp(żeby)}
zgodzić się: perf: subj{np(str)} + {prepnp(co do,gen); prepncp(co do,gen,int); prepncp(co do,gen,że); prepncp(co do,gen,żeby)} + {prepnp(z,inst)}
zgodzić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)}
zgodzić się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zgodzić się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)} + {prepnp(z,inst)}
zgodzić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
zgodzić się: perf: subj{np(str)} + {prepnp(z,inst)} + {or}
zgodzić się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że); prepncp(z,inst,żeby)}
zgorszyć: perf: subj{cp(int)} + {np(str)}
zgorszyć: perf: subj{cp(że)} + {np(str)}
zgorszyć: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)}
zgorszyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zgorszyć się: perf: subj{np(str)} + {cp(int)}
zgorszyć się: perf: subj{np(str)} + {cp(że)}
zgorszyć się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
zgorszyć się: perf: subj{np(str)} + {or}
zgorszyć się: perf: subj{np(str)} + {prepnp(na,acc)}
zgotować: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zgrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zgrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(od,gen)}
zgrać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
zgrać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zgromadzić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zgromadzić się: perf: subj{np(str)} + {xp(locat)}
zgromić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(że)}
zgromić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc); prepncp(za,acc,że)} + {or}
zgrywać: imperf: subj{np(str)} + {np(str)}
zgrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zgrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(od,gen)}
zgrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {prepnp(z,gen)}
zgrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zgrywać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)}
zgrywać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
zgrywać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
zgrywać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zgrywać się: imperf: subj{np(str)} + {prepnp(z,inst)}
zgrzytać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {xp(mod)}
zgrzytać: imperf: subj{np(str)} + {np(inst)} + {or}
zgrzytać: imperf: subj{np(str)} + {prepnp(na,loc)}
zgrzytać: imperf: subj{np(str)} + {prepnp(pod,inst)}
zgrzytnąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zgrzytnąć: perf: subj{np(str)} + {np(inst)}
zgubić: perf: subj{np(str); ncp(str,że)} + {np(str)}
zgubić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zgubić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(z,gen,pl,'oko',natr)}
zgubić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zgubić się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zgubić się: perf: subj{np(str)} + {np(inst)}
zgubić się: perf: subj{np(str)} + {prepnp(w,loc)}
zidentyfikować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(jako,str)}
zidentyfikować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zidentyfikować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zidentyfikować się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
zidentyfikować się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,że)}
zielenić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zielenić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
zielenić się: imperf: subj{np(str)} + {np(inst)}
zielenić się: imperf: subj{np(str)} + {prepnp(od,gen)}
zielenić się: imperf: subj{np(str)} + {prepnp(z,gen)}
ziewać: imperf: subj{np(str)}
ziewnąć: perf: subj{np(str)}
zimować: imperf: subj{np(str)} + {xp(dur)} + {xp(locat)}
zintegrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
zintegrować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zintegrować się: perf: subj{np(str)} + {prepnp(wokół,gen)}
zintegrować się: perf: subj{np(str)} + {prepnp(z,inst)}
zionąć: imperf: {np(dat)} + {xp(abl)}
zionąć: imperf: {np(inst)} + {prepnp(od,gen)}
zionąć: imperf: {np(inst)} + {xp(locat)}
zionąć: imperf: subj{np(str)} + {np(inst)} + {xp(abl)}
zionąć: imperf: subj{np(str)} + {np(inst)} + {xp(adl)}
zionąć: imperf: subj{np(str)} + {xp(abl)}
zipać: imperf: subj{np(str)} + {fixed('ledwie')}
zipać: imperf: subj{np(str)} + {fixed('ledwo')}
zirytować: imperf: subj{cp(gdy)} + {np(str)}
zirytować: imperf: subj{cp(jak)} + {np(str)}
zirytować: imperf: subj{cp(jeśli)} + {np(str)}
zirytować: imperf: subj{cp(kiedy)} + {np(str)}
zirytować: imperf: subj{cp(że)} + {np(str)}
zirytować: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(str)}
zirytować: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zirytować się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)}
zirytować się: imperf: subj{np(str)} + {or}
zirytować się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
ziścić: perf: subj{np(str)} + obj{np(str)}
ziścić się: perf: subj{np(str)}
zjadać: imperf: subj{np(str)} + obj{np(part)} + {prepnp(na,acc)}
zjadać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zjadać: imperf: subj{np(str)} + {prepnp(na,loc)} + {lexnp(str,pl,'ząb',natr)}
zjawiać się: imperf: subj{np(str)} + {prepnp(u,gen)}
zjawiać się: imperf: subj{np(str)} + {xp(locat)}
zjawić się: perf: subj{np(str)} + {prepnp(u,gen)}
zjawić się: perf: subj{np(str)} + {xp(locat)}
zjechać: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
zjechać: perf: subj{np(str)} + {prepnp(do,gen)}
zjechać: perf: subj{np(str)} + {prepnp(na,acc)}
zjechać: perf: subj{np(str)} + {xp(abl)}
zjechać: perf: subj{np(str)} + {xp(adl)}
zjechać się: perf: subj{np(str)} + {prepnp(do,gen)}
zjechać się: perf: subj{np(str)} + {prepnp(na,acc)}
zjechać się: perf: subj{np(str)} + {prepnp(z,inst)}
zjechać się: perf: subj{np(str)} + {xp(abl)}
zjechać się: perf: subj{np(str)} + {xp(adl)}
zjednać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zjednoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(z,inst)}
zjednoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zjednoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
zjednoczyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
zjednoczyć się: perf: subj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(z,inst)}
zjednoczyć się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zjednoczyć się: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
zjednoczyć się: perf: subj{np(str)} + {prepnp(wokół,gen)}
zjednywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zjednywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(dla,gen)}
zjeść: perf: subj,controller{np(str)} + obj{np(str)} + controllee{xp(mod)}
zjeść: perf: subj{np(str)} + obj{np(part)} + {prepnp(na,acc)}
zjeść: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zjeść: perf: subj{np(str)} + {prepnp(na,loc)} + {lexnp(str,pl,'ząb',natr)}
zjeżdżać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,że)}
zjeżdżać: imperf: subj{np(str)} + {prepnp(do,gen)}
zjeżdżać: imperf: subj{np(str)} + {prepnp(na,acc)}
zjeżdżać: imperf: subj{np(str)} + {xp(abl)}
zjeżdżać: imperf: subj{np(str)} + {xp(adl)}
zjeżdżać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zjeżdżać się: imperf: subj{np(str)} + {prepnp(na,acc)}
zjeżdżać się: imperf: subj{np(str)} + {xp(abl)}
zjeżdżać się: imperf: subj{np(str)} + {xp(adl)}
zjeżyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zjeżyć się: perf: subj{lexnp(str,_,'włos',atr)} + {np(dat)} + {preplexnp(na,acc,sg,'myśl',natr)} + {preplexnp(na,loc,sg,'głowa',atr)}
zjeżyć się: perf: subj{lexnp(str,_,'włos',atr)} + {np(dat)} + {preplexnp(na,acc,sg,'widok',natr)} + {preplexnp(na,loc,sg,'głowa',atr)}
zjeżyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
zjeżyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zjeżyć się: perf: subj{np(str)} + {np(inst)}
zjeżyć się: perf: subj{np(str)} + {prepnp(na,acc)}
zjeżyć się: perf: subj{np(str)} + {prepnp(przeciw,dat)}
zlać: perf: subj{np(str)} + {np(inst)} + {np(str); ncp(str,int); ncp(str,że)}
zlać: perf: subj{np(str)} + {np(inst)} + {refl}
zlać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zlać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zlać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(po,loc)}
zlać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zlać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
zlać się: perf: subj{np(str)} + {np(inst)}
zlecać: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
zlecać: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
zlecać: imperf: subj{np(str)} + {np(dat)} + {or}
zlecać: imperf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(dat)}
zlecić: perf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
zlecić: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zlecić: perf: subj{np(str)} + {np(dat)} + {cp(żeby)}
zlecić: perf: subj{np(str)} + {np(dat)} + {or}
zlecić: perf: subj{np(str)} + obj{np(str); ncp(str,żeby)} + {np(dat)}
zlecieć: perf: subj{np(str)} + {np(dat)} + {prepnp(na,loc)}
zlecieć: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zlecieć się: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zlewać: imperf: subj{np(str)} + {np(inst)} + {np(str); ncp(str,int); ncp(str,że)}
zlewać: imperf: subj{np(str)} + {np(inst)} + {refl}
zlewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zlewać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zlewać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
zlewać: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
zlewać: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
zlewać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zlewać się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
zlewać się: imperf: subj{np(str)} + {np(inst)}
zlewać się: imperf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
zlewać się: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
zleźć: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zleźć: perf: subj{np(str)} + obj{np(str)}
zleźć: perf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
zleźć: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zleźć się: perf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
zleźć się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zleźć się: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zlęknąć się: perf: subj,controller{np(str)} + controllee{infp(_)}
zlęknąć się: perf: subj{np(str)} + {cp(int)}
zlęknąć się: perf: subj{np(str)} + {cp(że)}
zlęknąć się: perf: subj{np(str)} + {cp(żeby)}
zlęknąć się: perf: subj{np(str)} + {np(gen)}
zlęknąć się: perf: subj{np(str)} + {prepnp(o,acc)}
zliczyć: perf: subj{np(str)} + {cp(int)}
zliczyć: perf: subj{np(str)} + {cp(że)}
zliczyć: perf: subj{np(str)} + obj{np(str)}
zliczyć: perf: subj{np(str)} + {prepnp(do,gen)}
zlikwidować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zlikwidować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zlokalizować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zlokalizować się: perf: subj{np(str)} + {xp(locat)}
złamać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
złamać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,loc)}
złamać się: perf: subj{np(str)} + {np(dat)} + {prepnp(pod,inst)}
złapać: perf: subj{np(str)} + {cp(int)}
złapać: perf: subj{np(str)} + {cp(że)}
złapać: perf: subj{np(str)} + {np(inst)} + {prepnp(za,acc)} + {refl}
złapać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(za,acc)}
złapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
złapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
złapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc); prepncp(na,loc,jak); prepncp(na,loc,że); prepncp(na,loc,żeby2)}
złapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(przy,loc)}
złapać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
złapać: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
złapać: perf: subj{np(str)} + obj{np(str)} + {xp(temp)}
złapać się: perf: subj{np(str)} + {np(gen)}
złapać się: perf: subj{np(str)} + {prepnp(na,acc)}
złapać się: perf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,jak); prepncp(na,loc,że); prepncp(na,loc,żeby2)}
złapać się: perf: subj{np(str)} + {prepnp(w,acc)}
złapać się: perf: subj{np(str)} + {prepnp(za,acc)}
złazić: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
złazić: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
złazić: imperf: subj{np(str)} + obj{np(str)}
złazić: imperf: subj{np(str)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
złazić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(do,gen)} + {xp(abl)} + {xp(perl)}
złazić się: imperf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
złazić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
złączyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,inst)}
złączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
złączyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
złączyć się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
złączyć się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,inst)}
złączyć się: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
złocić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
złocić się: imperf: {prepnp(od,gen)} + {xp(locat)}
złocić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
złocić się: imperf: subj{np(str)} + {np(inst)}
złocić się: imperf: subj{np(str)} + {prepnp(od,gen)}
złocić się: imperf: subj{np(str)} + {prepnp(w,loc)}
złorzeczyć: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
złorzeczyć: imperf: subj{np(str)} + {np(dat)} + {or}
złorzeczyć: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,że)}
złorzeczyć: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
złościć: imperf: subj{cp(gdy)} + {np(str)}
złościć: imperf: subj{cp(jak)} + {np(str)}
złościć: imperf: subj{cp(jeśli)} + {np(str)}
złościć: imperf: subj{cp(kiedy)} + {np(str)}
złościć: imperf: subj{cp(że)} + {np(str)}
złościć: imperf: subj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + {np(str)}
złościć: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
złościć się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)}
złościć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
złościć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
złościć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {or}
złościć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,int); prepncp(o,acc,że)}
złościć się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
złowić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
złowić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
złowić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
złowić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
złożyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
złożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
złożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
złożyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
złożyć: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
złożyć: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
złożyć się: perf: {np(dat)} + {cp(że)} + {advp(misc)}
złożyć się: perf: {np(dat)} + {prepnp(z,inst)} + {advp(misc)}
złożyć się: perf: subj{np(str)} + {prepnp(do,gen)}
złożyć się: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,że)}
złożyć się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(po,acc)}
zmagać: imperf: subj{np(str)} + obj{np(str)}
zmagać się: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zmaleć: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zmarnować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zmarnować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)} + {lexnp(dat,_,'siebie',natr)}
zmarnować się: perf: subj{np(str)}
zmartwychwstać: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,gen)} + {xp(temp)}
zmęczyć: perf: subj{np(str); ncp(str,że)} + {np(str)}
zmęczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zmęczyć się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
zmieniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)}
zmieniać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)}
zmieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zmieniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zmieniać się: imperf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + {prepadjp(z,gen)}
zmieniać się: imperf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + {prepadjp(z,gen)}
zmieniać się: imperf: subj{np(str)} + {np(dat)}
zmieniać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
zmieniać się: imperf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
zmieniać się: imperf: subj{np(str)} + {prepnp(z,inst)}
zmienić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(na,acc)}
zmienić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepadjp(w,acc)}
zmienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zmienić: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zmienić się: perf: subj,controller{np(str)} + controllee{prepadjp(na,acc)} + {prepadjp(z,gen)}
zmienić się: perf: subj,controller{np(str)} + controllee{prepadjp(w,acc)} + {prepadjp(z,gen)}
zmienić się: perf: subj{np(str)} + {np(dat)}
zmienić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,gen)}
zmienić się: perf: subj{np(str)} + {prepnp(w,acc)} + {prepnp(z,gen)}
zmienić się: perf: subj{np(str)} + {prepnp(z,inst)}
zmierzać: imperf: subj{np(str)} + {prepncp(ku,dat,że)}
zmierzać: imperf: subj{np(str)} + {prepncp(ku,dat,żeby)}
zmierzać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
zmierzać: imperf: subj{np(str)} + {prepnp(ku,dat)}
zmierzać: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
zmierzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zmierzyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zmierzyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zmierzyć: perf: subj{np(str)} + {prepnp(w,loc)} + {refl}
zmierzyć się: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
zmieszać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zmieszać się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
zmieszać się: perf: subj{np(str)} + {np(inst)}
zmieścić: perf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
zmieścić: perf: subj{np(str)} + {np(str)} + {xp(locat)}
zmieścić się: perf: subj{np(str)} + {prepnp(w,loc)}
zmieścić się: perf: subj{np(str)} + {xp(locat)}
zmięknąć: perf: subj{np(str)} + {np(dat)}
zmięknąć: perf: subj{np(str)} + {prepnp(w,loc)}
zmiłować się: perf: subj{np(str)} + {prepnp(nad,inst)}
zmniejszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zmniejszać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zmniejszyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zmniejszyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zmobilizować: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
zmobilizować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
zmobilizować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(przeciw,dat)}
zmobilizować się: perf: subj{np(str)} + {np(inst)} + {cp(żeby)}
zmobilizować się: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zmobilizować się: perf: subj{np(str)} + {prepnp(przeciw,dat)}
zmodernizować: perf: subj{np(str)} + {np(inst)} + {refl}
zmodernizować: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zmodyfikować: perf: subj{np(str)} + obj{np(str); ncp(str,int)} + {np(dat)} + {np(inst)}
zmodyfikować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(u,gen)}
zmodyfikować: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(w,loc)}
zmodyfikować się: perf: subj{np(str)}
zmoknąć: perf: subj,controller{np(str)} + controllee{xp(mod)} + {xp(locat)}
zmoknąć: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
zmóc: perf: subj{np(str)} + obj{np(str)}
zmóc się: perf: subj{np(str)} + {cp(żeby)}
zmóc się: perf: subj{np(str)} + {prepnp(na,acc)}
zmóc się: perf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,int); prepncp(z,inst,że)}
zmówić: perf: subj{np(str)} + obj{np(str)}
zmówić się: perf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(z,inst)}
zmówić się: perf: subj{np(str)} + {prepnp(o,loc)} + {prepnp(z,inst)}
zmówić się: perf: subj{np(str)} + {prepnp(przeciw,dat)} + {prepnp(z,inst)}
zmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(int)}
zmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(że)}
zmówić się: perf: subj{np(str)} + {prepnp(z,inst)} + {cp(żeby)}
zmusić: perf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zmusić: perf: subj{np(str)} + obj{np(str)} + {infp(_)}
zmusić: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zmusić się: perf: subj{np(str)} + {cp(żeby)}
zmusić się: perf: subj{np(str)} + {infp(_)}
zmusić się: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zmuszać: imperf: subj{np(str)} + obj{np(str)} + {cp(żeby)}
zmuszać: imperf: subj{np(str)} + obj{np(str)} + {infp(_)}
zmuszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zmuszać się: imperf: subj{np(str)} + {cp(żeby)}
zmuszać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zmyć: perf: subj{np(str)} + obj{lexnp(str,sg,'głowa',natr)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
zmyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
zmyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zmyć: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zmyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zmyć się: perf: subj{np(str)} + {xp(abl)}
zmylić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zmyślać: imperf: subj{np(str)} + {cp(int)}
zmyślać: imperf: subj{np(str)} + {cp(że)}
zmyślać: imperf: subj{np(str)} + obj{np(str)}
zmyślać: imperf: subj{np(str)} + {or}
zmyślać: imperf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)}
zmyślić: perf: subj{np(str)} + {cp(int)}
zmyślić: perf: subj{np(str)} + {cp(że)}
zmyślić: perf: subj{np(str)} + obj{np(str)}
zmyślić: perf: subj{np(str)} + {or}
zmywać: perf: subj{np(str)} + obj{lexnp(str,sg,'głowa',natr)} + {np(dat)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
zmywać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,gen)}
zmywać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zmywać: perf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zmywać się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zmywać się: perf: subj{np(str)} + {xp(abl)}
znaczyć: imperf: subj{infp(_)} + {infp(_)}
znaczyć: imperf: subj{infp(_)} + {np(str)}
znaczyć: imperf: subj{np(str)} + {cp(że)}
znaczyć: imperf: subj{np(str)} + {np(str)} + {prepnp(dla,gen)}
znaczyć: imperf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
znaczyć: imperf: subj{np(str)} + {np(str)} + {xp(locat)}
znaczyć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
znaczyć: imperf: subj{np(str)} + {or}
znaczyć się: perf: subj{np(str)} + {np(inst)} + {xp(locat)}
znać: imperf: {np(str)} + {prepnp(po,loc)}
znać: imperf: {prepnp(po,loc)} + {cp(że)}
znać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
znać: imperf: subj{np(str)} + obj{cp(int)}
znać: imperf: subj{np(str)} + obj{np(str)}
znać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(od,gen,sg,'podszewka',natr)}
znać się: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,int)}
znać się: imperf: subj{np(str)} + {prepnp(z,inst)}
znajdować: imperf: subj{np(str)} + {cp(że)}
znajdować: imperf: subj{np(str)} + {np(str)} + {advp(pron)}
znajdować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
znajdować: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(str)}
znajdować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
znajdować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); xp(locat)}
znajdować: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
znajdować się: imperf: subj,controller{np(str)} + controllee{adjp(inst)}
znajdować się: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
znajdować się: imperf: subj{np(str)} + {prepnp(w,loc)}
znajdywać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
znajdywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
znajdywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); xp(locat)}
znajdywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
znajdywać się: imperf: subj,controller{np(str)} + controllee{adjp(inst)}
znajdywać się: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
znajdywać się: imperf: subj{np(str)} + {prepnp(w,loc)}
znakować: imperf: subj{np(str)} + {np(inst)} + {refl}
znakować: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
znaleźć: perf: subj{np(str)} + {cp(że)}
znaleźć: perf: subj{np(str)} + {np(str)} + {advp(pron)}
znaleźć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(inst)}
znaleźć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{adjp(str)}
znaleźć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
znaleźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(u,gen); xp(locat)}
znaleźć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
znaleźć się: perf: subj,controller{np(str)} + controllee{adjp(inst)}
znaleźć się: perf: subj{np(str)} + {prepnp(bez,gen)}
znaleźć się: perf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
znaleźć się: perf: subj{np(str)} + {prepnp(w,loc)}
znęcać się: imperf: subj{np(str)} + {prepnp(nad,inst)}
zniechęcać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zniechęcać się: imperf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zniechęcić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zniechęcić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zniecierpliwić: perf: subj{cp(że)} + {np(str)}
zniecierpliwić: perf: subj{np(str); ncp(str,że)} + {np(str)}
zniecierpliwić się: perf: subj{np(str)} + {cp(int)}
zniecierpliwić się: perf: subj{np(str)} + {cp(że)}
zniecierpliwić się: perf: subj{np(str)} + {cp(żeby)}
zniecierpliwić się: perf: subj{np(str)} + {np(inst)}
zniecierpliwić się: perf: subj{np(str)} + {or}
zniecierpliwić się: perf: subj{np(str)} + {prepnp(na,acc)}
znieczulać: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
znieczulać: imperf: subj{np(str)} + {np(inst)} + {prepnp(na,acc)} + {refl}
zniekształcać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zniekształcać się: imperf: subj{np(str)} + {np(dat)}
znienawidzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)}
znienawidzić: perf: subj{np(str)} + {prepnp(za,acc); prepncp(za,acc,int); prepncp(za,acc,że)} + {refl}
znieść: perf: subj,controller{np(str)} + controllee{xp(mod)} + {cp(jak)}
znieść: perf: subj,controller{np(str)} + controllee{xp(mod)} + {cp(że)}
znieść: perf: subj,controller{np(str)} + obj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + controllee{xp(mod)}
znieść: perf: subj{np(str)} + {cp(gdy)}
znieść: perf: subj{np(str)} + {cp(jak)}
znieść: perf: subj{np(str)} + {cp(kiedy)}
znieść: perf: subj{np(str)} + {cp(że)}
znieść: perf: subj{np(str)} + {np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)}
znieść: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
znieść: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
znieść: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zniewalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
znieważać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
znieważyć: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zniewolić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
znikać: imperf: subj{np(str)} + {np(dat)} + {xp(abl)}
znikać: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
zniknąć: perf: subj{np(str)} + {np(dat)} + {xp(abl)}
zniknąć: perf: subj{np(str)} + {np(dat)} + {xp(locat)}
zniszczyć: perf: subj{np(str)} + {np(inst)} + {refl}
zniszczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zniszczyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(od,gen)}
zniweczyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst); ncp(inst,że)}
zniżać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zniżać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zniżać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zniżać się: imperf: subj{np(str)} + {cp(żeby)}
zniżać się: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,żeby)}
zniżać się: imperf: subj{np(str)} + {xp(adl)}
zniżyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zniżyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zniżyć się: perf: subj{np(str)} + {prepnp(do,gen)}
znokautować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
znosić: imperf: subj,controller{np(str)} + controllee{infp(imperf)}
znosić: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {cp(jak)}
znosić: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {cp(że)}
znosić: imperf: subj,controller{np(str)} + obj{np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)} + controllee{xp(mod)}
znosić: imperf: subj{np(str)} + {cp(gdy)}
znosić: imperf: subj{np(str)} + {cp(jak)}
znosić: imperf: subj{np(str)} + {cp(kiedy)}
znosić: imperf: subj{np(str)} + {cp(że)}
znosić: imperf: subj{np(str)} + {np(str); ncp(str,gdy); ncp(str,int); ncp(str,jak); ncp(str,kiedy); ncp(str,że)}
znosić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
znosić: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)}
znosić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
znosić: perf: subj{np(str)} + obj{np(str)}
znosić się: imperf: subj{np(str)} + {prepnp(z,inst)}
znowelizować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
znudzić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
znudzić się: perf: subj,controllee{infp(imperf)} + controller{np(dat)}
znudzić się: perf: subj{cp(że)} + {np(dat)}
znudzić się: perf: subj{np(str); ncp(str,że)} + {np(dat)}
znudzić się: perf: subj{np(str)} + {np(inst); ncp(inst,że)}
zobaczyć: perf: subj{np(str)} + controller{np(str)} + controllee{adjp(pred)}
zobaczyć: perf: subj{np(str)} + {cp(jak)} + {preplexnp(na,acc,pl,'oko',batr)}
zobaczyć: perf: subj{np(str)} + {cp(żeby2)}
zobaczyć: perf: subj{np(str)} + {cp(że)} + {preplexnp(na,acc,pl,'oko',batr)}
zobaczyć: perf: subj{np(str)} + {lexnp(inst,_,'oko',ratr)} + {refl}
zobaczyć: perf: subj{np(str)} + {np(str); cp(int); cp(jak); cp(że); ncp(str,int); ncp(str,jak); ncp(str,że)}
zobaczyć: perf: subj{np(str)} + {np(str); ncp(str,że)} + {preplexnp(na,acc,pl,'oko',batr)}
zobaczyć: perf: subj{np(str)} + {np(str)} + {prepnp(w,loc)}
zobaczyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zobaczyć się: perf: subj,controller{np(str)} + controllee{adjp(inst)}
zobaczyć się: perf: subj{np(str)} + {prepnp(z,inst)}
zobowiązać: perf: subj,controller{np(str)} + controllee{infp(_)} + {refl}
zobowiązać: perf: subj,controller{np(str)} + obj{np(str)} + controllee{infp(_)}
zobowiązać: perf: subj{np(str)} + {np(inst)} + {cp(żeby)} + {refl}
zobowiązać: perf: subj{np(str)} + {np(inst)} + {cp(że)} + {refl}
zobowiązać: perf: subj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {refl}
zobowiązać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
zobowiązać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {prepnp(w,loc)}
zobowiązać: perf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {prepnp(w,loc)} + {refl}
zobowiązać: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(żeby)} + {refl}
zobowiązać: perf: subj{np(str)} + {prepnp(w,loc)} + {cp(że)} + {refl}
zobowiązywać: imperf: subj,controller{np(str)} + controllee{infp(_)} + {refl}
zobowiązywać: imperf: subj,controller{np(str)} + obj{np(str)} + controllee{infp(_)}
zobowiązywać: imperf: subj{np(str)} + {cp(żeby)} + {refl}
zobowiązywać: imperf: subj{np(str)} + {cp(że)} + {refl}
zobowiązywać: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
zobowiązywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {cp(żeby)}
zobowiązywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)}
zobowiązywać: imperf: subj{np(str)} + {prepnp(do,gen); prepncp(do,gen,że); prepncp(do,gen,żeby)} + {refl}
zobrazować: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(int)}
zobrazować: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {cp(że)}
zobrazować: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
zorganizować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zorganizować: perf: subj{np(str)} + obj{np(str)} + {prepnp(wokół,gen)}
zorganizować się: perf: subj{np(str)} + {prepnp(w,acc)}
zorganizować się: perf: subj{np(str)} + {prepnp(wokół,gen)}
zorientować: perf: subj{np(str)} + obj{np(str)} + {cp(int)}
zorientować: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zorientować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
zorientować się: perf: subj{np(str)} + {cp(int)}
zorientować się: perf: subj{np(str)} + {cp(że)}
zorientować się: perf: subj{np(str)} + {or}
zorientować się: perf: subj{np(str)} + {prepnp(na,acc)}
zorientować się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,int); prepncp(w,loc,że)}
zostać: perf: subj,controllee{infp(_)} + controller{np(dat)}
zostać: perf: subj,controller{np(str)} + controllee{adjp(pred)}
zostać: perf: subj,controller{np(str)} + controllee{np(inst)}
zostać: perf: subj{ncp(str,że)} + {np(dat)}
zostać: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zostać: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
zostać: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {prepnp(z,gen)}
zostać: perf: subj{np(str)} + {prepnp(bez,gen)}
zostać: perf: subj{np(str)} + {prepnp(między,inst)}
zostać: perf: subj{np(str)} + {prepnp(na,loc)}
zostać: perf: subj{np(str)} + {prepnp(przy,loc)}
zostać: perf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
zostać: perf: subj{np(str)} + {prepnp(z,inst)}
zostać się: perf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
zostać się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zostać się: perf: subj{np(str)} + {prepnp(na,loc)}
zostać się: perf: subj{np(str)} + {prepnp(przy,loc)}
zostać się: perf: subj{np(str)} + {prepnp(u,gen)}
zostać się: perf: subj{np(str)} + {prepnp(z,inst)}
zostawać: imperf: controller{np(dat)} + controllee{infp(_)}
zostawać: imperf: subj,controller{np(str)} + controllee{adjp(pred)}
zostawać: imperf: subj,controller{np(str)} + controllee{np(inst)}
zostawać: imperf: subj{ncp(str,że)} + {np(dat)}
zostawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zostawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(po,loc)}
zostawać: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {prepnp(z,gen)}
zostawać: imperf: subj{np(str)} + {prepnp(bez,gen)}
zostawać: imperf: subj{np(str)} + {prepnp(na,loc)}
zostawać: imperf: subj{np(str)} + {prepnp(przy,loc)}
zostawać: imperf: subj{np(str)} + {prepnp(u,gen); xp(locat)}
zostawać: imperf: subj{np(str)} + {prepnp(z,inst)}
zostawać się: imperf: subj{np(str)} + {prepnp(po,loc)}
zostawać się: imperf: subj{np(str)} + {prepnp(przy,loc)}
zostawiać: imperf: subj{np(str)} + controller{np(str)} + controllee{adjp(pred)} + {xp(locat)}
zostawiać: imperf: subj{np(str)} + {np(inst)} + {np(str)}
zostawiać: imperf: subj{np(str)} + {np(str)} + {preplexnp(za,inst,_,'siebie',natr)}
zostawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zostawiać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
zostawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(bez,gen,sg,'komentarz',natr)}
zostawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,sg,'lód',natr)}
zostawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(przy,loc,sg,'życie',natr)}
zostawiać: imperf: subj{np(str)} + obj{np(str)} + {preplexnp(w,loc,sg,'spokój',natr)}
zostawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {xp(locat)}
zostawiać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {prepnp(w,loc)}
zostawić: perf: subj{np(str)} + controller{np(str)} + controllee{adjp(pred)} + {xp(locat)}
zostawić: perf: subj{np(str)} + {np(inst)} + {np(str)}
zostawić: perf: subj{np(str)} + {np(str)} + {preplexnp(za,inst,_,'siebie',natr)}
zostawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(na,acc)}
zostawić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(locat)}
zostawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(bez,gen,sg,'komentarz',natr)}
zostawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(na,loc,sg,'lód',natr)}
zostawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(przy,loc,sg,'życie',natr)}
zostawić: perf: subj{np(str)} + obj{np(str)} + {preplexnp(w,loc,sg,'spokój',natr)}
zostawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)} + {xp(locat)}
zostawić: perf: subj{np(str)} + obj{np(str)} + {prepnp(po,loc)} + {prepnp(w,loc)}
zranić: perf: subj{cp(gdy)} + {np(str)}
zranić: perf: subj{cp(jak)} + {np(str)}
zranić: perf: subj{cp(jeśli)} + {np(str)}
zranić: perf: subj{cp(kiedy)} + {np(str)}
zranić: perf: subj{cp(że)} + {np(str)}
zranić: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)} + {prepnp(w,acc)}
zranić: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)} + {refl}
zranić się: perf: subj{np(str)} + {np(inst)} + {prepnp(w,acc)}
zranić się: perf: subj{np(str)} + {prepnp(o,acc)} + {prepnp(w,acc)}
zrastać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zrastać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zrazić: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen)}
zrazić: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {lexnp(dat,_,'siebie',natr)}
zrazić się: perf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen)}
zrażać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen)}
zrażać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {lexnp(dat,_,'siebie',natr)}
zrażać się: imperf: subj{np(str)} + {np(inst); ncp(inst,int); ncp(inst,że)} + {prepnp(do,gen)}
zrealizować: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zrealizować się: perf: subj,controller{np(str)} + controllee{prepnp(jako,str)}
zrealizować się: perf: subj{np(str)} + {prepnp(w,loc); prepncp(w,loc,że)}
zremisować: perf: subj{np(str)} + obj{np(str)}
zremisować: perf: subj{np(str)} + {prepnp(z,inst)}
zrezygnować: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że); prepncp(z,gen,żeby)}
zrobić: perf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
zrobić: perf: subj{np(str)} + {cp(że)} + {advp(misc)}
zrobić: perf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {advp(misc)}
zrobić: perf: subj{np(str)} + {np(inst)} + {prepnp(na,loc)} + {lexnp(str,sg,'wrażenie',atr)}
zrobić: perf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
zrobić: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zrobić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,loc)}
zrobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(dla,gen)}
zrobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zrobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zrobić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zrobić: perf: subj{np(str)} + {prepnp(w,acc)}
zrobić: perf: subj{np(str)} + {prepnp(z,gen)} + {nonch} + {lexnp(dat,_,'siebie',natr)}
zrobić się: perf: {np(dat)} + {xp(mod)}
zrobić się: perf: subj,controller{np(str)} + controllee{adjp(pred)}
zrobić się: perf: subj,controller{np(str)} + controllee{np(inst)}
zrobić się: perf: subj,controller{np(str)} + controllee{prepnp(na,acc)}
zrobić się: perf: subj{np(str)} + {prepnp(z,gen)}
zrodzić: perf: subj{np(str)} + obj{np(str)}
zrodzić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zrodzić się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)}
zrodzić się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zrosnąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)} + {prepnp(z,inst)}
zrosnąć się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zrozumieć: perf: subj{np(str)} + {np(str); cp(int); cp(że); ncp(str,int); ncp(str,że)}
zrozumieć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zrozumieć: perf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
zrównać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,inst)}
zrównać się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(z,inst)}
zrównać się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,loc)} + {prepnp(z,inst)}
zrównoważyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zrównoważyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zrównoważyć się: perf: subj{np(str)} + {prepnp(z,inst)} + {xp(mod)}
zrównywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zrównywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
zrównywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
zrównywać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zrównywać się: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
zrównywać się: imperf: subj{np(str)} + {prepnp(z,inst)} + {preplexnp(pod,inst,_,'wzgląd',atr)}
zróżnicować: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zróżnicować: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zróżnicować się: perf: subj{np(str)} + {prepnp(na,acc)}
zrywać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zrywać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zrywać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zrywać: imperf: subj{np(str)} + {prepnp(z,inst)}
zrywać się: imperf: subj{np(str)} + {or}
zrywać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zrywać się: imperf: subj{np(str)} + {prepnp(z,gen)}
zrządzić: imperf: subj{np(str)} + {advp(pron)}
zrządzić: imperf: subj{np(str)} + {cp(że)}
zrządzić: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
zrzec się: perf: subj{np(str)} + {np(gen); ncp(gen,żeby)} + {comprepnp(na rzecz)}
zrzec się: perf: subj{np(str)} + {np(gen); ncp(gen,żeby)} + {preplexnp(na,acc,sg,'korzyść',ratr)}
zrzekać się: imperf: subj{np(str)} + {np(gen); ncp(gen,żeby)} + {comprepnp(na rzecz)}
zrzekać się: imperf: subj{np(str)} + {np(gen); ncp(gen,żeby)} + {preplexnp(na,acc,sg,'korzyść',ratr)}
zrzeszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
zrzeszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zrzeszać się: imperf: subj{np(str)} + {prepnp(w,acc)}
zrzeszać się: imperf: subj{np(str)} + {prepnp(w,loc)}
zrzędzić: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
zrzędzić: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zrzędzić: imperf: subj{np(str)} + {np(dat)} + {cp(żeby)}
zrzędzić: imperf: subj{np(str)} + {np(dat)} + {or}
zrzędzić: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
zrzucać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
zrzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zrzucać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zrzucać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zrzucać się: imperf: subj{np(str)} + {prepnp(na,acc)}
zrzucić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
zrzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zrzucić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zrzucić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zrzucić się: perf: subj{np(str)} + {prepnp(na,acc)}
zstąpić: perf: subj{np(str)} + {prepnp(na,acc)}
zstąpić: perf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zstępować: imperf: subj{np(str)} + {prepnp(na,acc)}
zstępować: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zsunąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
zsunąć się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zsuwać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)}
zsuwać się: perf: subj{np(str)} + {np(dat)} + {xp(abl)} + {xp(adl)} + {xp(perl)}
zsyłać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {xp(abl)}
zsyłać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)} + {xp(abl)}
zsyłać: imperf: subj{np(str)} + obj{np(str)} + {xp(abl)} + {xp(adl)}
zużyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zużyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zużyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zużyć się: perf: subj{np(str)} + {prepnp(na,loc)}
zużyć się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
zużywać: perf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
zużywać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc); prepncp(na,acc,żeby)}
zużywać: perf: subj{np(str)} + obj{np(str)} + {prepnp(na,loc)}
zużywać się: perf: subj{np(str)} + {prepnp(na,loc)}
zużywać się: perf: subj{np(str)} + {prepnp(od,gen); prepncp(od,gen,że)}
zwać: imperf: subj,controller{np(str)} + controllee{np(inst)} + {refl}
zwać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(inst)}
zwać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{np(nom)}
zwać: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
zwać się: imperf: subj,controller{np(str)} + controllee{np(inst)}
zwać się: imperf: subj,controller{np(str)} + controllee{np(nom)}
zwać się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
zwalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
zwalać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
zwalać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
zwalać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
zwalać się: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
zwalać się: imperf: subj{np(str)} + {prepnp(do,gen)}
zwalać się: imperf: subj{np(str)} + {prepnp(z,gen)}
zwalczać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
zwalczyć: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(inst)}
zwalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
zwalić: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
zwalić: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(z,gen)}
zwalić się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(na,acc)}
zwalić się: perf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)} + {xp(adl)}
zwalić się: perf: subj{np(str)} + {prepnp(do,gen)}
zwalić się: perf: subj{np(str)} + {prepnp(z,gen)}
zwalniać: imperf: subj{np(str)} + {np(gen)}
zwalniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zwalniać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zwalniać się: imperf: subj{np(str)} + {prepnp(od,gen)}
zwalniać się: imperf: subj{np(str)} + {prepnp(z,gen)}
zwariować: perf: subj{np(str)} + {preplexnp(na,loc,sg,'punkt',ratr)}
zwariować: perf: subj{np(str)} + {prepnp(dla,gen)}
zwariować: perf: subj{np(str)} + {prepnp(od,gen)}
zwariować: perf: subj{np(str)} + {prepnp(z,gen)}
zważać: imperf: subj{np(str)} + {cp(int)}
zważać: imperf: subj{np(str)} + {cp(że)}
zważać: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
zważyć: perf: subj{np(str)} + {cp(int)}
zważyć: perf: subj{np(str)} + {cp(że)}
zważyć: perf: subj{np(str)} + obj{np(str)}
zważyć: perf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
zważyć: perf: subj{np(str)} + {refl}
zweryfikować: perf: subj{np(str); ncp(str,int); ncp(str,że)} + obj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
zweryfikować: perf: subj{np(str)} + obj,controller{np(str)} + controllee{prepnp(jako,str)}
zweryfikować: perf: subj{np(str)} + obj{cp(int)}
zweryfikować: perf: subj{np(str)} + obj{cp(że)}
zweryfikować: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zwężać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zwężać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zwiastować: _: subj{np(str)} + {np(dat)} + {cp(że)}
zwiastować: _: subj{np(str)} + {np(dat)} + {cp(żeby2)}
zwiastować: _: subj{np(str)} + obj{np(str); ncp(str,że)} + {np(dat)}
związać: perf: subj,controller{np(str)} + controllee{xp(mod)} + {lexnp(str,sg,'koniec',natr)} + {preplexnp(z,inst,sg,'koniec',natr)}
związać: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)} + {refl}
związać: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
związać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,acc)}
związać: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
związać się: perf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
zwichnąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {prepnp(w,loc)}
zwiedzać: imperf: subj{np(str)} + obj{np(str)}
zwiedzić: perf: subj{np(str)} + obj{np(str)}
zwiedzieć się: perf: subj{np(str)} + {prepnp(od,gen)} + {comprepnp(na temat)}
zwiedzieć się: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(int)}
zwiedzieć się: perf: subj{np(str)} + {prepnp(od,gen)} + {cp(że)}
zwiedzieć się: perf: subj{np(str)} + {prepnp(o,loc); prepncp(o,loc,int); prepncp(o,loc,że)} + {prepnp(od,gen)}
zwielokrotnić: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zwielokrotnić się: perf: subj{np(str)}
zwierzać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zwierzać się: imperf: subj{np(str)} + {np(dat)} + {cp(że)}
zwierzać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
zwierzać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
zwierzać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
zwierzać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
zwierzać się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,inst)}
zwierzyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zwierzyć się: perf: subj{np(str)} + {np(dat)} + {cp(że)}
zwierzyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
zwierzyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(z,inst)}
zwierzyć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {cp(że)}
zwierzyć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
zwierzyć się: perf: subj{np(str)} + {prepnp(przed,inst)} + {prepnp(z,inst)}
zwiesić: perf: subj{np(str)} + {lexnp(str,sg,'nos',natr)} + {preplexnp(na,acc,sg,'kwinta',natr)}
zwiesić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zwiesić: perf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zwiesić: perf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zwiesić się: perf: subj{np(str)}
zwiesić się: perf: subj{np(str)} + {prepnp(z,gen)}
zwiesić się: perf: subj{np(str)} + {xp(adl)}
zwiesić się: perf: subj{np(str)} + {xp(locat)}
zwieszać: imperf: subj{np(str)} + {lexnp(str,sg,'nos',natr)} + {preplexnp(na,acc,sg,'kwinta',natr)}
zwieszać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zwieszać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zwieszać: imperf: subj{np(str)} + obj{np(str)} + {xp(locat)}
zwieszać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(z,gen)}
zwieszać się: imperf: subj{np(str)} + {np(dat)} + {xp(adl)}
zwieszać się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
zwieść: perf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zwieść: perf: subj{np(str)} + obj{np(str)} + {cp(że)}
zwieść: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {xp(adl)}
zwietrzyć: perf: subj{np(str)} + {cp(int)}
zwietrzyć: perf: subj{np(str)} + {cp(że)}
zwietrzyć: perf: subj{np(str)} + obj{np(str); ncp(str,int); ncp(str,że)}
zwiększać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zwiększać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zwiększyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(o,acc)}
zwiększyć się: perf: subj{np(str)} + {np(dat)} + {prepnp(o,acc)}
zwijać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zwijać się: imperf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zwijać się: imperf: subj{np(str)} + {prepnp(z,gen)}
zwijać się: imperf: subj{np(str)} + {prepnp(z,inst)}
zwijać się: imperf: subj{np(str)} + {xp(abl)}
zwijać się: imperf: subj{np(str)} + {xp(adl)}
zwilżyć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)}
zwilżyć się: perf: subj{np(str)} + {np(dat)}
zwinąć: perf: subj{np(str)} + obj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zwinąć się: perf: subj{np(str)} + {np(dat)} + {prepnp(w,acc)}
zwinąć się: perf: subj{np(str)} + {prepnp(z,gen)}
zwinąć się: perf: subj{np(str)} + {prepnp(z,inst)}
zwinąć się: perf: subj{np(str)} + {xp(abl)}
zwinąć się: perf: subj{np(str)} + {xp(adl)}
zwisać: imperf: subj{cp(int)} + {np(dat)} + {np(inst)}
zwisać: imperf: subj{cp(że)} + {np(dat)} + {np(inst)}
zwisać: imperf: subj{np(str); ncp(str,int); ncp(str,że)} + {np(dat)} + {np(inst)}
zwisać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(abl)}
zwisać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(adl)}
zwisać: imperf: subj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
zwlec: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zwlec: perf: subj{np(str)} + obj{np(str)} + {xp(abl)}
zwlec się: perf: subj{np(str)} + {prepnp(z,gen)}
zwlec się: perf: subj{np(str)} + {xp(abl)}
zwlekać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zwlekać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zwlekać: imperf: subj{np(str)} + {prepnp(z,inst); prepncp(z,inst,żeby)} + {xp(dur)}
zwlekać się: imperf: subj{np(str)} + {prepnp(z,gen)}
zwlekać się: imperf: subj{np(str)} + {xp(abl)}
zwodzić: imperf: subj{np(str)} + {cp(że)} + {refl}
zwodzić: imperf: subj{np(str); ncp(str,że)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zwodzić: imperf: subj{np(str)} + {np(inst)} + {refl}
zwodzić: imperf: subj{np(str)} + obj{np(str)} + {cp(że)}
zwodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {xp(adl)}
zwodzić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
zwojować: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zwolnić: perf: subj{np(str)} + {np(gen)}
zwolnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(od,gen)}
zwolnić: perf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)}
zwolnić się: perf: subj{np(str)} + {prepnp(z,gen)}
zwołać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
zwołać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zwołać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
zwołać: perf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
zwoływać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(do,gen)}
zwoływać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {prepnp(na,acc)}
zwoływać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(adl)}
zwoływać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)} + {xp(locat)}
zwozić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,gen)} + {xp(adl)} + {xp(perl)}
zwracać: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {lexnp(str,sg,'uwaga',atr)}
zwracać: imperf: subj{np(str)} + {np(dat)} + {prepnp(za,acc)}
zwracać: imperf: subj{np(str)} + obj{lexnp(str,sg,'uwaga',atr)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zwracać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zwracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zwracać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
zwracać: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zwracać się: imperf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)}
zwracać się: imperf: subj{np(str)} + {np(dat)}
zwracać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w kwestii)}
zwracać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w sprawie)}
zwracać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
zwracać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
zwracać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepncp(z,inst,żeby)}
zwracać się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
zwracać się: imperf: subj{np(str)} + {prepnp(ku,dat)}
zwracać się: imperf: subj{np(str)} + {prepnp(przeciw,dat)}
zwrócić: imperf: subj{np(str)} + {np(dat)} + {cp(że)} + {lexnp(str,sg,'uwaga',atr)}
zwrócić: imperf: subj{np(str)} + obj{lexnp(str,sg,'uwaga',atr)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że); prepncp(na,acc,żeby)}
zwrócić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zwrócić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(na,acc)}
zwrócić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(przeciw,dat)}
zwrócić: imperf: subj{np(str)} + obj{np(str)} + {xp(adl)}
zwrócić się: perf: subj{np(str)} + controller{prepnp(do,gen)} + controllee{xp(mod)}
zwrócić się: perf: subj{np(str)} + {np(dat)}
zwrócić się: perf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w kwestii)}
zwrócić się: perf: subj{np(str)} + {prepnp(do,gen)} + {comprepnp(w sprawie)}
zwrócić się: perf: subj{np(str)} + {prepnp(do,gen)} + {cp(żeby)}
zwrócić się: perf: subj{np(str)} + {prepnp(do,gen)} + {or}
zwrócić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepncp(z,inst,żeby)}
zwrócić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
zwrócić się: perf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(z,inst)}
zwrócić się: perf: subj{np(str)} + {prepnp(ku,dat)}
zwrócić się: perf: subj{np(str)} + {prepnp(przeciw,dat)}
zwyciężać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
zwyciężać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zwyciężać: imperf: subj{np(str)} + {prepnp(nad,inst)}
zwyciężać: imperf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
zwyciężyć: perf: subj{np(str)} + obj{np(str)} + {np(inst)}
zwyciężyć: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zwyciężyć: perf: subj{np(str)} + {prepnp(nad,inst)}
zwyciężyć: perf: subj{np(str)} + {prepnp(w,loc)} + {prepnp(z,inst)}
zwyknąć: perf: subj,controller{np(str)} + controllee{infp(_)}
zwyknąć: perf: subj{np(str)} + {cp(żeby)}
zyskać: perf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(na,loc); prepncp(na,loc,że)}
zyskać: perf: subj{np(str)} + obj{np(str)} + {np(dat)}
zyskać: perf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zyskać: perf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zyskiwać: imperf: subj{np(str)} + obj{np(str); ncp(str,że)} + {prepnp(na,loc); prepncp(na,loc,że)}
zyskiwać: imperf: subj{np(str)} + obj{np(str)} + {np(dat)}
zyskiwać: imperf: subj{np(str)} + obj{np(str)} + {np(inst); ncp(inst,że)}
zyskiwać: imperf: subj{np(str)} + obj{np(str)} + {prepnp(w,loc)}
zżyć się: perf: subj{np(str)} + {prepnp(z,inst)}
zżymać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,gen)}
zżymać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {comprepnp(z powodu)}
zżymać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(int)}
zżymać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {cp(że)}
zżymać się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {or}
zżymać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(o,acc); prepncp(o,acc,że)}
zżymać się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(za,acc); prepncp(za,acc,że)}
żal: imperf: controller{np(dat)} + controllee{infp(_)}
żal: imperf: {np(dat)} + {cp(że)}
żal: imperf: {np(dat)} + {np(gen); ncp(gen,że)}
żal: imperf: {np(dat)} + {prepnp(za,acc)}
żal: imperf: {np(dat)} + {prepnp(za,inst)}
żalić się: imperf: subj{np(str)} + {np(dat)} + {cp(int)}
żalić się: imperf: subj{np(str)} + {np(dat)} + {or}
żalić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc)} + {cp(że)}
żalić się: imperf: subj{np(str)} + {np(dat)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
żalić się: imperf: subj{np(str)} + {prepnp(do,gen)} + {or}
żalić się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc)} + {cp(że)}
żalić się: imperf: subj{np(str)} + {prepnp(do,gen)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)}
żalić się: imperf: subj{np(str)} + {prepnp(na,acc); prepncp(na,acc,int); prepncp(na,acc,że)} + {prepnp(przed,inst)}
żalić się: imperf: subj{np(str)} + {prepnp(na,acc)} + {prepnp(przed,inst)} + {cp(że)}
żalić się: imperf: subj{np(str)} + {prepnp(przed,inst)} + {or}
żałować: imperf: subj{np(str)} + {np(dat)} + {np(gen)} + {prepnp(na,acc)}
żałować: imperf: subj{np(str)} + {np(gen); cp(że); ncp(gen,że)}
żałować: imperf: subj{np(str)} + {np(gen)} + {or}
żałować: imperf: subj{np(str)} + {prepnp(za,acc)}
żartować: perf: subj{np(str)} + {prepnp(z,gen)} + {cp(że)}
żartować: perf: subj{np(str)} + {prepnp(z,gen)} + {or}
żartować: perf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,int); prepncp(z,gen,że)}
żartować: perf: subj{np(str)} + {prepnp(z,inst)}
żarzyć się: imperf: subj{np(str)} + {np(inst)}
żarzyć się: imperf: subj{np(str)} + {xp(mod)}
żądać: imperf: subj{np(str)} + {np(gen); cp(żeby); ncp(gen,żeby)} + {prepnp(od,gen)}
żądać: imperf: subj{np(str)} + {or}
żebrać: imperf: subj{np(str)} + {np(gen)} + {np(inst)}
żebrać: imperf: subj{np(str)} + {np(inst)} + {cp(żeby)}
żebrać: imperf: subj{np(str)} + {np(inst)} + {prepnp(o,acc); prepncp(o,acc,żeby)}
żeglować: imperf: subj{np(str)} + {np(inst)}
żeglować: imperf: subj{np(str)} + {prepnp(na,loc)}
żeglować: imperf: subj{np(str)} + {prepnp(w,loc)}
żeglować: imperf: subj{np(str)} + {xp(abl)} + {xp(adl)}
żeglować: imperf: subj{np(str)} + {xp(locat)}
żeglować: imperf: subj{np(str)} + {xp(perl)}
żegnać: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
żegnać się: imperf: subj{np(str)} + {np(inst)} + {prepnp(z,inst)}
żenić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(z,inst)}
żenić się: imperf: subj{np(str)} + {prepnp(dla,gen)} + {prepnp(z,inst)}
żenić się: imperf: subj{np(str)} + {prepnp(z,gen)} + {prepnp(z,inst)}
żerować: imperf: subj{np(str)} + {prepnp(na,loc); prepncp(na,loc,że)}
żerować: imperf: subj{np(str)} + {xp(locat)}
żłobić: imperf: subj{np(str)} + obj{np(str)} + {np(dat)} + {np(inst)} + {xp(locat)}
żłobić się: imperf: subj{np(str)} + {np(dat)} + {xp(locat)}
żółcić: imperf: subj{np(str)} + obj{np(str)}
żółcić się: imperf: subj{np(str)} + {np(inst)}
żółcić się: imperf: subj{np(str)} + {xp(locat)}
żuć: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
życzyć: imperf: subj{np(str)} + controller{np(dat)} + controllee{infp(_)}
życzyć: imperf: subj{np(str)} + {np(dat)} + {np(gen); cp(żeby); ncp(gen,żeby); advp(misc)}
życzyć: imperf: subj{np(str)} + {np(dat)} + {or}
życzyć: imperf: subj{np(str)} + {np(gen)} + {prepnp(za,acc)} + {lexnp(dat,_,'siebie',natr)}
życzyć: imperf: subj{np(str)} + {np(str)} + {prepnp(za,acc)} + {lexnp(dat,_,'siebie',natr)}
żyć: imperf: subj,controller{np(str)} + controllee{xp(mod)} + {prepnp(z,inst)}
żyć: imperf: subj{np(str)} + {np(inst)}
żyć: imperf: subj{np(str)} + {preplexnp(na,loc,pl,'walizka',natr)}
żyć: imperf: subj{np(str)} + {prepnp(dla,gen)}
żyć: imperf: subj{np(str)} + {prepnp(na,acc)}
żyć: imperf: subj{np(str)} + {prepnp(z,gen); prepncp(z,gen,że)}
żyć: imperf: subj{np(str)} + {xp(dur)}
żyć: imperf: subj{np(str)} + {xp(locat)}
żyć: imperf: subj{np(str)} + {xp(temp)}
żywić: imperf: subj{np(str)} + obj,controller{np(str)} + controllee{xp(mod)}
żywić: imperf: subj{np(str)} + obj{np(str)} + {np(inst)}
żywić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(do,gen)}
żywić: imperf: subj{np(str)} + obj{np(str)} + {prepnp(wobec,gen)}
żywić się: imperf: subj,controller{np(str)} + controllee{xp(mod)}
żywić się: imperf: subj{np(str)} + {np(inst)}
